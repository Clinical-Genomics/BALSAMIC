# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

import os
import logging

from BALSAMIC.utils.rule import get_chrom
from BALSAMIC.utils.rule import get_result_dir
from BALSAMIC.utils.rule import get_vcf
from BALSAMIC import __version__ as bv

shell.prefix("set -eo pipefail; ")

LOG = logging.getLogger(__name__)

rule_dir = config["rule_directory"]
benchmark_dir = config["analysis"]["benchmark"]
fastq_dir = get_result_dir(config) + "/fastq/"
bam_dir = get_result_dir(config) + "/bam/"
cnv_dir = get_result_dir(config) + "/cnv/"
cutadapt_dir = get_result_dir(config) + "/cutadapt/"
fastqc_dir = get_result_dir(config) + "/fastqc/"
result_dir = get_result_dir(config) + "/"
vcf_dir = get_result_dir(config) + "/vcf/"
vep_dir = get_result_dir(config) + "/vep/"

singularity_image = config['singularity']['image'] 

# Declare sentieon variables 
sentieon = True
SENTIEON_LICENSE = ''
SENTIEON_INSTALL_DIR = ''

try:
    SENTIEON_LICENSE = os.environ["SENTIEON_LICENSE"]
    SENTIEON_INSTALL_DIR = os.environ["SENTIEON_INSTALL_DIR"]
except Exception as error:
    sentieon = False
    LOG.warn("Set environment variables SENTIEON_LICENSE and SENTIEON_INSTALL_DIR to run SENTIEON variant callers")
    

# Define set of rules
qc_rules = [
  "snakemake_rules/quality_control/fastp.rule",
  "snakemake_rules/quality_control/fastqc.rule",
  "snakemake_rules/quality_control/GATK.rule",
  "snakemake_rules/quality_control/multiqc.rule",
  "snakemake_rules/quality_control/picard.rule",
  "snakemake_rules/quality_control/sambamba_depth.rule"
  ]

align_rules = [
  "snakemake_rules/align/bwa_mem.rule",
  "snakemake_rules/align/samtools.rule"
  ]

annotation_rules = [
  "snakemake_rules/annotation/vep.rule"
  ]

variantcalling_rules = [
  "snakemake_rules/variant_calling/germline.rule",
  "snakemake_rules/variant_calling/split_bed.rule"
  ]

germline_caller = ["haplotypecaller", "strelka_germline", "manta_germline"]

if sentieon:
    germline_caller.append('dnascope')

if config['analysis']['analysis_type'] == "paired":

    qc_rules.append("snakemake_rules/quality_control/contest.rule")

    variantcalling_rules.extend([
      "snakemake_rules/variant_calling/somatic_tumor_normal.rule",
      "snakemake_rules/variant_calling/somatic_sv_tumor_normal.rule",
      "snakemake_rules/variant_calling/mergetype.rule",
      "snakemake_rules/variant_calling/cnvkit_paired.rule"
      ])

    somatic_caller_snv = ["mutect", "vardict", "strelka"]
    sentieon_callers = ["tnhaplotyper"] if sentieon else [];
    somatic_caller_sv = ["manta", "cnvkit"]
    vcf_merge = ["vcfmerge"]
    
else:

    variantcalling_rules.extend([
      "snakemake_rules/variant_calling/cnvkit_single.rule",
      "snakemake_rules/variant_calling/mergetype_tumor.rule",
      "snakemake_rules/variant_calling/somatic_tumor_only.rule",
      "snakemake_rules/variant_calling/somatic_sv_tumor_only.rule"
      ])

    somatic_caller_snv = ["mutect", "vardict"]
    sentieon_callers = ["tnhaplotyper"] if sentieon else [];
    somatic_caller_sv = ["manta", "cnvkit"]
    vcf_merge = ["vcfmerge"]
      

#somatic_caller = somatic_caller_snv + somatic_caller_sv + vcf_merge + sentieon_callers
somatic_caller = somatic_caller_snv + somatic_caller_sv + sentieon_callers

config["rules"] = align_rules + qc_rules + variantcalling_rules + annotation_rules

for r in config["rules"]:
    include: os.path.join(rule_dir + r)

var_class = ["somatic", "germline"]
var_type = ["CNV", "SNV", "SV"]

rule all:
    input:
        os.path.join(*([result_dir + "qc/" + "multiqc_report.html"])),
        expand(vep_dir + "{vcf}.vcf.gz", vcf=get_vcf(config, somatic_caller, [config["analysis"]["case_id"]])),
        expand(vep_dir + "{vcf}.pass.balsamic_stat", vcf=get_vcf(config, somatic_caller_snv + sentieon_callers, [config["analysis"]["case_id"]])),
    output:
        os.path.join(get_result_dir(config), "analysis_finish")
    shell:
        "date +'%Y-%m-%d T%T %:z' > {output}"

rule result_deliver:
    input:
        multiqc_report=os.path.join(*([result_dir + "qc/" + "multiqc_report.html"])),
        multiqc_json=os.path.join(*([result_dir + "qc/" + "multiqc_data/multiqc_data.json"])),
    output:
        os.path.join(get_result_dir(config), "delivery_report" + config["analysis"]["case_id"])
    params:
        case_name = config["analysis"]["case_id"],
    shell:
        """
echo format,id,path,path_index,step,tag > {output};
echo html,{params.case_name},{input.multiqc_report},,multiqc,multiqc_report >> {output};
echo json,{params.case_name},{input.multiqc_json},,multiqc,multiqc_data >> {output};
echo dir,{params.case_name},$(dirname {input.multiqc_json}),,multiqc,multiqc_data >> {output};
        """
