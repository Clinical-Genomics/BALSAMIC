#!python
# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

import os
from BALSAMIC.utils.rule import get_result_dir
from BALSAMIC import __version__ as bv

shell.prefix("set -eo pipefail; ")

rule_dir = config["rule_directory"]
benchmark_dir = config["analysis"]["benchmark"]
fastq_dir = get_result_dir(config) + "/fastq/"
bam_dir = get_result_dir(config) + "/bam/"
cnv_dir = get_result_dir(config) + "/cnv/"
cutadapt_dir = get_result_dir(config) + "/cutadapt/"
fastqc_dir = get_result_dir(config) + "/fastqc/"
result_dir = get_result_dir(config) + "/"
vcf_dir = get_result_dir(config) + "/vcf/"
vep_dir = get_result_dir(config) + "/vep/"
qc_dir = result_dir + "qc/"

singularity_image = config['singularity']['image'] 

# explictly check if cluster_config dict has zero keys.
if len(cluster_config.keys()) == 0:
    cluster_config = config

include:
  rule_dir + "snakemake_rules/align/bwa_mem.rule"
include:
  rule_dir + "snakemake_rules/quality_control/fastp.rule"
include:
  rule_dir + "snakemake_rules/quality_control/fastqc.rule"
include:
  rule_dir + "snakemake_rules/align/samtools.rule"
include:
  rule_dir + "snakemake_rules/quality_control/picard.rule"
include:
  rule_dir + "snakemake_rules/quality_control/sambamba_depth.rule"
include:
  rule_dir + "snakemake_rules/quality_control/mosdepth.rule"
include:
  rule_dir + "snakemake_rules/quality_control/multiqc.rule"
include:
  rule_dir + "snakemake_rules/quality_control/GATK.rule"

rule all:
  input:
    os.path.join(*([result_dir + "qc/" + "multiqc_report.html"])),
  output:
    os.path.join(get_result_dir(config), "analysis_finish")
  shell:
    "date +'%Y-%m-%d T%T %:z' > {output}"

