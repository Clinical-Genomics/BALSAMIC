# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

from BALSAMIC.utils.rule import get_conda_env, get_picard_mrkdup
from BALSAMIC import __version__ as bv

picarddup = get_picard_mrkdup(config)

def picard_flag(picarddup):
  if picarddup == "mrkdup":
      return "FALSE"
  else:
      return "TRUE"

rule MarkDuplicates:
  input:
    bam_dir + "{sample}.sorted.bam"
  output:
    mrkdup = bam_dir + "{sample}.sorted." + picarddup  + ".bam",
    stats = bam_dir + "{sample}.sorted." + picarddup + ".txt"
  params:
    tmpdir=bam_dir,
    conda = get_conda_env(config["conda_env_yaml"],"picard"),
    rm_dup = picard_flag(picarddup)
  singularity: singularity_image
  benchmark:
    benchmark_dir + "MarkDuplicates_" + "{sample}.markduplicates.tsv"
  shell:
    "source activate {params.conda};"
    "java -jar -Djava.io.tmpdir={params.tmpdir} -Xms8G -Xmx16G $CONDA_PREFIX/share/picard.jar "
        "MarkDuplicates "
        "INPUT={input} "
        "OUTPUT={output.mrkdup} "
        "VALIDATION_STRINGENCY=SILENT "
        "MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000 "
        "REMOVE_DUPLICATES={params.rm_dup} "
        "METRICS_FILE='{output.stats}'; "
    "samtools index {output.mrkdup}; "
    

rule CollectHsMetrics:
  input:
    fadict = (config["reference"]["reference_genome"]).replace(".fasta",".dict"),
    bed = config["panel"]["capture_kit"],
    bam = bam_dir + "{sample}.sorted." + picarddup + ".bam",
    fa = config["reference"]["reference_genome"],
  output:
    mrkdup = bam_dir + "{sample}.sorted." + picarddup + ".hsmetric"
  params:
    tmpdir=bam_dir,
    conda = get_conda_env(config["conda_env_yaml"],"picard"),
    baitsetname = os.path.basename(config["panel"]["capture_kit"])
  singularity: singularity_image
  benchmark:
    benchmark_dir + "CollectHsMetrics_" + "{sample}.collect_hsmetrics.tsv"
  shell:
    "source activate {params.conda};"
    "java -jar -Djava.io.tmpdir={params.tmpdir} -Xms8G -Xmx16G $CONDA_PREFIX/share/picard.jar "
      "BedToIntervalList "
      "I={input.bed} "
      "O={input.bam}.picard.bedintervals "
      "SD={input.fadict}; "
    "java -jar -Xms8G -Xmx16G $CONDA_PREFIX/share/picard.jar "
      "CollectHsMetrics "
      "BI={input.bam}.picard.bedintervals "
      "TI={input.bam}.picard.bedintervals "
      "I={input.bam} "
      "O={output.mrkdup} "
      "R={input.fa} "
      "BAIT_SET_NAME={params.baitsetname} "
      "COVERAGE_CAP=50000 "
      "METRIC_ACCUMULATION_LEVEL=ALL_READS; "
    

rule CollectAlignmentSummaryMetrics:
  input:
    bam = bam_dir + "{sample}.sorted.bam",
    fa = config["reference"]["reference_genome"]
  output:
    bam_dir + "{sample}.sorted.alignmetric"
  params:
    tmpdir=bam_dir,
    conda = get_conda_env(config["conda_env_yaml"],"picard"),
    adapter = config["QC"]["adapter"]
  singularity: singularity_image
  benchmark:
    benchmark_dir + "CollectAlignmentSummaryMetrics_" + "{sample}.collect_alignment_summary.tsv"
  shell:
    "source activate {params.conda};"
    "java -jar -Djava.io.tmpdir={params.tmpdir} -Xms8G -Xmx16G $CONDA_PREFIX/share/picard.jar "
      "CollectAlignmentSummaryMetrics "
      "R={input.fa} "
      "I={input.bam} "
      "O={output} "
      "ADAPTER_SEQUENCE={params.adapter} "
      "METRIC_ACCUMULATION_LEVEL=ALL_READS "
      "METRIC_ACCUMULATION_LEVEL=LIBRARY;"
    

rule CollectInsertSizeMetrics:
  input:
    bam = bam_dir + "{sample}.sorted.bam"
  output:
    pdf = bam_dir + "{sample}.sorted.insertsizemetric.pdf",
    txt = bam_dir + "{sample}.sorted.insertsizemetric"
  params:
    tmpdir=bam_dir,
    conda = get_conda_env(config["conda_env_yaml"],"picard")
  singularity: singularity_image
  benchmark:
    benchmark_dir + "CollectInsertSizeMetrics_" + "{sample}.collect_insertsize_metrics.tsv"
  shell:
    "source activate {params.conda};"
    "java -jar -Djava.io.tmpdir={params.tmpdir} -Xms8G -Xmx16G $CONDA_PREFIX/share/picard.jar "
      "CollectInsertSizeMetrics "
      "I={input.bam} "
      "H={output.pdf} "
      "O={output.txt} "
      "M=0.01 "
      "INCLUDE_DUPLICATES=TRUE "
      "METRIC_ACCUMULATION_LEVEL=ALL_READS "
      "METRIC_ACCUMULATION_LEVEL=LIBRARY; "
