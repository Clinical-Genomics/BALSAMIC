# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

import os

from BALSAMIC.utils.rule import get_result_dir
from BALSAMIC.utils.rule import get_vcf

shell.prefix("set -eo pipefail; ")

rule_dir = config["rule_directory"]
fastq_dir = get_result_dir(config) + "/fastq/"
bam_dir = get_result_dir(config) + "/bam/"
cnv_dir = get_result_dir(config) + "/cnv/"
cutadapt_dir = get_result_dir(config) + "/cutadapt/"
fastqc_dir = get_result_dir(config) + "/fastqc/"
result_dir = get_result_dir(config) + "/"
vcf_dir = get_result_dir(config) + "/vcf/"
vep_dir = get_result_dir(config) + "/vep/"

try:
    SENTIEON_LICENSE = os.environ["SENTIEON_LICENSE"]
    SENTIEON_INSTALL_DIR = os.environ["SENTIEON_INSTALL_DIR"]
    SENTIEON_DNASCOPE = os.environ["SENTIEON_DNASCOPE_ML"]
    SENTIEON_TNSCOPE = os.environ["SENTIEON_TNSCOPE"]
except Exception as error:
    print("ERROR: Set Environment variable to run this pipeline.")

# rules for pipeline
quality_check = ["snakemake_rules/quality_control/fastp.rule"]
preprocessing = ["snakemake_rules/sentieon/sentieon_alignment.rule"]

if config['analysis']['analysis_type'] == "paired":
    variant_calling = ["snakemake_rules/sentieon/sentieon_tn_varcall.rule", \
                       "snakemake_rules/sentieon/sentieon_germline.rule"]
    somatic_caller = ['tnhaplotyper','tnsnv', 'tnscope']
    germline_caller = ['dnascope']
else:
    variant_calling = ["snakemake_rules/sentieon/sentieon_t_varcall.rule", \
                       "snakemake_rules/sentieon/sentieon_germline.rule"]
    somatic_caller = ['tnhaplotyper','tnsnv', 'tnscope']
    germline_caller = ['dnascope']

annotation = ["snakemake_rules/annotation/vep.rule"]

pipeline = quality_check + preprocessing + variant_calling + annotation 


for rule in pipeline:
    include: os.path.join(rule_dir, rule)


rule all:
    input:
        expand(bam_dir + "{sample}.bam", sample=config["samples"]),
        expand(bam_dir + "{sample}.dedup.bam", sample=config["samples"]),
        expand(bam_dir + "{sample}.dedup.realign.bam", sample=config["samples"]),
        expand(bam_dir + "{sample}.dedup.realign.recal_data.table", sample=config["samples"]),
        expand(bam_dir + "{sample}.dedup.realign.recal.csv", sample=config["samples"]),
        expand(bam_dir + "{sample}.dedup.realign.recal.pdf", sample=config["samples"]),
        expand(vep_dir + "{vcf}.vcf.gz", vcf = get_vcf(config, somatic_caller, [config["analysis"]["case_id"]])),
        expand(vep_dir + "{vcf}.vcf.gz", vcf = get_vcf(config, germline_caller, config["samples"]))
    output:
        os.path.join(get_result_dir(config), "analysis_finish")
    shell:
        "date +'%Y-%M-%d T%T %:z' > {output}"

