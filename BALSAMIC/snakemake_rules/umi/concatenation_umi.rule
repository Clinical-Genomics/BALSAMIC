# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule concatenate_umi_reads:
    input:
        fastqs_fwd = lambda wildcards: expand(fastq_dir + "{fastq_pattern}_1.umi_optimized.fastq.gz",
            fastq_pattern=balsamic.get_fastq_patterns_by_sample(sample_names = [wildcards.sample])),
        fastqs_rev = lambda wildcards: expand(fastq_dir + "{fastq_pattern}_2.umi_optimized.fastq.gz",
            fastq_pattern=balsamic.get_fastq_patterns_by_sample(sample_names = [wildcards.sample]))
    output:
        fastq_fwd = fastq_dir + "concat.{sample}_1.umi_optimized.fastq.gz",
        fastq_rev = fastq_dir + "concat.{sample}_2.umi_optimized.fastq.gz"
    benchmark:
        Path(benchmark_dir, "concatenated_{sample}_UMI.tsv").as_posix()
    singularity:
        Path(singularity_image, "balsamic.sif").as_posix()
    params:
        fastq_dir = config["analysis"]["fastq_path"],
        sample = "{sample}"
    threads:
        get_threads(cluster_config, "concatenate")
    message:
        "Sample {params.sample} FASTQ concatenation per read-direction, before UMI extraction"
    shell:
        """
        cat {input.fastqs_fwd} > {output.fastq_fwd}
        cat {input.fastqs_rev} > {output.fastq_rev}
        """
