# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

#from BALSAMIC.utils.rule import get_conda_env
#from BALSAMIC.utils.rule import get_threads
#from BALSAMIC.utils.models import UMIworkflowConfig
#from BALSAMIC.utils.constants import umiworkflow_params

#params_umi = UMIworkflowConfig.parse_obj(umiworkflow_params)

# Annotate vcf files with VEP 
rule vep_umi:
    input:
        vcf =  vcf_dir + "{var_type}.somatic.{case_name}.{step}.{var_caller}.vcf.gz",
        cosmic = config["reference"]["cosmic"]
    output:
        vcf_all = vep_dir + "{var_type}.somatic.{case_name}.{step}.{var_caller}.all.vcf.gz",
        vcf_summary = vep_dir + "{var_type}.somatic.{case_name}.{step}.{var_caller}.all.vcf.gz_summary.html",
        vcf_pass = vep_dir + "{var_type}.somatic.{case_name}.{step}.{var_caller}.pass.vcf.gz",
    benchmark:
        Path(benchmark_dir + 'vep_umi_' + "{var_type}.somatic.{case_name}.{step}.{var_caller}.vep.tsv").as_posix()
    singularity:
        singularity_image
    params:
        vep_cache = config["reference"]["vep"],
        conda = get_conda_env(config["conda_env_yaml"],"ensembl-vep"),
        sample_id = "{case_name}.{step}",
        var_caller = "{var_caller}",
        default_options = paramsumi.vep.vep_filters
    threads: 
        get_threads(cluster_config, "vep_umi")
    message:
        "Annotating {params.var_caller} VCF file with VEP for sample {params.sample_id}"
    shell:
        """
source activate {params.conda};

vep_path=$(dirname $(readlink -e $(which vep)));

export PERL5LIB=;

vep \
--dir $vep_path \
--dir_cache {params.vep_cache} \
--dir_plugins $vep_path \
--input_file {input.vcf} \
--output_file {output.vcf_all} \
--fork {threads} \
{params.default_options} \
--custom {input.cosmic},COSMIC,vcf,exact,0,CDS,GENE,STRAND,CNT,AA; 

tabix -p vcf -f {output.vcf_all};

bcftools view -f PASS -o {output.vcf_pass} -O z {output.vcf_all};

tabix -p vcf -f {output.vcf_pass};
        """
