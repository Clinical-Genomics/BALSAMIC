# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

from BALSAMIC.utils.rule import get_conda_env
from BALSAMIC.utils.rule import get_threads

# Annotate vcf files with VEP 
rule vep_umi:
    input:
        vcf = vcf_dir + '{sample}.{var_caller}.consensusalign.vcf.gz',
        cosmic = config["reference"]["cosmic"]
    output:
        vcf_all = vep_dir + '{sample}.{var_caller}.umi.all.vcf.gz',
        vcf_summary = vep_dir + '{sample}.{var_caller}.umi.all.vcf.gz_summary.html',
        vcf_pass = vep_dir + '{sample}.{var_caller}.umi.pass.vcf.gz'
    params:
        conda = get_conda_env(config["conda_env_yaml"],"ensembl-vep"),
        vep_cache = config["reference"]["vep"],
        default_options = '--compress_output bgzip --vcf --everything --allow_non_variant --dont_skip --buffer_size 10000 --format vcf --offline --variant_class --merged --cache --verbose --force_overwrite',
        sample_id = '{sample}.consensusalign',
        var_caller = '{var_caller}'
    threads: get_threads(cluster_config, 'vep_umi')
    singularity: singularity_image
    log:
        log_dir + '{sample}.consensusalign.{var_caller}_vep.log'
    benchmark:
        benchmark_dir + '{sample}.consensusalign.{var_caller}_vep.tsv'
    message:
        'Annotating {params.var_caller} VCF file with VEP for sample {params.sample_id}'
    shell:
        "source activate {params.conda}\n"
        "vep_path=$(dirname $(readlink -e $(which vep)))\n"
        "export PERL5LIB=\n"
        "vep "
        "--dir $vep_path "
        "--dir_cache {params.vep_cache} "
        "--dir_plugins $vep_path "
        "--input_file {input.vcf} "
        "--output_file {output.vcf_all} "
        "--compress_output bgzip "
        "--fork {threads} "
        "--vcf "
        "--everything "
        "--allow_non_variant "
        "--dont_skip "
        "--buffer_size 10000 "
        "--format vcf "
        "--offline "
        "--variant_class "
        "--merged "
        "--cache "
        "--custom {input.cosmic},COSMIC,vcf,exact,0,CDS,GENE,STRAND,CNT,AA "
        "--verbose "
        "--force_overwrite; "
        "tabix -p vcf -f {output.vcf_all}; "
        "bcftools view -f PASS -o {output.vcf_pass} -O z {output.vcf_all}; "
        "tabix -p vcf -f {output.vcf_pass}; "
