# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

from BALSAMIC.utils.rule import get_conda_env
from BALSAMIC.utils.rule import get_threads

# Variant-calling using TNscope
rule sentieon_umi_tnscope:
    input:
        bam =  umi_dir + '{sample}.{step}.bam',
        ref_fa = config['reference']['reference_genome'],
        bed = config['panel']['capture_kit'],
        dbsnp = config['reference']['dbsnp']
    output:
         vcf = vcf_dir + '{sample}.TNscope.{step}.vcf.gz',
    params:
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        algo = 'TNscope',
        tAF = '0.0005',
        TL = '0.5',
        detect = 'sv',
        error_rate = '5',
        prune_factor = '3',
        sample_id = '{sample}'
    threads: get_threads(cluster_config, 'sentieon_umi_tnscope')
    log: 
        log_dir + '{sample}.{step}.varcall.TNscope.log'
    benchmark : 
        benchmark_dir + '{sample}.{step}.varcall.TNscope.tsv'
    message: "Calling SNVs using TNscope for sample {params.sample_id}"
    shell:
        "export SENTIEON_LICENSE={params.sentieon_lic}\n"
        "{params.sentieon_exec} driver -t {threads} -r {input.ref_fa} -i {input.bam} --algo {params.algo} --tumor_sample {params.sample_id} --dbsnp {input.dbsnp} --min_tumor_allele_frac {params.tAF} --filter_t_alt_frac {params.tAF} --min_init_tumor_lod {params.TL} --disable_detector {params.detect} --max_error_per_read {params.error_rate} --pcr_indel_model NONE --prune_factor {params.prune_factor} {output.vcf}  &> {log}\n"
