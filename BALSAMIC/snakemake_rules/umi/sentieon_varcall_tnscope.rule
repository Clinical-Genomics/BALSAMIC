# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

# Variant-calling using TNscope



rule sentieon_tnscope_umi:
    input:
        bam = umi_dir + "tumor.umi_consensusfiltered.merged.bam",
        ref_fa = config["reference"]["reference_genome"],
        bed = config["panel"]["capture_kit"],
        dbsnp = config["reference"]["dbsnp"]
    output:
        vcf = vcf_dir +  "SNV.somatic."+ config["analysis"]["case_id"] + ".TNscope_umi.vcf.gz",
        namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".TNscope_umi.sample_name_map"
    benchmark:
        Path(benchmark_dir, "sentieon_tnscope_umi_" + config["analysis"]["case_id"] + ".tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        tumor_af = params.umicommon.filter_tumor_af,
        algo = params.tnscope_umi.algo,
        disable_detect = params.tnscope_umi.disable_detect,
        tumor_lod = params.tnscope_umi.min_tumorLOD,
        init_tumor_lod = params.tnscope_umi.init_tumorLOD,
        error_rate = params.tnscope_umi.error_rate,
        prune_factor = params.tnscope_umi.prunefactor,
        tumor = "TUMOR",
        pcr_model = params.common.pcr_model
    threads: 
        get_threads(cluster_config, "sentieon_tnscope_umi")
    message: 
        "Calling SNVs using TNscope for sample {params.tumor}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-t {threads} \
-r {input.ref_fa} \
-i {input.bam} \
--algo {params.algo} \
--tumor_sample {params.tumor} \
--dbsnp {input.dbsnp} \
--min_tumor_allele_frac {params.tumor_af} \
--filter_t_alt_frac {params.tumor_af} \
--min_init_tumor_lod {params.init_tumor_lod} \
--min_tumor_lod {params.tumor_lod} \
--disable_detector {params.disable_detect} \
--max_error_per_read {params.error_rate} \
--pcr_indel_model {params.pcr_model} \
--prune_factor {params.prune_factor} \
{output.vcf};

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap}; 
        """
