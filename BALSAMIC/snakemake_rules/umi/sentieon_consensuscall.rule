# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


rule sentieon_consensusfilter_umi:
    input:
        umi_dir + "{sample}_consensuscalled_umi.bam"
    output:
        temp(umi_dir + "{sample}_consensusfiltered_umi.bam")
    benchmark:
        Path(benchmark_dir, "sentieon_consensusfilter_umi_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("samtools") + ".sif").as_posix()
    params:
        consensusfilter_script = get_script_path("FilterDuplexUMIconsensus.awk"),
        minreads = params.umiconsensuscall.filter_minreads,
        sample_id = '{sample}',
    threads:
        get_threads(cluster_config, "sentieon_consensusfilter_umi")
    message:
        "Filtering consensus reads based on XZ tag for {params.sample_id}"
    shell:
        """
samtools view -h {input} | \
awk -v MinR={params.minreads} -v OFS=\'\\t\' -f {params.consensusfilter_script} | \
samtools view -bh - > {output};

samtools index {output};
        """
