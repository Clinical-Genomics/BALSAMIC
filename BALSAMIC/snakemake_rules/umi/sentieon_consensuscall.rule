# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


# UMI-consensus calling

rule sentieon_consensuscall_umi:
    input:
        bam = Path(bam_dir, "{sample_type}.{sample}.align_sort.bam").as_posix()
    output:
        fastq_consensus = temp(umi_dir + "{sample_type}.{sample}.consensuscall_umi.fastq.gz")
    benchmark:
        Path(benchmark_dir, "sentieon_consensuscall_umi_{sample_type}_{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_install_dir = config["SENTIEON_INSTALL_DIR"],
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        tag = params.umiconsensuscall.tag,
        ip_format = params.umiconsensuscall.align_format,
        sample_id = '{sample}'
    threads: 
        get_threads(cluster_config, "sentieon_consensuscall_umi")
    message: 
        "Calling consensus molecules using sentieon for {params.sample_id}"
    shell:
        """
export LD_PRELOAD={params.sentieon_install_dir}/lib/libjemalloc.so.1
export MALLOC_CONF=lg_dirty_mult:-1

mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} umi consensus \
-t {threads} \
-i {input.bam} \
-o {output.fastq_consensus} \
--input_format {params.ip_format} \
--umi_tag {params.tag} \
--read_name_prefix 'UMI-'; 
        """

# Alignment of consensus reads

rule sentieon_bwa_umiconsensus:
    input:
        ref_fa = config["reference"]["reference_genome"],
        fq_consensus = umi_dir + "{sample_type}.{sample}.consensuscall_umi.fastq.gz"
    output:
        align_consensus = umi_dir + "{sample_type}.{sample}.consensuscalled_umi.bam"
    benchmark:
        Path(benchmark_dir, "sentieon_bwa_umiconsensus_{sample_type}_{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_install_dir = config["SENTIEON_INSTALL_DIR"],
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        ip_bases = params.umicommon.align_intbases,
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, "sentieon_bwa_umiconsensus")
    message:
         "Mapping consensus reads and sorting using sentieon bwa-mem for {params.sample_id}"
    shell:
        """
export LD_PRELOAD={params.sentieon_install_dir}/lib/libjemalloc.so.1
export MALLOC_CONF=lg_dirty_mult:-1

mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} bwa mem \
-R '@RG\\tID:{params.sample_id}\\tSM:{wildcards.sample_type}\\tLB:TargetPanel\\tPL:ILLUMINA' \
-t {threads} \
-K {params.ip_bases} \
-p -C {input.ref_fa} \
{input.fq_consensus} | \
{params.sentieon_exec} util sort \
-r {input.ref_fa} \
--sam2bam \
--umi_post_process \
-o {output.align_consensus} \
-i - ;
        """

# Filter consensus called reads based on 'XZ' filtering

rule sentieon_consensusfilter_umi:
    input:
        umi_dir + "{sample_type}.{sample}.consensuscalled_umi.bam"
    output:
        temp(umi_dir + "{sample_type}.{sample}.consensusfiltered_umi.bam")
    benchmark:
        Path(benchmark_dir, "sentieon_consensusfilter_umi_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("samtools") + ".sif").as_posix()
    params:
        consensusfilter_script = get_script_path("FilterDuplexUMIconsensus.awk"),
        minreads = params.umiconsensuscall.filter_minreads,
        sample_id = '{sample}',
    threads:
        get_threads(cluster_config, "sentieon_consensusfilter_umi")
    message:
        "Filtering consensus reads based on XZ tag for {params.sample_id}"
    shell:
        """
samtools view -h {input} | \
awk -v MinR={params.minreads} -v OFS=\'\\t\' -f {params.consensusfilter_script} | \
samtools view -bh - > {output};

samtools index {output};
        """
