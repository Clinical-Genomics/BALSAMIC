# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

# UMI-consensus calling
rule sentieon_consensuscall_umi:
    input:
        sam_consensus = umi_dir + "{sample}.align.umi.bam"
    output:
        fastq_consensus = temp(umi_dir + "{sample}.consensuscall.umi.fastq.gz")
    benchmark:
        Path(benchmark_dir, "sentieon_consensuscall_umi_{sample}.tsv").as_posix()
    params:
        sentieon_install_dir = config["SENTIEON_INSTALL_DIR"],
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        tag = paramsumi.consensuscall.tag, 
        ip_format = paramsumi.consensuscall.align_format,
        sample_id = '{sample}'
    threads: 
        get_threads(cluster_config, "sentieon_consensuscall_umi")
    message: 
        "Consensus molecule creation using sentieon for sample {params.sample_id}"
    shell:
        """
export LD_PRELOAD={params.sentieon_install_dir}/lib/libjemalloc.so.1
export MALLOC_CONF=lg_dirty_mult:-1
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} umi consensus \
-t {threads} \
-i {input.sam_consensus} \
-o {output.fastq_consensus} \
--input_format {params.ip_format} \
--umi_tag {params.tag} \
--read_name_prefix 'UMI-'; 
        """

# Alignment of consensus reads
rule sentieon_bwa_umiconsensus:
    input:
        ref_fa = config["reference"]["reference_genome"],
        fq_consensus = umi_dir + "{sample}.consensuscall.umi.fastq.gz"
    output:
        align_consensus = umi_dir + "{sample}.consensuscalled.umi.bam"
    benchmark:
        Path(benchmark_dir, "sentieon_bwa_umiconsensus_{sample}.tsv").as_posix()
    params:
        sentieon_install_dir = config["SENTIEON_INSTALL_DIR"],
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sheader = paramsumi.common.align_header,
        ip_bases = paramsumi.common.align_intbases,
        sample_id = "{sample}"
    threads: 
        get_threads(cluster_config, "sentieon_bwa_umiconsensus")
    message:
         "Mapping of consensus reads with the sentieon bwa mem, sorting for sample {params.sample_id}"
    shell:
        """
export LD_PRELOAD={params.sentieon_install_dir}/lib/libjemalloc.so.1
export MALLOC_CONF=lg_dirty_mult:-1
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} bwa mem \
-R {params.sheader} \
-t {threads} \
-K {params.ip_bases} \
-p -C {input.ref_fa} \
{input.fq_consensus} | \
{params.sentieon_exec} util sort \
-r {input.ref_fa} \
--sam2bam \
--umi_post_process \
-o {output.align_consensus} \
-i - ;
        """

# Filter consensus called reads based on 'XZ' filtering
rule sentieon_consensusfilter_umi:
    input:
        umi_dir + "{case_name}.consensuscalled.umi.bam"
    output:
        umi_dir + "{case_name}.consensusfiltered.umi.bam"
    benchmark:
        Path(benchmark_dir, "sentieon_consensusfilter_umi_{case_name}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("samtools") + ".sif").as_posix()
    params:
        consensusfilter_script = get_script_path("FilterDuplexUMIconsensus.awk"),
        minreads = paramsumi.consensuscall.filter_minreads,
        sample_id = '{case_name}',
        conda = config["bioinfo_tools"].get("samtools")
    threads:
        get_threads(cluster_config, "sentieon_consensusfilter_umi")
    message:
        "Filtering consensus reads based on XZ tag for sample {params.sample_id}"
    shell:
        """
source activate {params.conda};

samtools view -h {input} | \
awk -v MinR={params.minreads} -v OFS=\'\\t\' -f {params.consensusfilter_script} | \
samtools view -bh - > {output};

samtools index {output};
        """
