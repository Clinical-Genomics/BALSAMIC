# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule sentieon_consensuscall_umi:
    """UMI-consensus calling"""
    input:
        bam = Path(bam_dir, "{sample_type}.{sample}.umi_align_sort.bam").as_posix()
    output:
        fastq_consensus = temp(umi_dir + "{sample_type}.{sample}.consensuscall_umi.fastq.gz")
    benchmark:
        Path(benchmark_dir, "sentieon_consensuscall_umi_{sample_type}_{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_install_dir = config_model.sentieon.sentieon_install_dir,
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        tag = params.umiconsensuscall.tag,
        ip_format = params.umiconsensuscall.align_format,
        sample_id = '{sample}'
    message: 
        "Calling consensus molecules using sentieon for {params.sample_id}"
    shell:
        """
export LD_PRELOAD={params.sentieon_install_dir}/lib/libjemalloc.so.1
export MALLOC_CONF=lg_dirty_mult:-1

export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} umi consensus \
-t {resources.threads} \
-i {input.bam} \
-o {output.fastq_consensus} \
--input_format {params.ip_format} \
--umi_tag {params.tag} \
--read_name_prefix 'UMI-'; 

rm -rf {params.tmpdir}
        """

rule sentieon_bwa_umiconsensus:
    """Alignment of consensus reads"""
    input:
        ref_fa = config_model.reference["reference_genome"].file.as_posix(),
        fq_consensus = umi_dir + "{sample_type}.{sample}.consensuscall_umi.fastq.gz"
    output:
        align_consensus = umi_dir + "{sample_type}.{sample}.consensuscalled_umi.bam"
    benchmark:
        Path(benchmark_dir, "sentieon_bwa_umiconsensus_{sample_type}_{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_install_dir = config_model.sentieon.sentieon_install_dir,
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        ip_bases = params.umicommon.align_intbases,
        sample_id = "{sample}",
        sample_type = lambda wildcards: config_model.get_sample_type_by_name(wildcards.sample, uppercase=True),
    message:
         "Mapping consensus reads and sorting using sentieon bwa-mem for {params.sample_id}"
    shell:
        """
export LD_PRELOAD={params.sentieon_install_dir}/lib/libjemalloc.so.1
export MALLOC_CONF=lg_dirty_mult:-1

export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} bwa mem \
-R '@RG\\tID:{params.sample_id}\\tSM:{params.sample_type}\\tLB:TargetPanel\\tPL:ILLUMINA' \
-t {resources.threads} \
-K {params.ip_bases} \
-p -C {input.ref_fa} \
{input.fq_consensus} | \
{params.sentieon_exec} util sort \
-r {input.ref_fa} \
--sam2bam \
--umi_post_process \
-o {output.align_consensus} \
-i - ;

rm -rf {params.tmpdir}
        """

rule sentieon_consensusfilter_umi:
    """Filter consensus called reads based on 'XZ' filtering"""
    input:
        umi_dir + "{sample_type}.{sample}.consensuscalled_umi.bam"
    output:
        umi_dir + "{sample_type}.{sample}_consensusfiltered_umi.bam"
    benchmark:
        Path(benchmark_dir, "sentieon_consensusfilter_umi_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("samtools") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        consensusfilter_script = get_script_path("FilterDuplexUMIconsensus.awk"),
        minreads = params.umiconsensuscall.filter_minreads,
        sample_id = '{sample}',
    message:
        "Filtering consensus reads based on XZ tag for {params.sample_id}"
    shell:
        """
export TMPDIR={params.tmpdir};

samtools view -h {input} | \
awk -v MinR={params.minreads} -v OFS=\'\\t\' -f {params.consensusfilter_script} | \
samtools view -bh - > {output};

samtools index {output};
        """

rule bam_compress_tumor_umi:
    input:
        bam = umi_dir + "tumor.{sample}_consensusfiltered_umi.bam",
        fasta = config_model.reference["reference_genome"]
    output:
        cram = umi_dir + "tumor.{sample}.consensusfiltered_umi.cram",
    benchmark:
        Path(benchmark_dir, "bam_compress_tumor_umi_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("compress") + ".sif").as_posix()
    params:
        sample_id = "{sample}",
        housekeeper_id= {"id": tumor_sample, "tags": "umi_tumor"}
    message:
        "Compressing UMI bam to cram for {params.sample_id}"
    shell:
        """
samtools view -h -T {input.fasta} --threads {resources.threads} -C -o {output.cram} {input.bam}; 
samtools index {output.cram}; 
        """

if config['analysis']['analysis_type'] == "paired":
    rule bam_compress_normal_umi:
        input:
            bam = umi_dir + "normal.{sample}_consensusfiltered_umi.bam",
            fasta = config_model.reference["reference_genome"]
        output:
            cram = umi_dir + "normal.{sample}.consensusfiltered_umi.cram"
        benchmark:
            Path(benchmark_dir, "bam_compress_normal_umi_{sample}.tsv").as_posix()
        singularity:
            Path(singularity_image, config["bioinfo_tools"].get("compress") + ".sif").as_posix()
        params:
            sample_id = "{sample}",
            housekeeper_id= {"id": normal_sample, "tags": "umi_normal"}
        message:
            "Compressing UMI bam to cram for {params.sample_id}"
        shell:
            """
    samtools view -h -T {input.fasta} --threads {resources.threads} -C -o {output.cram} {input.bam}; 
    samtools index {output.cram}; 
            """
