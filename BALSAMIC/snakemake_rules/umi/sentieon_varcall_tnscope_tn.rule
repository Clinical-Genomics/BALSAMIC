# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

# Variant-calling using TNscope
rule sentieon_tnscope_umi_tn:
    input:
        bamT = expand(umi_dir + "{mysample}.{step}.umi.bam", 
                      mysample=get_sample_type(config["samples"], "tumor"),
                      step=["consensuscalled", "consensusfiltered"]),
        bamN = expand(umi_dir + "{mysample}.{step}.umi.bam", 
                      mysample=get_sample_type(config["samples"], "normal"), 
                      step=["consensuscalled", "consensusfiltered"]),
        ref_fa = config["reference"]["reference_genome"],
        bed = config["panel"]["capture_kit"],
        dbsnp = config["reference"]["dbsnp"]
    output:
        consensuscall = [ vcf_dir +  "SNV.somatic." + config["analysis"]["case_id"] + ".consensuscalled.TNscope_umi.vcf.gz",
                        vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".consensuscalled.TNscope_umi.sample_name_map" ],
        consensusfilter = [ vcf_dir +  "SNV.somatic."+ config["analysis"]["case_id"] + ".consensusfiltered.TNscope_umi.vcf.gz",
                         vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".consensusfiltered.TNscope_umi.sample_name_map" ]
    benchmark:
        Path(benchmark_dir + "sentieon_tnscope_umi_"+ config["analysis"]["case_id"] + ".tsv").as_posix()
    params:
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        tumor_af = paramsumi.common.filter_tumor_af,
        algo = paramsumi.tnscope.algo,
        disable_detect = paramsumi.tnscope.disable_detect,
        tumor_lod = paramsumi.tnscope.min_tumorLOD,
        error_rate = paramsumi.tnscope.error_rate,
        prune_factor = paramsumi.tnscope.prunefactor,
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal") 
    threads: 
        get_threads(cluster_config, "sentieon_tnscope_umi")
    message: 
        "Calling SNVs using TNscope for tumor sample: {params.tumor}"
        " versus normal sample: {params.normal}"
    shell:
        """
## run sentieon on both files
{params.sentieon_exec} driver \
-t {threads} \
-r {input.ref_fa} \
-i {input.bamT[0]} \
-i {input.bamN[0]} \
--algo {params.algo} \
--tumor_sample {params.tumor} \
--normal_sample {params.normal} \
--dbsnp {input.dbsnp} \
--min_tumor_allele_frac {params.tumor_af} \
--filter_t_alt_frac {params.tumor_af} \
--min_init_tumor_lod {params.tumor_lod} \
--disable_detector {params.disable_detect} \
--max_error_per_read {params.error_rate} \
--pcr_indel_model NONE \
--prune_factor {params.prune_factor} \
{output.consensuscall[0]};

echo -e \"{params.tumor}\\tTUMOR\n{params.normal}\\tNORMAL\" > {output.consensuscall[1]};


{params.sentieon_exec} driver \
-t {threads} \
-r {input.ref_fa} \
-i {input.bamT[1]} \
-i {input.bamN[1]} \
--algo {params.algo} \
--tumor_sample {params.tumor} \
--normal_sample {params.normal} \
--dbsnp {input.dbsnp} \
--min_tumor_allele_frac {params.tumor_af} \
--filter_t_alt_frac {params.tumor_af} \
--min_init_tumor_lod {params.tumor_lod} \
--disable_detector {params.disable_detect} \
--max_error_per_read {params.error_rate} \
--pcr_indel_model NONE \
--prune_factor {params.prune_factor} \
{output.consensusfilter[0]};

echo -e \"{params.tumor}\\tTUMOR\n{params.normal}\\tNORMAL\" > {output.consensusfilter[1]};
        """
