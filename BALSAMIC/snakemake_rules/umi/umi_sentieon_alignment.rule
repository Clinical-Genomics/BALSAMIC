# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule sentieon_align_sort_umireads_umi:
    input:
        ref = config["reference"]["reference_genome"],
        interleaved_fastq = fastq_dir + "{sample_type}.{sample}_umiextract_interleaved.fastq.gz",
        refidx = expand(config["reference"]["reference_genome"] + ".{prefix}", prefix=["amb","ann","bwt","pac","sa"])
    output:
        bam_out = Path(bam_dir, "{sample_type}.{sample}.umi_align_sort.bam").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_umi_align_sort_{sample_type}_{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_install_dir = config_model.sentieon.sentieon_install_dir,
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        sample_id = "{sample}",
        sample_type = lambda wildcards: config_model.get_sample_type_by_name(wildcards.sample, uppercase=True),
        ip_bases = params.umicommon.align_intbases
    threads:
        get_threads(cluster_config, 'sentieon_align_sort')
    message:
        ("Align fastq reads using sentieon bwa-mem and sort reads using samtools for sample type: "
        "{params.sample_type} : {params.sample_id}")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} bwa mem \
-R '@RG\\tID:{params.sample_id}\\tSM:{params.sample_type}\\tLB:TargetPanel\\tPL:ILLUMINA' \
-K {params.ip_bases} \
-p -t {threads} -C \
{input.ref} {input.interleaved_fastq} | \
{params.sentieon_exec} util sort \
-r {input.ref} \
--sam2bam \
-o {output.bam_out} -i - ;
        """