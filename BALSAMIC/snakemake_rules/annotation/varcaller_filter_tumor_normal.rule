# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# NGS filters for various scenarios


rule bcftools_filter_vardict_research_tumor_normal:
  input:
    vcf_snv_research = vep_dir + "{var_type}.somatic.{case_name}.vardict.research.vcf.gz",
  output:
    vcf_pass_vardict = vep_dir + "{var_type}.somatic.{case_name}.vardict.research.filtered.pass.vcf.gz",
    bcftools_counts_research = vep_dir + "{var_type}.somatic.{case_name}.vardict.research.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_vardict_research_tumor_normal_' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
    pop_freq = [VARDICT.pop_freq.tag_value, VARDICT.pop_freq.filter_name],
    swegen_freq = [VARDICT.swegen_snv_freq.tag_value, VARDICT.swegen_snv_freq.filter_name],
    case_name = '{case_name}',
    edit_vcf_script = get_script_path("edit_vcf_info.py"),
    variant_caller = "vardict"
  threads:
    get_threads(cluster_config, 'bcftools_filter_vardict_research_tumor_normal')
  message:
    "Filtering vardict tumor-normal annotated research variants using bcftools and "
    "adding FOUND_IN tags to the output VCF for {params.case_name} "
  shell:
    """
bcftools view {input.vcf_snv_research} | \
bcftools filter --threads {threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools filter --threads {threads} --include 'INFO/SWEGENAF <= {params.swegen_freq[0]} || INFO/SWEGENAF == \".\"' --soft-filter '{params.swegen_freq[1]}' --mode '+' |\
bcftools view -f PASS -o {output.vcf_pass_vardict}.temp1 -O z;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_pass_vardict}.temp1 \
--output_vcf {output.vcf_pass_vardict}.temp2 \
--variant_caller {params.variant_caller};

bgzip -@ {threads} -l 9 -c {output.vcf_pass_vardict}.temp2 > {output.vcf_pass_vardict}

tabix -p vcf -f {output.vcf_pass_vardict};

bcftools +counts {output.vcf_pass_vardict} > {output.bcftools_counts_research};
    
rm {output.vcf_pass_vardict}.temp1;

rm {output.vcf_pass_vardict}.temp2;
    """


rule bcftools_filter_tnhaplotyper_tumor_normal:
  input:
    vcf = vep_dir + "{var_type}.somatic.{case_name}.tnhaplotyper.research.vcf.gz",
  output:
    vcf_filtered = vep_dir + "{var_type}.somatic.{case_name}.tnhaplotyper.research.filtered.vcf.gz",
    vcf_pass_tnhaplotyper = vep_dir + "{var_type}.somatic.{case_name}.tnhaplotyper.research.filtered.pass.vcf.gz",
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_tnhaplotyper_tumor_normal' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq = [COMMON_FILTERS.pop_freq.tag_value, COMMON_FILTERS.pop_freq.filter_name],
    case_name =  '{case_name}'
  threads:
    get_threads(cluster_config, 'bcftools_filter_tnhaplotyper_tumor_normal')
  message:
    "Filtering tnhaplotyper tumor-normal annotated variants using bcftools for {params.case_name}"
  shell:
    """
bcftools view {input.vcf} \
| bcftools filter --threads {threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' \
| bcftools view --threads {threads} -o {output.vcf_filtered} -O z;

tabix -p vcf -f {output.vcf_filtered};

bcftools view -f PASS -o {output.vcf_pass_tnhaplotyper} -O z {output.vcf_filtered};

tabix -p vcf -f {output.vcf_pass_tnhaplotyper};

    """


rule bcftools_filter_TNscope_umi_research_tumor_normal:
  input:
    vcf_snv_research = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.research.vcf.gz",
  output:
    vcf_pass_tnscope_umi = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.research.filtered.pass.vcf.gz",
    bcftools_counts_research = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.research.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_TNscope_umi_research_tumor_normal' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq = [SENTIEON_CALLER.pop_freq_umi.tag_value, SENTIEON_CALLER.pop_freq_umi.filter_name],
    swegen_freq = [SENTIEON_CALLER.swegen_snv_freq.tag_value, SENTIEON_CALLER.swegen_snv_freq.filter_name],
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
    case_name = '{case_name}',
    edit_vcf_script = get_script_path("edit_vcf_info.py"),
    variant_caller = "tnscope_umi"
  threads:
    get_threads(cluster_config, 'bcftools_filter_TNscope_umi_research_tumor_normal')
  message:
    "Filtering TNscope_umi tumor-normal annotated research variants using bcftools and "
    "adding FOUND_IN tags to the output VCF file for {params.case_name} "
  shell:
    """
bcftools view --threads {threads} -f PASS,triallelic_site {input.vcf_snv_research} | \
bcftools filter --threads {threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools filter --threads {threads} --include 'INFO/SWEGENAF <= {params.swegen_freq[0]} || INFO/SWEGENAF == \".\"' --soft-filter '{params.swegen_freq[1]}' --mode '+' |\
bcftools view --threads {threads} -i 'FILTER == "PASS" || FILTER == "triallelic_site"' -o {output.vcf_pass_tnscope_umi}.temp1 -O z;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_pass_tnscope_umi}.temp1 \
--output_vcf {output.vcf_pass_tnscope_umi}.temp2 \
--variant_caller {params.variant_caller};

bgzip -@ {threads} -l 9 -c {output.vcf_pass_tnscope_umi}.temp2 > {output.vcf_pass_tnscope_umi}

tabix -p vcf -f {output.vcf_pass_tnscope_umi};

bcftools +counts {output.vcf_pass_tnscope_umi} > {output.bcftools_counts_research};

rm {output.vcf_pass_tnscope_umi}.temp1;

rm {output.vcf_pass_tnscope_umi}.temp2;
    """


rule bcftools_filter_vardict_clinical_tumor_normal:
  input:
    vcf_snv_clinical = vep_dir + "{var_type}.somatic.{case_name}.vardict.clinical.vcf.gz",
  output:
    vcf_pass_vardict = vep_dir + "{var_type}.somatic.{case_name}.vardict.clinical.filtered.pass.vcf.gz",
    bcftools_counts_clinical = vep_dir + "{var_type}.somatic.{case_name}.vardict.clinical.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir,'bcftools_filter_vardict_clinical_tumor_normal_' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image,config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "clinical"},
    pop_freq = [VARDICT.pop_freq.tag_value, VARDICT.pop_freq.filter_name],
    swegen_freq = [VARDICT.swegen_snv_freq.tag_value, VARDICT.swegen_snv_freq.filter_name],
    loqusdb_clinical_freq = [VARDICT.loqusdb_clinical_snv_freq.tag_value, VARDICT.loqusdb_clinical_snv_freq.filter_name],
    case_name = '{case_name}',
    edit_vcf_script = get_script_path("edit_vcf_info.py"),
    variant_caller = "vardict"
  threads:
    get_threads(cluster_config,'bcftools_filter_vardict_clinical_tumor_normal')
  message:
    "Filtering vardict tumor-normal annotated clinical variants using bcftools and "
    "adding FOUND_IN tags to the output VCF for {params.case_name} "
  shell:
    """
bcftools view {input.vcf_snv_clinical} | \
bcftools filter --threads {threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools filter --threads {threads} --include 'INFO/SWEGENAF <= {params.swegen_freq[0]} || INFO/SWEGENAF == \".\"' --soft-filter '{params.swegen_freq[1]}' --mode '+' |\
bcftools filter --threads {threads} --include 'INFO/Frq <= {params.loqusdb_clinical_freq[0]} || INFO/Frq == \".\"' --soft-filter '{params.loqusdb_clinical_freq[1]}' --mode '+' |\
bcftools view --threads {threads} -f PASS -o {output.vcf_pass_vardict}.temp1 -O z;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_pass_vardict}.temp1 \
--output_vcf {output.vcf_pass_vardict}.temp2 \
--variant_caller {params.variant_caller};

bgzip -@ {threads} -l 9 -c {output.vcf_pass_vardict}.temp2 > {output.vcf_pass_vardict}

tabix -p vcf -f {output.vcf_pass_vardict};

bcftools +counts {output.vcf_pass_vardict} > {output.bcftools_counts_clinical};

rm {output.vcf_pass_vardict}.temp1;

rm {output.vcf_pass_vardict}.temp2;
    """


rule bcftools_filter_TNscope_umi_clinical_tumor_normal:
  input:
    vcf_snv_clinical = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.clinical.vcf.gz",
  output:
    vcf_pass_tnscope_umi = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.clinical.filtered.pass.vcf.gz",
    bcftools_counts_clinical = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.clinical.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_TNscope_umi_clinical_tumor_normal' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq = [SENTIEON_CALLER.pop_freq_umi.tag_value, SENTIEON_CALLER.pop_freq_umi.filter_name],
    swegen_freq = [SENTIEON_CALLER.swegen_snv_freq.tag_value, SENTIEON_CALLER.swegen_snv_freq.filter_name],
    loqusdb_clinical_freq = [SENTIEON_CALLER.loqusdb_clinical_snv_freq.tag_value, SENTIEON_CALLER.loqusdb_clinical_snv_freq.filter_name],
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "clinical"},
    case_name = '{case_name}',
    edit_vcf_script = get_script_path("edit_vcf_info.py"),
    variant_caller = "tnscope_umi"
  threads:
    get_threads(cluster_config, 'bcftools_filter_TNscope_umi_clinical_tumor_normal')
  message:
    "Filtering TNscope_umi tumor-normal annotated clinical variants using bcftools and "
    "adding FOUND_IN tags to the output VCF file for {params.case_name} "
  shell:
    """
bcftools view --threads {threads} -f PASS,triallelic_site {input.vcf_snv_clinical} | \
bcftools filter --threads {threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools filter --threads {threads} --include 'INFO/SWEGENAF <= {params.swegen_freq[0]} || INFO/SWEGENAF == \".\"' --soft-filter '{params.swegen_freq[1]}' --mode '+' |\
bcftools filter --threads {threads} --include 'INFO/Frq <= {params.loqusdb_clinical_freq[0]} || INFO/Frq == \".\"' --soft-filter '{params.loqusdb_clinical_freq[1]}' --mode '+' |\
bcftools view --threads {threads} -i 'FILTER == "PASS" || FILTER == "triallelic_site"' -o {output.vcf_pass_tnscope_umi}.temp1 -O z;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_pass_tnscope_umi}.temp1 \
--output_vcf {output.vcf_pass_tnscope_umi}.temp2 \
--variant_caller {params.variant_caller};

bgzip -@ {threads} -l 9 -c {output.vcf_pass_tnscope_umi}.temp2 > {output.vcf_pass_tnscope_umi}

tabix -p vcf -f {output.vcf_pass_tnscope_umi};

bcftools +counts {output.vcf_pass_tnscope_umi} > {output.bcftools_counts_clinical};

rm {output.vcf_pass_tnscope_umi}.temp1;

rm {output.vcf_pass_tnscope_umi}.temp2;
    """
