# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# NGS filters for various scenarios


rule bcftools_filter_merged_research_tumor_normal:
  input:
    vcf_snv_research = vep_dir + "{var_type}.somatic.{case_name}.merged.research.vcf.gz",
  output:
    vcf_pass_merged = vep_dir + "{var_type}.somatic.{case_name}.merged.research.filtered.pass.vcf.gz",
    bcftools_counts_research = vep_dir + "{var_type}.somatic.{case_name}.merged.research.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_merged_research_tumor_normal_' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq = get_tag_and_filtername(snv_research_filters, "balsamic_high_pop_freq"),
    swegen_freq = get_tag_and_filtername(snv_research_filters, "SWEGENAF"),
    hard_filters = TgaSNVFilters.get_bcftools_filter_string(category="research", analysis_type=analysis_type, soft_filter_normals=soft_filter_normal),
    case_name = '{case_name}'
  message:
    "Filtering TGA tumor-normal merged annotated research variants using bcftools for {params.case_name}"
  shell:
    """
bcftools view --threads {resources.threads} {input.vcf_snv_research} |\
bcftools filter --threads {resources.threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' |\
bcftools filter --threads {resources.threads} --include 'INFO/SWEGENAF <= {params.swegen_freq[0]} || INFO/SWEGENAF == \".\"' --soft-filter '{params.swegen_freq[1]}' --mode '+' |\
bcftools view --threads {resources.threads} --exclude '{params.hard_filters}' -o {output.vcf_pass_merged} -O z;

tabix -p vcf -f {output.vcf_pass_merged};

bcftools +counts {output.vcf_pass_merged} > {output.bcftools_counts_research};
    """


rule bcftools_filter_merged_clinical_tumor_normal:
  input:
    vcf_snv_clinical = vep_dir + "{var_type}.somatic.{case_name}.merged.clinical.vcf.gz",
    namemap = vep_dir + "status_to_sample_id_namemap"
  output:
    vcf_pass_merged = vep_dir + "{var_type}.somatic.{case_name}.merged.clinical.filtered.pass.vcf.gz",
    bcftools_counts_clinical = vep_dir + "{var_type}.somatic.{case_name}.merged.clinical.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_merged_clinical_tumor_normal_' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    artefact_freq = get_tag_and_filtername(snv_clinical_filters, "ArtefactFrq"),
    somatic_snv_panel_freq = get_tag_and_filtername(snv_clinical_filters, "HighOccurrenceFrq"),
    pop_freq = get_tag_and_filtername(snv_research_filters, "balsamic_high_pop_freq"),
    swegen_freq = get_tag_and_filtername(snv_research_filters, "SWEGENAF"),
    loqusdb_clinical_freq = get_tag_and_filtername(snv_clinical_filters, "Frq"),
    hard_filters = TgaSNVFilters.get_bcftools_filter_string(category="clinical", analysis_type=analysis_type, soft_filter_normals=soft_filter_normal),
    whitelist_script = get_script_path("whitelist_snvs.py"),
    whitelist_snvs = config_model.analysis.whitelist_snvs,
    tmpdir= tempfile.mkdtemp(prefix=tmp_dir),
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "clinical"},
    case_name = '{case_name}',
  message:
    "Filtering TGA tumor-normal merged annotated clinical variants using bcftools for {params.case_name}"
  shell:
    """
bcftools reheader --threads {resources.threads} -s {input.namemap} {input.vcf_snv_clinical} | \
bcftools filter --threads {resources.threads} --include 'INFO/ArtefactFrq <= {params.artefact_freq[0]} || INFO/ArtefactFrq == \".\"' --soft-filter '{params.artefact_freq[1]}' --mode '+' |\
bcftools filter --threads {resources.threads} --include 'INFO/Cancer_Somatic_Panel_Frq <= {params.somatic_snv_panel_freq[0]} || INFO/Cancer_Somatic_Panel_Frq == \".\"' --soft-filter '{params.somatic_snv_panel_freq[1]}' --mode '+' |\
bcftools filter --threads {resources.threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools filter --threads {resources.threads} --include 'INFO/SWEGENAF <= {params.swegen_freq[0]} || INFO/SWEGENAF == \".\"' --soft-filter '{params.swegen_freq[1]}' --mode '+' |\
bcftools filter --threads {resources.threads} --include 'INFO/Frq <= {params.loqusdb_clinical_freq[0]} || INFO/Frq == \".\"' --soft-filter '{params.loqusdb_clinical_freq[1]}' --mode '+' |\
bcftools view --threads {resources.threads} --exclude '{params.hard_filters}' -O z -o {params.tmpdir}/clinical.filtered.pass_before_whitelisted.vcf.gz ;

if [[ ! -f "{params.whitelist_snvs}" ]]; then
  python {params.whitelist_script} {params.tmpdir}/clinical.filtered.pass_before_whitelisted.vcf.gz --whitelist-path {params.whitelist_snvs} {params.tmpdir}/clinical.filtered.pass_after_whitelisted.vcf ;
else:
  python {params.whitelist_script} {params.tmpdir}/clinical.filtered.pass_before_whitelisted.vcf.gz {params.tmpdir}/clinical.filtered.pass_after_whitelisted.vcf ;
fi

bgzip {params.tmpdir}/clinical.filtered.pass_after_whitelisted.vcf ;
mv {params.tmpdir}/clinical.filtered.pass_after_whitelisted.vcf.gz {output.vcf_pass_merged} ;

tabix -p vcf -f {output.vcf_pass_merged};

bcftools +counts {output.vcf_pass_merged} > {output.bcftools_counts_clinical};
    """
