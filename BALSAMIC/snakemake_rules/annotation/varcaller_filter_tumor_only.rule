# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# NGS filters for various scenarios



rule bcftools_filter_vardict_research_tumor_only:
  input:
    vcf_snv_research = vep_dir + "{var_type}.somatic.{case_name}.vardict.research.vcf.gz",
  output:
    vcf_filtered_research = vep_dir + "{var_type}.somatic.{case_name}.vardict.research.filtered.pass.vcf.gz",
    bcftools_counts_research = vep_dir + "{var_type}.somatic.{case_name}.vardict.research.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_vardict_research_tumor_only_' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
    pop_freq = [VARDICT.pop_freq.tag_value, VARDICT.pop_freq.filter_name],
    case_name =  '{case_name}',
    edit_vcf_script = get_script_path("edit_vcf_info.py"),
    variant_caller = "vardict"
  threads:
    get_threads(cluster_config, 'bcftools_filter_vardict_tumor_only')
  message:
    "Filtering vardict tumor-only annotated research variants using bcftools and  "
    "adding FOUND_IN tags to the output VCF for {params.case_name}"
  shell:
    """
bcftools view {input.vcf_snv_research} | \
bcftools filter --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools view -f PASS -o {output.vcf_filtered_research}.temp -O z;

tabix -p vcf -f {output.vcf_filtered_research}.temp;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_filtered_research}.temp \
--output_vcf {output.vcf_filtered_research} \
--variant_caller {params.variant_caller};

tabix -p vcf -f {output.vcf_filtered_research};

bcftools +counts {output.vcf_filtered_research} > {output.bcftools_counts_research};

rm {output.vcf_filtered_research}.temp;
    """


rule bcftools_filter_tnhaplotyper_tumor_only:
  input:
    vcf = vep_dir + "{var_type}.somatic.{case_name}.tnhaplotyper.research.vcf.gz",
  output:
    vcf_filtered = vep_dir + "{var_type}.somatic.{case_name}.tnhaplotyper.research.filtered.vcf.gz",
    vcf_pass_tnhaplotyper = vep_dir + "{var_type}.somatic.{case_name}.tnhaplotyper.research.filtered.pass.vcf.gz",
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_tnhaplotyper_tumor_only' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq = [COMMON_FILTERS.pop_freq.tag_value, COMMON_FILTERS.pop_freq.filter_name],
    case_name =  '{case_name}'
  threads:
    get_threads(cluster_config, 'bcftools_filter_tnhaplotyper_tumor_only')
  message:
    "Filtering tnhaplotyper tumor-only annotated variants using bcftools for {params.case_name}"
  shell:
    """
bcftools view {input.vcf} \
| bcftools filter --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' \
| bcftools view -o {output.vcf_filtered} -O z;

tabix -p vcf -f {output.vcf_filtered};

bcftools view -f PASS -o {output.vcf_pass_tnhaplotyper} -O z {output.vcf_filtered};

tabix -p vcf -f {output.vcf_pass_tnhaplotyper};

    """


rule bcftools_filter_TNscope_umi_research_tumor_only:
  input:
    vcf_snv_research = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.research.vcf.gz",
  output:
    vcf_filtered_research = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.research.filtered.pass.vcf.gz",
    bcftools_counts_research = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.research.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_TNscope_umi_research_tumor_only' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq = [SENTIEON_CALLER.pop_freq_umi.tag_value, SENTIEON_CALLER.pop_freq_umi.filter_name],
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
    case_name =  '{case_name}',
    edit_vcf_script = get_script_path("edit_vcf_info.py"),
    variant_caller = "tnscope_umi"
  threads:
    get_threads(cluster_config, 'bcftools_filter_tnscope_umi_tumor_only')
  message:
    "Filtering tnscope_umi tumor-only annotated research variants using bcftools and  "
    "adding FOUND_IN tags to the output VCF for {params.case_name}"
  shell:
    """
bcftools view {input.vcf_snv_research} | \
bcftools filter --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools view -f PASS,triallelic_site -o {output.vcf_filtered_research}.temp -O z;

tabix -p vcf -f {output.vcf_filtered_research}.temp;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_filtered_research}.temp \
--output_vcf {output.vcf_filtered_research} \
--variant_caller {params.variant_caller};

tabix -p vcf -f {output.vcf_filtered_research};

bcftools +counts {output.vcf_filtered_research} > {output.bcftools_counts_research};
    
rm {output.vcf_filtered_research}.temp;
    """


rule bcftools_filter_vardict_clinical_tumor_only:
  input:
    vcf_snv_clinical = vep_dir + "{var_type}.somatic.{case_name}.vardict.clinical.vcf.gz",
  output:
    vcf_filtered_clinical = vep_dir + "{var_type}.somatic.{case_name}.vardict.clinical.filtered.pass.vcf.gz",
    bcftools_counts_clinical = vep_dir + "{var_type}.somatic.{case_name}.vardict.clinical.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_vardict_clinical_tumor_only_' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "clinical"},
    pop_freq = [VARDICT.pop_freq.tag_value, VARDICT.pop_freq.filter_name],
    case_name =  '{case_name}',
    edit_vcf_script = get_script_path("edit_vcf_info.py"),
    variant_caller = "vardict"
  threads:
    get_threads(cluster_config, 'bcftools_filter_vardict_tumor_only')
  message:
    "Filtering vardict tumor-only annotated clinical variants using bcftools and  "
    "adding FOUND_IN tags to the output VCF for {params.case_name}"
  shell:
    """
bcftools view {input.vcf_snv_clinical} | \
bcftools filter --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools view -f PASS -o {output.vcf_filtered_clinical}.temp -O z;

tabix -p vcf -f {output.vcf_filtered_clinical}.temp;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_filtered_clinical}.temp \
--output_vcf {output.vcf_filtered_clinical} \
--variant_caller {params.variant_caller};

tabix -p vcf -f {output.vcf_filtered_clinical};

bcftools +counts {output.vcf_filtered_clinical} > {output.bcftools_counts_clinical};

rm {output.vcf_filtered_clinical}.temp;
    """


rule bcftools_filter_TNscope_umi_clinical_tumor_only:
  input:
    vcf_snv_clinical = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.clinical.vcf.gz",
  output:
    vcf_filtered_clinical = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.clinical.filtered.pass.vcf.gz",
    bcftools_counts_clinical = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.clinical.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir,'bcftools_filter_TNscope_umi_clinical_tumor_only' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image,config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq=[SENTIEON_CALLER.pop_freq_umi.tag_value, SENTIEON_CALLER.pop_freq_umi.filter_name],
    housekeeper_id={"id": config["analysis"]["case_id"], "tags": "clinical"},
    case_name='{case_name}',
    edit_vcf_script=get_script_path("edit_vcf_info.py"),
    variant_caller="tnscope_umi"
  threads:
    get_threads(cluster_config,'bcftools_filter_tnscope_umi_tumor_only')
  message:
    "Filtering tnscope_umi tumor-only annotated clinical variants using bcftools and  "
    "adding FOUND_IN tags to the output VCF for {params.case_name}"
  shell:
    """
bcftools view {input.vcf_snv_clinical} | \
bcftools filter --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools view -f PASS,triallelic_site -o {output.vcf_filtered_clinical}.temp -O z;

tabix -p vcf -f {output.vcf_filtered_clinical}.temp;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_filtered_clinical}.temp \
--output_vcf {output.vcf_filtered_clinical} \
--variant_caller {params.variant_caller};

tabix -p vcf -f {output.vcf_filtered_clinical};

bcftools +counts {output.vcf_filtered_clinical} > {output.bcftools_counts_clinical};

rm {output.vcf_filtered_clinical}.temp;
    """
