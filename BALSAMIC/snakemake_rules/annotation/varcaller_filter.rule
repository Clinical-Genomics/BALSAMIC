# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# NGS filters for various scenarios

from BALSAMIC.utils.rule import get_conda_env
from BALSAMIC.utils.rule import get_threads
from BALSAMIC.assets.models import VARDICT 

rule ngs_filter_vardict:
  input:
    vcf = vep_dir + "{var_type}.somatic.{case_name}.vardict.vcf.gz",
  output:
    vcf_filtered = vep_dir + "{var_type}.somatic.{case_name}.vardict.filtered.vcf.gz",
    vcf_pass = vep_dir + "{var_type}.somatic.{case_name}.vardict.filtered.pass.vcf.gz",
  params:
    conda = get_conda_env(config["conda_env_yaml"],"ensembl-vep"),
    MQ = [VARDICT.MQ.value, VARDICT.MQ.name],
    AD = [VARDICT.AD.value, VARDICT.AD.name],
    DP = [VARDICT.DP.value, VARDICT.DP.name],
    AF_min = [VARDICT.AF_min.value, VARDICT.AF_min.name],
    AF_max = [VARDICT.AF_max.value, VARDICT.AF_max.name],
  threads: get_threads(cluster_config, 'vep')
  singularity: singularity_image 
  benchmark:
    benchmark_dir + 'ngs_filter_' + "{var_type}.somatic.{case_name}.vardict.vep.tsv"
  shell:
    "source activate {params.conda}; "
    "bcftools view {input.vcf} "
    " | bcftools filter --include 'INFO/MQ >= {params.MQ[0]}' --soft-filter '{params.MQ[1]}' --mode '+' "
    " | bcftools filter --include 'INFO/DP >= {params.DP[0]}' --soft-filter '{params.DP[1]}' --mode '+' "
    " | bcftools filter --include 'INFO/AD >= {params.AD[0]}' --soft-filter '{params.AD[1]}' --mode '+' "
    " | bcftools filter --include 'INFO/AF >= {params.AF_min[0]}' --soft-filter '{params.AF_min[1]}' --mode '+' "
    " | bcftools filter --include 'INFO/AF <  {params.AF_max[0]}' --soft-filter '{params.AF_max[1]}' --mode '+' "
    " | bcftools view -o {output.vcf_filtered} -O -z; "
    "tabix -p vcf -f {output.vcf_filtered}; "
    "bcftools view -f PASS -o {output.vcf_pass} -O z {output.vcf_filtered}; "
    "tabix -p vcf -f {output.vcf_pass}; " 
