# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# NGS filters for various scenarios

rule ngs_filter_sentieon:
  input:
    vcf = vep_dir + "{var_type}.somatic.{case_name}.{var_caller}.all.vcf.gz",
  output:
    vcf_filtered = vep_dir + "{var_type}.somatic.{case_name}.{var_caller}.all.filtered.vcf.gz",
    vcf_pass = vep_dir + "{var_type}.somatic.{case_name}.{var_caller}.all.filtered.pass.vcf.gz",
  params:
    conda = config["bioinfo_tools"].get("bcftools"),
    DP = [SENTIEON_CALLER.DP.tag_value, SENTIEON_CALLER.DP.filter_name],
    AD = [SENTIEON_CALLER.AD.tag_value, SENTIEON_CALLER.AD.filter_name],
    AF_min = [SENTIEON_CALLER.AF_min.tag_value, SENTIEON_CALLER.AF_min.filter_name],
    AF_max = [SENTIEON_CALLER.AF_max.tag_value, SENTIEON_CALLER.AF_max.filter_name],
    pop_freq = [SENTIEON_CALLER.pop_freq.tag_value, SENTIEON_CALLER.pop_freq.filter_name],
  threads: get_threads(cluster_config, 'ngs_filter_sentieon')
  singularity: Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  benchmark:
    benchmark_dir + 'ngs_filter_' + "{var_type}.somatic.{case_name}.{var_caller}.vep.tsv"
  shell:
    """
source activate {params.conda};
bcftools view {input.vcf} \
| bcftools filter --include 'SUM(FORMAT/AD[0:0]+FORMAT/AD[0:1]) >= {params.DP[0]}' --soft-filter '{params.DP[1]}' --mode '+' \
| bcftools filter --include 'FORMAT/AD[0:1] >= {params.AD[0]}' --soft-filter '{params.AD[1]}' --mode '+' \
| bcftools filter --include 'FORMAT/AF >= {params.AF_min[0]}' --soft-filter '{params.AF_min[1]}' --mode '+' \
| bcftools filter --include 'FORMAT/AF <  {params.AF_max[0]}' --soft-filter '{params.AF_max[1]}' --mode '+' \
| bcftools filter --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' \
| bcftools view -o {output.vcf_filtered} -O z;
tabix -p vcf -f {output.vcf_filtered};
bcftools view -f PASS -o {output.vcf_pass} -O z {output.vcf_filtered};
tabix -p vcf -f {output.vcf_pass};
    """
