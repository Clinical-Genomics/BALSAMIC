# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# Somatic SNV annotation module.

rule snv_gnomad_annotation_and_filtration:
  input:
    vcf_snv_research = vcf_dir + "SNV.somatic.{case_name}.{var_caller}.research.vcf.gz",
  output:
    research_gnomadfiltered = vcf_dir + "SNV.somatic.{case_name}.{var_caller}.research_gnomadfiltered.vcf.gz",
    vcfanno_gnomad_annotation_toml = vcf_dir + "SNV.somatic.{case_name}.{var_caller}.vcfanno_gnomadsnv.toml"
  benchmark:
    Path(benchmark_dir, "snv_gnomad_annotation_and_filtration.{case_name}.{var_caller}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("ensembl-vep") + ".sif").as_posix()
  params:
    pop_freq = get_tag_and_filtername(snv_post_quality_filters, "gnomad_hard_threshold"),
    gnomad_annotation = dump_toml(gnomad_annotation),
    tmpdir = tempfile.mkdtemp(prefix=tmp_dir)
  message:
    "Annotating and filtering based on gnomad frequencies on SNVs and INDELs"
  shell:
        """
echo \'{params.gnomad_annotation}\' > {output.vcfanno_gnomad_annotation_toml};

vcfanno -p {resources.threads} {output.vcfanno_gnomad_annotation_toml} {input.vcf_snv_research} \
| bcftools view --threads {resources.threads} -O z -o {params.tmpdir}/SNV.somatic.research.gnomad_annotated.vcf.gz ;

bcftools filter --threads {resources.threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' -O -z -o {output.research_gnomadfiltered} {params.tmpdir}/SNV.somatic.research.gnomad_annotated.vcf.gz

tabix -p vcf -f {output.research_gnomadfiltered};
        """

rule bcftools_get_somaticINDEL_research:
  input:
    vcf_research = vcf_dir + "SNV.somatic.{case_name}.{var_caller}.research_gnomadfiltered.vcf.gz",
  output:
    vcf_indel_research = vcf_dir + "SNV.somatic.{case_name}.{var_caller}.indel.research.vcf.gz",
  benchmark:
    Path(benchmark_dir, "bcftools_get_somaticINDEL_research.{case_name}.{var_caller}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    message_text = "SNV.somatic.{case_name}.{var_caller}.research.vcf.gz",
  message:
    "Running bcftools to get INDELs from {params.message_text}"
  shell:
        """
bcftools view --threads {resources.threads} --output-type v --output-file {output.vcf_indel_research} --types indels {input.vcf_research};
tabix -p vcf -f  {output.vcf_indel_research} 
        """

rule cadd_annotate_somaticINDEL_research:
  input:
    vcf_indel_research = vcf_dir + "SNV.somatic.{case_name}.{var_caller}.indel.research.vcf.gz",
  output:
    cadd_indel_research = vep_dir + "SNV.somatic.{case_name}.{var_caller}.cadd_indel.research.tsv.gz",
  benchmark:
    Path(benchmark_dir, "cadd_annotate_somaticINDEL_research.{case_name}.{var_caller}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("cadd") + ".sif").as_posix()
  params:
    message_text = "SNV.somatic.{case_name}.{var_caller}.research.vcf.gz",
  message:
    "Running cadd annotation for INDELs on {params.message_text}"
  shell:
        """
CADD.sh -g GRCh37 -o {output.cadd_indel_research} {input.vcf_indel_research}

        """


rule bcftools_annotate_somaticINDEL_research:
  input:
    vcf_research = vcf_dir + "SNV.somatic.{case_name}.{var_caller}.research_gnomadfiltered.vcf.gz",
    cadd_indel_research = vep_dir + "SNV.somatic.{case_name}.{var_caller}.cadd_indel.research.tsv.gz",
  output:
    vcf_indel_research = vep_dir + "SNV.somatic.{case_name}.{var_caller}.cadd_indel.research.vcf.gz",
  benchmark:
    Path(benchmark_dir, "bcftools_annotate_somaticINDEL_research.{case_name}.{var_caller}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    header_line = temp(f"{vep_dir}cadd_header_line.txt"),
    message_text = "SNV.somatic.{case_name}.{var_caller}.research.vcf.gz",
  message:
    "Running bcftools to annotate INDELs on {params.message_text}"
  shell:
        """
echo '##INFO=<ID=CADD,Number=1,Type=Float,Description=\"The Combined Annotation Dependent Depletion score\">' >\
 {params.header_line}

tabix -s 1 -b 2 -e 2 -c "##" -f {input.cadd_indel_research}        

bcftools annotate --threads {resources.threads} --output-type v \
--header-lines {params.header_line} \
--columns Chrom,Pos,Ref,Alt,-,CADD \
--annotations {input.cadd_indel_research} \
--output  {output.vcf_indel_research}  \
{input.vcf_research}

tabix -p vcf -f  {output.vcf_indel_research} 
        """


rule vep_annotate_somaticSNV_research:
  input:
    vcf_snv_research = vep_dir + "SNV.somatic.{case_name}.{var_caller}.cadd_indel.research.vcf.gz",
    cosmic = config["reference"]["cosmic"]
  output:
    vcf_snv_unfiltered = vep_dir + "SNV.somatic.{case_name}.{var_caller}.research.vcf.gz",
    vcfanno_research_toml = vep_dir + "SNV.somatic.{case_name}.{var_caller}_vcfanno_research.toml"
  benchmark:
    Path(benchmark_dir, "vep_annotate_somaticSNV_research.{case_name}.{var_caller}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("ensembl-vep") + ".sif").as_posix()
  params:
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
    message_text = "SNV.somatic.{case_name}.{var_caller}.research.vcf.gz",
    tmp_vcf_research = temp(vep_dir + "SNV.somatic.{case_name}.{var_caller}.tmp.research.vcf.gz"),
    vcfanno_research_annotations = dump_toml(research_annotations),
    vep_cache = config["reference"]["vep_dir"],
    vep_defaults = params.vep.vep_filters
  message:
    "Running vep annotation on SNVs and INDELs in {params.message_text}"
  shell:
        """
vep_path=$(dirname $(readlink -f $(which vep)));
export PERL5LIB=;

echo \'{params.vcfanno_research_annotations}\' > {output.vcfanno_research_toml};

vcfanno -p {resources.threads} {output.vcfanno_research_toml} {input.vcf_snv_research} \
| bcftools view --threads {resources.threads} -O z -o {params.tmp_vcf_research} ;

vep \
--dir $vep_path \
--dir_cache {params.vep_cache} \
--dir_plugins $vep_path \
--input_file {params.tmp_vcf_research} \
--output_file {output.vcf_snv_unfiltered} \
--fork {resources.threads} \
{params.vep_defaults} \
--custom {input.cosmic},COSMIC,vcf,exact,0,CDS,GENE,STRAND,CNT,AA ;

tabix -p vcf -f {output.vcf_snv_unfiltered};

rm {params.tmp_vcf_research};
        """

rule vcfanno_annotate_somaticSNV_clinical:
  input:
    vcf_snv_research = vep_dir + "SNV.somatic.{case_name}.{var_caller}.research.vcf.gz",
  output:
    vcf_snv_clinical = vep_dir + "SNV.somatic.{case_name}.{var_caller}.clinical.vcf.gz",
  benchmark:
    Path(benchmark_dir, "vcfanno_annotate_somaticSNV_clinical.{case_name}.{var_caller}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("ensembl-vep") + ".sif").as_posix()
  params:
    message_text = "SNV.somatic.{case_name}.{var_caller}.clinical.vcf.gz",
    vcfanno_clinical_annotations = dump_toml(clinical_annotations),
    vcfanno_clinical_toml = temp(vep_dir + "SNV.somatic.{case_name}.{var_caller}_vcfanno_clinical.toml"),
  message:
    "Running vcfanno annotation for single nuceotide variants on {params.message_text}"
  shell:
        """
if [[ ! -z "{params.vcfanno_clinical_annotations}" ]]; then
    echo \'{params.vcfanno_clinical_annotations}\' > {params.vcfanno_clinical_toml} ;
    vcfanno -p {resources.threads} {params.vcfanno_clinical_toml} {input.vcf_snv_research} | \
    bcftools view --threads {resources.threads} -O z -o {output.vcf_snv_clinical};
else
    cp {input.vcf_snv_research} {output.vcf_snv_clinical};
fi

tabix -p vcf -f {output.vcf_snv_clinical};
        """


