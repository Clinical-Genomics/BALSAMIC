# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# NGS filters for various scenarios


rule bcftools_filter_TNscope_umi_research_tumor_only:
  input:
    vcf_snv_research = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.research.vcf.gz",
  output:
    vcf_pass_tnscope_umi = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.research.filtered.pass.vcf.gz",
    bcftools_counts_research = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.research.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_TNscope_umi_research_tumor_only' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq = [SNV_FILTER_SETTINGS.pop_freq_umi.tag_value, SNV_FILTER_SETTINGS.pop_freq_umi.filter_name],
    swegen_freq = [SNV_FILTER_SETTINGS.swegen_snv_freq.tag_value, SNV_FILTER_SETTINGS.swegen_snv_freq.filter_name],
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
    case_name =  '{case_name}',
    edit_vcf_script = get_script_path("edit_vcf_info.py"),
    variant_caller = "tnscope_umi"
  threads:
    get_threads(cluster_config, 'bcftools_filter_tnscope_umi_research_tumor_only')
  message:
    "Filtering tnscope_umi tumor-only annotated research variants using bcftools and  "
    "adding FOUND_IN tags to the output VCF for {params.case_name}"
  shell:
    """
bcftools view  --threads {threads} -f PASS,triallelic_site {input.vcf_snv_research} | \
bcftools filter --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools filter --threads {threads} --include 'INFO/SWEGENAF <= {params.swegen_freq[0]} || INFO/SWEGENAF == \".\"' --soft-filter '{params.swegen_freq[1]}' --mode '+' |\
bcftools view --threads {threads} -i 'FILTER == "PASS" || FILTER == "triallelic_site"' -o {output.vcf_pass_tnscope_umi}.temp1 -O z;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_pass_tnscope_umi}.temp1 \
--output_vcf {output.vcf_pass_tnscope_umi}.temp2 \
--variant_caller {params.variant_caller};

bgzip -@ {threads} -l 9 -c {output.vcf_pass_tnscope_umi}.temp2 > {output.vcf_pass_tnscope_umi}

tabix -p vcf -f {output.vcf_pass_tnscope_umi};

bcftools +counts {output.vcf_pass_tnscope_umi} > {output.bcftools_counts_research};
    
rm {output.vcf_pass_tnscope_umi}.temp1;

rm {output.vcf_pass_tnscope_umi}.temp2;
    """


rule bcftools_filter_TNscope_umi_clinical_tumor_only:
  input:
    vcf_snv_clinical = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.clinical.vcf.gz",
    namemap = vep_dir + "status_to_sample_id_namemap"
  output:
    vcf_pass_tnscope_umi = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.clinical.filtered.pass.vcf.gz",
    bcftools_counts_clinical = vep_dir + "{var_type}.somatic.{case_name}.tnscope_umi.clinical.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir,'bcftools_filter_TNscope_umi_clinical_tumor_only' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image,config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq=[SNV_FILTER_SETTINGS.pop_freq_umi.tag_value, SNV_FILTER_SETTINGS.pop_freq_umi.filter_name],
    swegen_freq = [SNV_FILTER_SETTINGS.swegen_snv_freq.tag_value, SNV_FILTER_SETTINGS.swegen_snv_freq.filter_name],
    loqusdb_clinical_freq = [SNV_FILTER_SETTINGS.loqusdb_clinical_snv_freq.tag_value, SNV_FILTER_SETTINGS.loqusdb_clinical_snv_freq.filter_name],
    housekeeper_id={"id": config["analysis"]["case_id"], "tags": "clinical"},
    case_name='{case_name}',
    edit_vcf_script=get_script_path("edit_vcf_info.py"),
    variant_caller="tnscope_umi"
  threads:
    get_threads(cluster_config,'bcftools_filter_tnscope_umi_tumor_only')
  message:
    "Filtering tnscope_umi tumor-only annotated clinical variants using bcftools and  "
    "adding FOUND_IN tags to the output VCF for {params.case_name}"
  shell:
    """
bcftools reheader --threads {threads} -s {input.namemap} {input.vcf_snv_clinical} |\
bcftools view --threads {threads} -f PASS,triallelic_site | \
bcftools filter --threads {threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' | \
bcftools filter --threads {threads} --include 'INFO/SWEGENAF <= {params.swegen_freq[0]} || INFO/SWEGENAF == \".\"' --soft-filter '{params.swegen_freq[1]}' --mode '+' |\
bcftools filter --threads {threads} --include 'INFO/Frq <= {params.loqusdb_clinical_freq[0]} || INFO/Frq == \".\"' --soft-filter '{params.loqusdb_clinical_freq[1]}' --mode '+' |\
bcftools view --threads {threads} -i 'FILTER == "PASS" || FILTER == "triallelic_site"' -O z -o {output.vcf_pass_tnscope_umi}.temp1;

python {params.edit_vcf_script} \
--input_vcf {output.vcf_pass_tnscope_umi}.temp1 \
--output_vcf {output.vcf_pass_tnscope_umi}.temp2 \
--variant_caller {params.variant_caller};

bgzip -@ {threads} -l 9 -c {output.vcf_pass_tnscope_umi}.temp2 > {output.vcf_pass_tnscope_umi}

tabix -p vcf -f {output.vcf_pass_tnscope_umi};

bcftools +counts {output.vcf_pass_tnscope_umi} > {output.bcftools_counts_clinical};

rm {output.vcf_pass_tnscope_umi}.temp1;

rm {output.vcf_pass_tnscope_umi}.temp2;
    """
