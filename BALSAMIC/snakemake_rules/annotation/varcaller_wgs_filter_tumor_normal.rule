# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# NGS filters for various scenarios



rule bcftools_filter_tnscope_tumor_normal:
  input:
    vcf = vep_dir + "{var_type}.somatic.{case_name}.tnscope.all.vcf.gz",
  output:
    vcf_filtered = vep_dir + "{var_type}.somatic.{case_name}.tnscope.all.filtered.vcf.gz",
    vcf_pass_tnscope = vep_dir + "{var_type}.somatic.{case_name}.tnscope.all.filtered.pass.vcf.gz",
    bcftools_counts = vep_dir + "{var_type}.somatic.{case_name}.tnscope.all.filtered.pass.stats"
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_tnscope_tumor_normal_' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    AD = [SENTIEON_CALLER.AD.tag_value, SENTIEON_CALLER.AD.filter_name],
    DP = [SENTIEON_CALLER.DP.tag_value, SENTIEON_CALLER.DP.filter_name],
    AF_min = [SENTIEON_CALLER.AF_min.tag_value, SENTIEON_CALLER.AF_min.filter_name],
    AF_max = [SENTIEON_CALLER.AF_max.tag_value, SENTIEON_CALLER.AF_max.filter_name],
    pop_freq = [SENTIEON_CALLER.pop_freq.tag_value, SENTIEON_CALLER.pop_freq.filter_name],
    housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "clinical"},
    case_name = '{case_name}'
  threads:
    get_threads(cluster_config, 'bcftools_filter_tnscope_tumor_normal')
  message:
    "Filtering wgs tumor-normal tnscope annotated variants using bcftools on {params.case_name}"
  shell:
    """
bcftools view {input.vcf} \
| bcftools filter --threads {threads} --include 'SUM(FORMAT/AD[0:0]+FORMAT/AD[0:1]) >= {params.DP[0]} || SUM(FORMAT/AD[1:0]+FORMAT/AD[1:1]) >= {params.DP[0]}' --soft-filter '{params.DP[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'FORMAT/AD[0:1] >= {params.AD[0]}' --soft-filter '{params.AD[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'FORMAT/AF[0] >= {params.AF_min[0]}' --soft-filter '{params.AF_min[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'FORMAT/AF[0] <  {params.AF_max[0]}' --soft-filter '{params.AF_max[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' \
| bcftools view -o {output.vcf_filtered} -O z;

tabix -p vcf -f {output.vcf_filtered};

bcftools view -f PASS -o {output.vcf_pass_tnscope} -O z {output.vcf_filtered};

tabix -p vcf -f {output.vcf_pass_tnscope};

bcftools +counts {output.vcf_pass_tnscope} > {output.bcftools_counts};
    """


rule bcftools_filter_tnhaplotyper_tumor_normal:
  input:
    vcf = vep_dir + "{var_type}.somatic.{case_name}.tnhaplotyper.all.vcf.gz",
    wgs_calling_file = config["reference"]["wgs_calling_interval"]
  output:
    vcf_filtered = vep_dir + "{var_type}.somatic.{case_name}.tnhaplotyper.all.filtered.vcf.gz",
    vcf_pass_tnhaplotyper = vep_dir + "{var_type}.somatic.{case_name}.tnhaplotyper.all.filtered.pass.vcf.gz",
  benchmark:
    Path(benchmark_dir, 'bcftools_filter_tnhaplotyper_tumor_normal_' + "{var_type}.somatic.{case_name}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
  params:
    pop_freq = [SENTIEON_CALLER.pop_freq.tag_value, SENTIEON_CALLER.pop_freq.filter_name],
    case_name = '{case_name}'
  threads: 
    get_threads(cluster_config, 'bcftools_filter_tnhaplotyper_tumor_normal')
  message:
    "Filtering wgs tumor-normal tnhaplotyper annotated variants using bcftools on {params.case_name}"
  shell:
    """
grep -v '^@' {input.wgs_calling_file} > {input.wgs_calling_file}.bed

bcftools view -f PASS --threads {threads} --regions-file {input.wgs_calling_file}.bed {input.vcf} \
| bcftools filter --threads {threads} --include 'INFO/GNOMADAF_popmax <= {params.pop_freq[0]} || INFO/GNOMADAF_popmax == \".\"' --soft-filter '{params.pop_freq[1]}' --mode '+' \
| bcftools view -o {output.vcf_filtered} -O z;

tabix -p vcf -f {output.vcf_filtered};

bcftools view -f PASS --threads {threads} -O z -o {output.vcf_pass_tnhaplotyper} {output.vcf_filtered}

tabix -p vcf -f {output.vcf_pass_tnhaplotyper}

    """
