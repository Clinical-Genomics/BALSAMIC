# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# VEP annotation module. Annotate all VCFs generated through VEP
# This produces both vcf.gz and tab delimited output.
# NOTE: Tab delimited output contains only PASSed variants

from BALSAMIC.utils.rule import get_conda_env
from BALSAMIC.utils.rule import get_threads

rule vep:
  input:
    vcf = vcf_dir + "{type}.{mutation}.{sample}.{caller}.vcf.gz",
    cosmic = config["reference"]["cosmic"]
  output:
    tab = vep_dir + "{type}.{mutation}.{sample}.{caller}.tsv",
    vcf = vep_dir + "{type}.{mutation}.{sample}.{caller}.vcf.gz"
  params:
    conda = get_conda_env(config["conda_env_yaml"],"ensembl-vep"),
    vep_cache = config["reference"]["vep"]
  threads: get_threads(cluster_config, 'vep')
  singularity: singularity_image 
  benchmark:
    benchmark_dir + 'vep_' + "{type}.{mutation}.{sample}.{caller}.vep.tsv"
  shell:
    "source activate {params.conda}; "
    "vep_path=$(dirname $(readlink -e $(which vep))); "
    "vep "
        "--dir $vep_path "
        "--dir_cache {params.vep_cache} "
        "--dir_plugins $vep_path "
        "--input_file {input.vcf} "
        "--fork {threads} "
        "--vcf "
        "--everything "
        "--format vcf "
        "--offline "
        "--variant_class "
        "--merged "
        "--cache "
        "--custom {input.cosmic},COSMIC,vcf,exact,0,CDS,GENE,STRAND,CNT,AA "
        "--verbose "
        "--force_overwrite | bgzip > {output.vcf} && tabix -f -p vcf {output.vcf};"
    "bcftools view -f .,PASS {input.vcf} | vep "
        "--dir $vep_path "
        "--dir_cache {params.vep_cache} "
        "--dir_plugins $vep_path "
        "--output_file {output.tab} "
        "--fork {threads} "
        "--tab "
        "--everything "
        "--format vcf "
        "--offline "
        "--variant_class "
        "--merged "
        "--cache "
        "--custom {input.cosmic},COSMIC,vcf,exact,0,CDS,GENE,STRAND,CNT,AA "
        "--verbose "
        "--force_overwrite; "
    "source deactivate; "
