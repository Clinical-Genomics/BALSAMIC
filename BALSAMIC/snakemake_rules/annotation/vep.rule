# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# VEP annotation module. Annotate all VCFs generated through VEP

rule vep_somatic:
  input:
    vcf = vcf_dir + "{var_type}.somatic.{case_name}.{var_caller}.vcf.gz",
    header = vcf_dir + "{var_type}.somatic.{case_name}.{var_caller}.sample_name_map",
    cosmic = config["reference"]["cosmic"]
  output:
    vcf_all = vep_dir + "{var_type}.somatic.{case_name}.{var_caller}.all.vcf.gz",
    vcf_summary = vep_dir + "{var_type}.somatic.{case_name}.{var_caller}.all.vcf.gz_summary.html",
    bcftools_stats = vep_dir + "{var_type}.somatic.{case_name}.{var_caller}.all.stats"
  benchmark:
    Path(benchmark_dir, "vep_somatic_{var_type}.somatic.{case_name}.{var_caller}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("ensembl-vep") + ".sif").as_posix()
  params:
    housekeeper_id = {"id": "{case_name}", "tags": "annotated-somatic"},
    ref_path = Path(config["reference"]["gnomad_variant"]).parent.as_posix(),
    message_text = "{var_type}.somatic.{case_name}.{var_caller}.vcf.gz", 
    tmpvcf = vep_dir + "{var_type}.somatic.{case_name}.{var_caller}.tmp.vcf.gz",
    vcfanno_toml = VCFANNO_TOML,
    vep_cache = config["reference"]["vep"],
    vep_defaults = params.vep.vep_filters
  threads:
    get_threads(cluster_config, "vep")
  message:
    "Running vep annotation on {params.message_text}" 
  shell:
    """
vep_path=$(dirname $(readlink -f $(which vep)));
tmpvcf={params.tmpvcf};
export PERL5LIB=;

vcfanno --base-path {params.ref_path} {params.vcfanno_toml} {input.vcf} \
| bcftools reheader --threads {threads} -s {input.header} \
| bcftools view -O z -o $tmpvcf ;

vep \
--dir $vep_path \
--dir_cache {params.vep_cache} \
--dir_plugins $vep_path \
--input_file $tmpvcf \
--output_file {output.vcf_all} \
--fork {threads} \
{params.vep_defaults} \
--custom {input.cosmic},COSMIC,vcf,exact,0,CDS,GENE,STRAND,CNT,AA ;

tabix -p vcf -f {output.vcf_all};

bcftools stats {output.vcf_all} > {output.bcftools_stats};

rm $tmpvcf;
    """
rule tmb_calculation:
  input:
    vep = vep_dir + "{var_type}.somatic.{case_name}.{var_caller}.all.vcf.gz",
  output:
    tmb = vep_dir + "{var_type}.somatic.{case_name}.{var_caller}.balsamic_stat"
  benchmark:
    Path(benchmark_dir, "vep_stat_{var_type}.somatic.{case_name}.{var_caller}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("ensembl-vep") + ".sif").as_posix() 
  params:
    af_cutoff = "0.05",
    bed = config["panel"]["capture_kit"] if "panel" in config else "",
    filter_vep_string = "'not COSMIC and not Existing_variation and synonymous_variant'", 
    housekeeper_id = {"id": "{case_name}", "tags": "stat-somatic"},
    message_text = "{var_type}.somatic.{case_name}.{var_caller}.all"
  threads:
    get_threads(cluster_config, "vep")
  message:
    "Calculating TMB for {params.message_text}" 
  shell:
    """
if [ \"{params.bed}\" == \"\" ]; then region_size=3101.78817; else region_size=$(awk '{{s+=$3-$2}}END{{print s/1e6}}' {params.bed}); fi;

bcftools view --types snps,indels --apply-filters PASS {input.vep} \
| bcftools filter -i "INFO/AF>={params.af_cutoff}" \
| filter_vep --filter 'not Existing_variation' \
| filter_vep --filter 'not COSMIC' \
| filter_vep --filter 'not non_coding_transcript_exon_variant' \
| filter_vep --filter 'not non_coding_transcript_variant' \
| filter_vep --filter 'not feature_truncation' -C \
| awk -v region=${{region_size}} '{{print $NF/region}}' > {output.tmb};
    """

rule vep_germline:
  input:
    vcf = vcf_dir + "{var_type}.germline.{sample}.{var_caller}.vcf.gz",
    cosmic = config["reference"]["cosmic"]
  output:
    vcf_all = vep_dir + "{var_type}.germline.{sample}.{var_caller}.vcf.gz",
    vcf_summary = vep_dir + "{var_type}.germline.{sample}.{var_caller}.vcf.gz_summary.html",
    bcftools_stats = vep_dir + "{var_type}.germline.{sample}.{var_caller}.all.stats"
  benchmark:
    Path(benchmark_dir, "vep_germline_{var_type}.germline.{sample}.{var_caller}.tsv").as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("ensembl-vep") + ".sif").as_posix() 
  params:
    housekeeper_id = {"id": "{sample}", "tags": "annotated-germline"},
    sample = '{sample}',
    vep_cache = config["reference"]["vep"],
    vep_defaults = params.vep.vep_filters
  threads:
    get_threads(cluster_config, 'vep')
  message:
    "Running vep annotation on {params.sample}"
  shell:
      """
vep_path=$(dirname $(readlink -f $(which vep)));
export PERL5LIB=;

vep \
--dir $vep_path \
--dir_cache {params.vep_cache} \
--dir_plugins $vep_path \
--input_file {input.vcf} \
--output_file {output.vcf_all} \
--fork {threads} \
{params.vep_defaults} \
--custom {input.cosmic},COSMIC,vcf,exact,0,CDS,GENE,STRAND,CNT,AA;

tabix -p vcf -f {output.vcf_all};

bcftools stats {output.vcf_all} > {output.bcftools_stats};
    """
