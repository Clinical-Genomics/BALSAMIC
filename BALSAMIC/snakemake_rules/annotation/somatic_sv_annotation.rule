# vim: syntax=python tabstop=4 expandtab
# coding: utf-8
# Somatic SV annotation module.


rule vep_somatic_research_sv:
    input:
        vcf_research = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.research.vcf.gz",
        header = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.sample_name_map",
    output:
        vcf_research_vep = vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.research.vep.vcf.gz",
    benchmark:
        Path(benchmark_dir, "vep_somatic_research_sv." + config["analysis"]["case_id"] + ".svdb.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("ensembl-vep") + ".sif").as_posix()
    params:
        message_text = "SV.somatic." + config["analysis"]["case_id"] + ".svdb.research.vcf.gz",
        vep_cache = config["reference"]["vep_dir"],
        vep_defaults = params.vep.vep_filters
    message:
        "Running vep annotation for structural and copy number variants on {params.message_text}"
    shell:
        """
vep_path=$(dirname $(readlink -f $(which vep)));
export PERL5LIB=;
bcftools reheader --threads {resources.threads} -s {input.header} {input.vcf_research} | \
bcftools view --threads {resources.threads} -O v | \
vep \
--dir $vep_path \
--dir_cache {params.vep_cache} \
--dir_plugins $vep_path \
--output_file {output.vcf_research_vep} \
--fork {resources.threads} \
{params.vep_defaults} \

tabix -p vcf -f {output.vcf_research_vep};
        """


rule svdb_annotate_somatic_research_sv:
    input:
        vcf_sv_research_vep = vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.research.vep.vcf.gz",
        header = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.sample_name_map",
    output:
        vcf_research = vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.research.vcf.gz",
    benchmark:
        Path(benchmark_dir, "svdb_annotate_somatic_research_sv." + config["analysis"]["case_id"] + ".svdb.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("svdb") + ".sif").as_posix()
    params:
        swegen_sv_frequency = swegen_sv,
        tmp_vcf = temp(vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.research.tmp.swegen.vcf"),
        message_text = "SV.somatic." + config["analysis"]["case_id"] + ".svdb.research.vep.vcf.gz",
    message:
        "Running SVDB for annotating research SVs with Swegen database on {params.message_text}"
    shell:
        """
if [[ -f "{params.swegen_sv_frequency}" ]]; then
    svdb --query --bnd_distance 5000 --overlap 0.80 \
    --in_occ OCC --out_occ swegen_obs --in_frq FRQ --out_frq SWEGENAF \
    --db {params.swegen_sv_frequency} --query_vcf {input.vcf_sv_research_vep} > {params.tmp_vcf};
    bgzip -l 9 -c {params.tmp_vcf} > {output.vcf_research};
else
    cp {input.vcf_sv_research_vep} {output.vcf_research};
fi

tabix -p vcf -f {output.vcf_research};
        """


rule svdb_annotate_clinical_obs_somatic_clinical_sv:
    input:
        vcf_sv_research = vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.research.filtered.pass.vcf.gz",
    output:
        vcf_sv_clinical_obs = temp(vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.clinical_obs.vcf.gz"),
    benchmark:
        Path(benchmark_dir, 'svdb_annotate_clinical_obs_somatic_clinical_sv.' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("svdb") + ".sif").as_posix()
    params:
        case_name = config["analysis"]["case_id"],
        clinical_sv_observations = clinical_sv,
        vcf_clinical_obs = temp(vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.clinical_obs.vcf"),
    message:
        "Annotating structural and copy number variants with clinical observations using SVDB for {params.case_name}",
    shell:
        """
if [[ -f "{params.clinical_sv_observations}" ]]; then
    svdb --query --bnd_distance 10000 --overlap 0.80 \
    --in_occ Obs --out_occ clin_obs --in_frq Frq --out_frq Frq \
    --db {params.clinical_sv_observations} --query_vcf {input.vcf_sv_research} > {params.vcf_clinical_obs}
    bgzip -l 9 -c {params.vcf_clinical_obs} > {output.vcf_sv_clinical_obs};
else
    cp {input.vcf_sv_research} {output.vcf_sv_clinical_obs};
fi

tabix -p vcf -f {output.vcf_sv_clinical_obs};

rm {params.vcf_clinical_obs} 
        """

rule svdb_annotate_artefact_sv:
    input:
        vcf_sv_clinical_obs = vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.clinical_obs.vcf.gz",
    output:
        vcf_sv_artefact_obs = temp(vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.artefact_sv.vcf.gz"),
    benchmark:
        Path(benchmark_dir, 'svdb_annotate_artefact_sv.' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("svdb") + ".sif").as_posix()
    params:
        case_name = config["analysis"]["case_id"],
        artefact_sv_observations = artefact_sv_obs,
        vcf_artefact_obs = temp(vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.artefact_sv.vcf"),
    threads:
        get_threads(cluster_config, "svdb_annotate_artefact_sv")
    message:
        "Annotating structural and copy number variants with artefact observations using SVDB for {params.case_name}",
    shell:
        """
if [[ -f "{params.artefact_sv_observations}" ]]; then
    svdb --query --bnd_distance 500 --overlap 0.80 \
    --in_occ Obs --out_occ ArtefactObs --in_frq Frq --out_frq ArtefactFrq \
    --db {params.artefact_sv_observations} --query_vcf {input.vcf_sv_clinical_obs} > {params.vcf_artefact_obs}
    bgzip -l 9 -c {params.vcf_clinical_obs} > {output.vcf_sv_artefact_obs};
else
    cp {input.vcf_sv_clinical_obs} {output.vcf_sv_artefact_obs};
fi

tabix -p vcf -f {output.vcf_sv_artefact_obs};

rm {params.vcf_sv_clinical_obs} 
        """

rule svdb_annotate_somatic_obs_somatic_clinical_sv:
    input:
        vcf_sv_clinical_obs = vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.artefact_sv.vcf.gz",
    output:
        vcf_sv_clinical = vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.clinical.vcf.gz",
    benchmark:
        Path(benchmark_dir, 'svdb_annotate_somatic_obs_somatic_clinical_sv.' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("svdb") + ".sif").as_posix()
    params:
        case_name = config["analysis"]["case_id"],
        somatic_sv_observations = somatic_sv,
        vcf_somatic_obs = temp(vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.somatic_obs.vcf"),
    message:
        "Annotating structural and copy number variants with clinical observations using SVDB for {params.case_name}",
    shell:
        """
if [[ -f "{params.somatic_sv_observations}" ]]; then
    svdb --query --bnd_distance 10000 --overlap 0.80 \
    --in_occ Obs --out_occ Cancer_Somatic_Obs --in_frq Frq --out_frq Cancer_Somatic_Frq \
    --db {params.somatic_sv_observations} --query_vcf {input.vcf_sv_clinical_obs} > {params.vcf_somatic_obs}
    bgzip -l 9 -c {params.vcf_somatic_obs} > {output.vcf_sv_clinical};
    rm {params.vcf_somatic_obs};
else
    cp {input.vcf_sv_clinical_obs} {output.vcf_sv_clinical};
fi

tabix -p vcf -f {output.vcf_sv_clinical};

rm {input.vcf_sv_clinical_obs};
        """
