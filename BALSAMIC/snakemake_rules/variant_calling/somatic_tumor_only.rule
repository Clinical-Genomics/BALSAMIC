# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule vardict_tumor_only:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        bed = vcf_dir + "split_bed/{bedchrom}." + capture_kit,
    output:
        temp(vcf_dir + "vardict/split_vcf/{bedchrom}_vardict.vcf.gz")
    benchmark:
        Path(benchmark_dir, 'vardict_tumor_only_' + '{bedchrom}.tsv').as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("vardict") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        af = params.vardict.allelic_frequency,
        max_pval = params.vardict.max_pval,
        max_mm = params.vardict.max_mm,
        col_info = params.vardict.column_info,
        case_name = config["analysis"]["case_id"],
    threads:
        get_threads(cluster_config, "vardict_tumor_only")
    message:
        "Calling single nucleotide variants using vardict for {params.case_name}"
    shell:
        """
export PERL5LIB=;

mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export VAR_DICT_OPTS='\"-Djava.io.tmpdir={params.tmpdir}\" \"-Xmx45G\"'; 

vardict-java -I 600 \
-G {input.fa} \
-f {params.af} \
-N {params.case_name} \
-th {threads} \
-b {input.bamT} \
{params.col_info} {input.bed} \
| teststrandbias.R \
| var2vcf_valid.pl -P {params.max_pval} \
-m {params.max_mm} -E -f {params.af} -N {params.case_name} \
| bgzip > {output};

tabix -p vcf {output};
    """


rule vardict_merge:
    input:
        expand(vcf_dir + "vardict/split_vcf/{chrom}_vardict.vcf.gz", chrom=chromlist)
    output:
        namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.sample_name_map",
        yaml = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.yaml",
        vcf_vardict = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz"
    benchmark:
        Path(benchmark_dir, 'vardict_merge_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        case_name = config["analysis"]["case_id"],
    threads:
        get_threads(cluster_config,"vardict_merge")
    message:
        ("Merging multiple VCFs from vardict into single VCF using bcftools for {params.case_name}")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

bcftools concat {input} \
| bcftools sort --temp-dir {params.tmpdir} - \
| bgzip > {output.vcf_vardict};
tabix -f -p vcf {output.vcf_vardict}; 

echo -e \"{params.case_name}\\tTUMOR\" > {output.namemap};
echo -e \"{params.case_name}\" > {output.namemap}.tumor; 
echo '{{ vcf: {{ vardict: {{ name: vardict , path: {output.vcf_vardict} }} }} }}' > {output.yaml};
        """


rule sentieon_TNhaplotyper_tumor_only:
    input:
        bam = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        ref = config["reference"]["reference_genome"],
        dbsnp = config["reference"]["dbsnp"],
        cosmic = config["reference"]["cosmic"],
        interval = config["panel"]["capture_kit"],
    output:
        vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnhaplotyper.research.vcf.gz",
        namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnhaplotyper.sample_name_map",
    benchmark:
        Path(benchmark_dir,'sentieon_TNhaplotyper_tumor_only_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    params:
        tumor = "TUMOR",
        tmpdir= tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, 'sentieon_TNhaplotyper_tumor_only')
    message:
        "Calling variants using TNhaplotyper for sample {params.case_name}"
    shell:
        """
mkdir -p {params.tmpdir}; 
export TMPDIR={params.tmpdir}; 
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-r {input.ref} \
-t {threads} \
-i {input.bam} \
--interval {input.interval} \
--algo TNhaplotyper \
--tumor_sample {params.tumor} \
--cosmic {input.cosmic} \
--dbsnp {input.dbsnp} {output.vcf};
 
echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};
        """
