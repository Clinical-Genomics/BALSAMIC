# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

import os
from BALSAMIC.utils.rule import get_picard_mrkdup
from BALSAMIC.utils.rule import get_conda_env
from BALSAMIC.utils.rule import get_chrom
from BALSAMIC.utils.rule import get_threads
from BALSAMIC import __version__ as bv

picarddup = get_picard_mrkdup(config)
chromlist = config["panel"]["chrom"]
capture_kit = os.path.split(config["panel"]["capture_kit"])[1]

rule vardict_tumor_only:
  input:
    fa = config["reference"]["reference_genome"],
    bamT = bam_dir + "tumor.merged.bam",
    bed = vcf_dir + "split_bed/{bedchrom}." + capture_kit,
  output:
    vcf_dir + "vardict/split_vcf/{bedchrom}_vardict.vcf.gz"
  params:
    af = "0.001",
    max_pval = "0.9",
    max_mm = "4.5",
    col_info = "-c 1 -S 2 -E 3 -g 4",
    name = config["analysis"]["case_id"],
    conda = get_conda_env(config["conda_env_yaml"],"vardict"),
  singularity: singularity_image
  benchmark:
    benchmark_dir + 'vardict/{bedchrom}.vardict.tsv'
  shell:
    "source activate {params.conda}; "
    "vardict -G {input.fa} -f {params.af} -N {params.name} "
        "-b {input.bamT} "
        "{params.col_info} {input.bed} "
        "| teststrandbias.R "
        "| var2vcf_valid.pl -P {params.max_pval} "
        "-m {params.max_mm} -E -f {params.af} -N {params.name} "
        "| bgzip > {output}; "
    "tabix -p vcf {output}; "
    "source deactivate;"

rule vardict_merge:
  input:
    expand(vcf_dir + "vardict/split_vcf/{chrom}_vardict.vcf.gz", chrom=chromlist)
  output:
    namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.sample_name_map",
    yaml = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.yaml",
    vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz"
  params:
    conda = get_conda_env(config["conda_env_yaml"],"vardict"),
    name = config["analysis"]["case_id"],
  singularity: singularity_image
  benchmark:
    benchmark_dir + config["analysis"]["case_id"] + ".vardict_merge.tsv"
  shell:
    "source activate {params.conda} ; "
    "bcftools concat {input} | bcftools sort - | bgzip > {output.vcf}; "
    "tabix -f -p vcf {output.vcf}; "
    "echo -e \"{params.name}\\tTUMOR\" > {output.namemap}; " 
    "echo '{{ vcf: {{ vardict: {{ name: vardict , path: {output.vcf} }} }} }}' > {output.yaml}; "
    "source deactivate;" 

rule mutect2_tumor_only:
  input:
    fa = config["reference"]["reference_genome"],
    dbsnp = config["reference"]["dbsnp"],
    cosmic = config["reference"]["cosmic"],
    bamT = bam_dir + "tumor.sorted." + picarddup + ".ralgn.bsrcl.merged.bam",
    bed = vcf_dir + "split_bed/{bedchrom}." + capture_kit,
  output:
    vcf_dir + "mutect/split_vcf/{bedchrom}_mutect.vcf.gz"
  params:
    result_dir = vcf_dir + "mutect/",
    conda = get_conda_env(config["conda_env_yaml"],"gatk")
  threads: get_threads(cluster_config, "mutect2_tumor_only")
  singularity: singularity_image
  benchmark:
    benchmark_dir + "mutect2/{bedchrom}.mutect2_tumor_only.tsv"
  shell:
    "source activate {params.conda};"
    "mkdir -p {params.result_dir}; "
    "gatk3  -T MuTect2 "
        "-R {input.fa} "
        "--cosmic {input.cosmic} "
        "--dbsnp {input.dbsnp} "
        "-I:tumor {input.bamT} "
        "--annotation Coverage --useNewAFCalculator --annotation VariantType --annotateNDA  --annotation RMSMappingQuality " 
        "--disable_auto_index_creation_and_locking_when_reading_rods "
        "-L {input.bed} "
    " | bgzip > {output}; "
    "tabix -p vcf {output}; " 
    "source deactivate; "

rule mutect2_merge: 
  input:  
    expand(vcf_dir + "mutect/split_vcf/{chrom}_mutect.vcf.gz", chrom=chromlist)   
  output: 
    namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".mutect.sample_name_map",
    yaml = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".mutect.yaml",
    vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".mutect.vcf.gz"  
  params: 
    conda = get_conda_env(config["conda_env_yaml"],"bcftools")
  singularity: singularity_image
  benchmark:
    benchmark_dir + config["analysis"]["case_id"] + ".mutect2_merge.tsv"
  shell:  
    "source activate {params.conda} ; " 
    "bcftools concat {input} | bcftools sort - | bgzip > {output.vcf}; "  
    "tabix -f -p vcf {output.vcf}; "  
    "echo -e \"TUMOR\\tTUMOR\" > {output.namemap}; " 
    "echo '{{ vcf: {{ mutect: {{ name: mutect2 , path: {output.vcf} }} }} }}' > {output.yaml}; "
    "source deactivate;" 

rule somatic_snv_indel_vcf_merge:
  input:
    name_map = expand(vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".{var_caller}.sample_name_map", var_caller=somatic_caller_snv),
    varcall_yaml = expand(vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".{var_caller}.yaml", var_caller=somatic_caller_snv),
    refdict = (config["reference"]["reference_genome"]).replace(".fasta",".dict"),
    reffasta = config["reference"]["reference_genome"],
    bamT = bam_dir + "tumor.merged.bam",
  output:
    vcfmerge = vcf_dir + "vcfmerge/SNV.somatic." + config["analysis"]["case_id"] + ".vcfmerge.vcf.gz",
    vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vcfmerge.vcf.gz"
  params:
    workdir = vcf_dir + "/vcfmerge",
    conda = get_conda_env(config["conda_env_yaml"],"vcfmerge"),
  threads: get_threads(cluster_config, 'somatic_snv_indel_vcf_merge')
  singularity: singularity_image 
  benchmark:
    benchmark_dir + "somatic_snv_inde_vcf_merge.tsv"
  shell:
    "source activate {params.conda}; "
    "mkdir -p {params.workdir}; "
    "cat {input.name_map} > {params.workdir}/sample_name.map; "
    "echo '{{bam: {{TUMOR: {input.bamT} }} }}' | "
      " yq -s '{{ vcf: map(.vcf) | add }} * .[0]'  - {input.varcall_yaml} "
      " > {params.workdir}/vcf.yaml; "
    "vcfmerge --sample-config {params.workdir}/vcf.yaml "
      " --reference-dict {input.refdict} "
      " --reference {input.reffasta} "
      " --sample-names {params.workdir}/sample_name.map "
      " --aggr-func max "
      " --output-dir {params.workdir} "
      " --mapq 10 "
      " --include-optional "
      " --output-vcf {output.vcf}; " 
    "cp {output.vcfmerge} {output.vcf}; "
    "source deactivate; "
