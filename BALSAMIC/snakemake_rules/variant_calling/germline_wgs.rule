# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


rule sentieon_DNAscope_wgs:
    input:
        ref = reference_genome,
        dbsnp = dbsnp,
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_type = wildcards.sample_type),
        recal_table = bam_dir + "{sample_type}.recal_data.table"
    output:
        vcf = vcf_dir + "SNV.germline.{sample_type}.dnascope.vcf.gz",
    resources:
        mem_mb = lambda wc, input: min(max(1.1 * input.size_mb, 10000), 500000) # Cap at 500GB
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        pcr_model = params.common.pcr_model,
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        sentieon_ml_dnascope = config_model.sentieon.dnascope_model,
        sample = "{sample_type}"
    benchmark:
        Path(benchmark_dir, 'sentieon_DNAscope_' + "{sample_type}.tsv").as_posix()
    message:
        "Calling germline variants using Sentieon DNAscope for {params.sample}"
    shell:
      """
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};
export SENTIEON_DNASCOPE={params.sentieon_ml_dnascope};

{params.sentieon_exec} driver \
-t {resources.threads} \
-r {input.ref} \
-i {input.bam} \
-q {input.recal_table} \
--algo DNAscope \
--pcr_indel_mode {params.pcr_model} \
-d {input.dbsnp} {output.vcf};

rm -rf {params.tmpdir};
      """


rule manta_germline_wgs:
    input:
        fa = reference_genome,
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_type = wildcards.sample_type),
    output:
        final = vcf_dir + "SV.germline.{sample_type}.manta_germline.vcf.gz",
    benchmark:
        Path(benchmark_dir, 'manta_germline_' + "{sample_type}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        sample = "{sample_type}"
    message:
        "Calling germline variants using manta for {params.sample}"
    shell:
        """
export TMPDIR={params.tmpdir};

configManta.py \
--bam={input.bam} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {resources.threads};

cp {params.tmpdir}/results/variants/diploidSV.vcf.gz {output.final};

tabix -p vcf -f {output.final};

rm -rf {params.tmpdir};
        """
