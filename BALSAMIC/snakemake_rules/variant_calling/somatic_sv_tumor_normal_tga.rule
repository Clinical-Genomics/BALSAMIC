# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


rule manta_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"],
        bamN = config_model.get_final_bam_name(bam_dir=bam_dir, sample_name=normal_sample, specified_suffix="dedup.fixmate.qualcapped"),
        bamT = config_model.get_final_bam_name(bam_dir=bam_dir, sample_name=tumor_sample, specified_suffix="dedup.fixmate.qualcapped"),
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'manta_tumor_normal_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        settings = params.get_manta_settings(sequencing_type=sequencing_type),
        runmode = "local",
        tumor = config_model.get_sample_name_by_type(SampleType.TUMOR),
        normal = config_model.get_sample_name_by_type(SampleType.NORMAL),
        case_name = case_id,
        manta_install_path = "/opt/conda/share/manta-1.6.0-2",
        low_pr_sr_count_value = MANTA_FILTERS.low_pr_sr_count.tag_value,
        low_pr_sr_count_filter_name = MANTA_FILTERS.low_pr_sr_count.filter_name,
    threads:
        get_threads(cluster_config, "manta_tumor_normal")
    message:
        ("Calling structural variants using manta for {params.case_name} and "
        "index the compressed vcf file")
    shell:
        """
export TMPDIR={params.tmpdir} ;
samtools_path=$(readlink -f $(which samtools)) ;

configManta.py \
{params.settings} \
--normalBam={input.bamN} \
--tumorBam={input.bamT} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};

{params.manta_install_path}/libexec/convertInversion.py \
  $samtools_path \
  {input.fa} \
  {params.tmpdir}/results/variants/somaticSV.vcf.gz > {params.tmpdir}/results/variants/somaticSV_converted.vcf;

bgzip -l 9 {params.tmpdir}/results/variants/somaticSV_converted.vcf ;

bcftools filter --threads {threads} --exclude 'SUM(FORMAT/PR[1:1]+FORMAT/SR[1:1]) < {params.low_pr_sr_count_value}' --soft-filter '{params.low_pr_sr_count_filter_name}' --mode '+' -o {output.final} -O z {params.tmpdir}/results/variants/somaticSV_converted.vcf.gz

tabix -p vcf -f {output.final};

echo -e \"{params.normal}\\tNORMAL\\n{params.tumor}\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule delly_sv_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"],
        bamN = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = normal_sample),
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        excl = config["reference"]["delly_exclusion_converted"],
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".dellysv.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'delly_sv_tumor_normal_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR",
        normal = "NORMAL",
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "delly_tumor_normal")
    message:
        ("Calling structural variants using delly for {params.case_name},"
        "filter somatic variants and finally convert from bcf to compressed vcf file")
    shell:
        """
export TMPDIR={params.tmpdir} ;

delly call -x {input.excl} -o {params.tmpdir}/delly.bcf -g {input.fa} {input.bamT} {input.bamN};

echo -e \"{params.tumor}\\ttumor\\n{params.normal}\\tcontrol\" > {params.tmpdir}/samples.tsv;

delly filter -p -f somatic -o {output.final} -s {params.tmpdir}/samples.tsv {params.tmpdir}/delly.bcf;

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

