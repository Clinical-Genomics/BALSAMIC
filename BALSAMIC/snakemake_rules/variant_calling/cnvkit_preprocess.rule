rule create_target:
    input:
        bed_expanded_merged = Path(cnv_dir + "capture_kit_expanded_merged.bed").as_posix(),
        refgene_flat = config_model.reference["refgene_flat"].file.as_posix(),
        access_bed = config_model.reference["access_regions"].file.as_posix()
    output:
        targets = cnv_dir + "targets.bed",
        antitargets = cnv_dir + "antitarget.bed",
    singularity:
        Path(singularity_image, "cnvkit.sif").as_posix()
    benchmark:
        Path(benchmark_dir, "cnvkit.targets.tsv").as_posix()
    shell:
        """
cnvkit.py target {input.bed_expanded_merged} --annotate {input.refgene_flat} --split -o {output.targets};
cnvkit.py antitarget {input.bed_expanded_merged} -g {input.access_bed} -o {output.antitargets};
        """

rule create_coverage:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        target_bed = cnv_dir + "targets.bed",
        antitarget_bed = cnv_dir + "antitarget.bed"
    output:
        target_cnn = cnv_dir + "{sample}.targetcoverage.cnn",
        antitarget_cnn = cnv_dir + "{sample}.antitargetcoverage.cnn"
    benchmark:
        Path(benchmark_dir, "cnvkit_{sample}.coverage.tsv").as_posix()
    params:
        case_name = config["analysis"]["case_id"],
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        min_mapq = params.common.min_mapq,
    singularity:
        Path(singularity_image, "cnvkit.sif").as_posix()
    message:
        "Segmenting genomic regions using CNVkit for {params.case_name}"
    shell:
        """
export TMPDIR={params.tmpdir} ;

cnvkit.py coverage {input.bam} {input.target_bed} -o {output.target_cnn} --min-mapq {params.min_mapq} --processes {resources.threads} ;
cnvkit.py coverage {input.bam} {input.antitarget_bed} -o {output.antitarget_cnn} --min-mapq {params.min_mapq} --processes {resources.threads} ;

rm -rf {params.tmpdir}
        """
