# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule cnvkit_paired:
    input:
        access_bed = config["reference"]["access_regions"],
        fasta = config["reference"]["reference_genome"],
        bamN = bam_dir + "normal.merged" + ".bam",
        bamT = bam_dir + "tumor.merged" + ".bam",
        baits_bed = config["panel"]["capture_kit"],
        refflat = config["reference"]["refflat"],
        snv_vcf_tumor = vcf_dir + "SNV.germline.tumor.dnascope.vcf.gz",
        snv_vcf_normal = vcf_dir + "SNV.germline.normal.dnascope.vcf.gz",
    output:
        cnr = cnv_dir + "tumor.merged" + ".cnr",
        cns = cnv_dir + "tumor.merged" + ".cns",
        diagram = cnv_dir + "tumor.merged" + "-diagram.pdf",
        gene_breaks = cnv_dir + config["analysis"]["case_id"] + ".gene_breaks",
        gene_metrics = cnv_dir + config["analysis"]["case_id"] + ".gene_metrics",
        namemap = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.sample_name_map"),
        scatter = cnv_dir + "tumor.merged" + "-scatter.pdf",
        vcf = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.vcf.gz"),
    benchmark:
        Path(benchmark_dir + "cnvkit_paired_" + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("cnvkit") + ".sif").as_posix()
    params:
        cnv_dir = cnv_dir,
        purecn_dir = cnv_dir + "PureCN",
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "cnv"},
        name = config["analysis"]["case_id"],
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor_name = "tumor.merged",
        min_mapq = params.common.min_mapq,
        case_name = config["analysis"]["case_id"],
        gender = config["analysis"]["gender"],
        tumor_sample_id = "TUMOR",
        normal_sample_id = "NORMAL",
        genome = config["reference"]["genome_version"]
    message:
        "Calling CNVs using CNVkit and calculating tumor purity/ploidy using PureCN for {params.case_name}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export PURECN='/opt/conda/lib/R/library/PureCN/extdata/PureCN.R'

# merge the tumor and normal VCF 
bcftools merge \
-O z -o {params.tmpdir}/SNV.merged.vcf.gz \
-O z {input.snv_vcf_tumor} {input.snv_vcf_normal};

tabix -p vcf -f {params.tmpdir}/SNV.merged.vcf.gz;

# create target and anti-target bed files
cnvkit.py target {input.baits_bed} \
--annotate {input.refflat} \
--split \
--output {params.cnv_dir}/targets.bed;

cnvkit.py antitarget {input.baits_bed} \
--access {input.access_bed} \
--output {params.cnv_dir}/antitarget_bed;

# calculate coverage in the given regions from BAM read depths
cnvkit.py coverage {input.bamT} \
{params.cnv_dir}/targets.bed \
--min-mapq {params.min_mapq} \
--processes {threads} \
--output {params.cnv_dir}/tumor.targetcoverage.cnn;

cnvkit.py coverage {input.bamT} \
{params.cnv_dir}/antitarget_bed \
--min-mapq {params.min_mapq} \
--processes {threads} \
--output {params.cnv_dir}/tumor.antitargetcoverage.cnn;

cnvkit.py coverage {input.bamN} \
{params.cnv_dir}/targets.bed \
--min-mapq {params.min_mapq} \
--processes {threads} \
--output {params.cnv_dir}/normal.targetcoverage.cnn;

cnvkit.py coverage {input.bamN} \
{params.cnv_dir}/antitarget_bed \
--min-mapq {params.min_mapq} \
--processes {threads} \
--output {params.cnv_dir}/normal.antitargetcoverage.cnn;

# Compile a coverage reference from the given list of files
cnvkit.py reference \
{params.cnv_dir}/normal.targetcoverage.cnn \
{params.cnv_dir}/normal.antitargetcoverage.cnn \
--fasta {input.fasta} \
--output {params.cnv_dir}/normalReference.cnn;

# Combine the uncorrected target and antitarget coverage tables (.cnn) and
# correct for biases in regional coverage and GC content, according to the given normal reference
cnvkit.py fix {params.cnv_dir}/tumor.targetcoverage.cnn \
{params.cnv_dir}/tumor.antitargetcoverage.cnn \
{params.cnv_dir}/normalReference.cnn \
--output {output.cnr};

# Infer copy number segments from the given coverage table
# segmentattion methods (-m): cbs: reccommended for mid-size target panels and exomes
# drop bins with 0  read depth and bins whose log2 values deviating from avg
cnvkit.py segment {output.cnr} \
--output {params.cnv_dir}/tumor.initial.cns \
--method cbs \
--drop-low-coverage \
--processes {threads};

# Convert copy number segments (.cns) to standard SEG format to be used in PureCN
cnvkit.py export seg {params.cnv_dir}/tumor.initial.cns \
--output {params.cnv_dir}/tumor.seg;

# Run PureCN to estimate tumor-purity and ploidy
mkdir -p {params.purecn_dir}

# Set default values to run by cnvkit call
purity="0.02"; ploidy=2;

# if purecn runs succesfully: update purity and ploidy values
purecn_status="true"

{{
Rscript $PURECN \
--out {params.purecn_dir} \
--sampleid {params.tumor_sample_id} \
--tumor {output.cnr} \
--segfile {params.cnv_dir}/tumor.seg \
--vcf  {params.tmpdir}/SNV.merged.vcf.gz \
--genome {params.genome} \
--funsegmentation Hclust \
--force --postoptimize \
--seed 124;
}} || purecn_status="false"

if $purecn_status; then
purity=$(awk -F\\, 'NR>1 {{print $2}}' {params.purecn_dir}/{params.tumor_sample_id}.csv)
ploidy=$(awk -F\\, 'NR>1 {{printf int($3)}}' {params.purecn_dir}/{params.tumor_sample_id}.csv);
fi


# Call copy number variants from segmented log2 ratios
cnvkit.py call {params.cnv_dir}/tumor.initial.cns \
--vcf {params.tmpdir}/SNV.merged.vcf.gz \
--sample-sex {params.gender} \
--method clonal \
--purity $purity \
--ploidy $ploidy \
--sample-id {params.tumor_sample_id} \
--normal-id {params.normal_sample_id} \
--output {output.cns};

# Plot bin-level log2 coverages and segmentation calls
cnvkit.py scatter {output.cnr} \
--segment {output.cns} \
--output {output.scatter};

# Draw copy number (.cnr or .cns) on chromosomes as an ideogram
# Draw copy number (.cnr or .cns) on chromosomes as an ideogram
cnvkit.py diagram {output.cnr} \
--segment  {output.cns} \
--output {output.diagram};

# Identify targeted genes with copy number gain or loss
cnvkit.py genemetrics {output.cnr} \
--segment {output.cns} \
--drop-low-coverage \
--sample-sex {params.gender} \
--output {output.gene_metrics};

# List the genenames that contain a possibe copy number breakpoint.
cnvkit.py breaks {output.cnr} {output.cns} \
| cut -f1 | sort -u > {output.gene_breaks};

# Convert segments to a vcf file
cnvkit.py export vcf {output.cns} \
--cnr {output.cnr} \
-o {params.cnv_dir}/{params.tumor_name}.vcf \
--sample-id {params.tumor_sample_id} \
--sample-sex {params.gender};

bgzip -f {params.cnv_dir}/{params.tumor_name}.vcf;

tabix -p vcf -f {params.cnv_dir}/{params.tumor_name}.vcf.gz;

bcftools sort \
-o {output.vcf} \
--temp-dir {params.tmpdir} \
-O z {params.cnv_dir}/{params.tumor_name}.vcf.gz;

tabix -p vcf -f {output.vcf};

echo -e \"TUMOR\\tTUMOR\" > {output.namemap};
rm -rf {params.tmpdir};
        """
