# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

picard_extra_tumor=" ".join(["RGPU=ILLUMINAi", "RGID=TUMOR",  "RGSM=TUMOR", "RGPL=ILLUMINAi", "RGLB=ILLUMINAi"])

if config["analysis"]["sequencing_type"] == 'wgs':
    tumor_bam = "{tumor}.dedup.realign.bam".format(tumor = tumor_sample)
else:
    tumor_bam = "{tumor}.sorted.{picardstr}.bam".format(tumor = tumor_sample, picardstr = picarddup)

rule mergeBam_tumor:
  input:
    fasta = config["reference"]["reference_genome"],
    bam = bam_dir + tumor_bam
  output:
    bam = bam_dir + "tumor.merged.bam",
    cram = bam_dir + "tumor.merged.cram",
  params:
    housekeeper_id = {"id": tumor_sample, "tags": "tumor"},
    conda = config["bioinfo_tools"].get("picard"),
    picard = picard_extra_tumor
  threads: get_threads(cluster_config, "mergeBam_tumor")
  singularity: Path(singularity_image, config["bioinfo_tools"].get("picard") + ".sif").as_posix() 
  benchmark:
    benchmark_dir + 'mergeBam_tumor_' + "{mysample}.mergebam_tumor.tsv".format(mysample = tumor_sample)
  shell:
    "source activate {params.conda}; "
    "picard AddOrReplaceReadGroups {params.picard} INPUT={input.bam} OUTPUT={output.bam}; "
    "samtools index {output.bam}; "
    "samtools view -h -T {input.fasta} --threads {threads} -C -o {output.cram} {output.bam}; "
    "samtools index {output.cram}; "
