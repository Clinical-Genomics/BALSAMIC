# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

picard_extra_tumor=" ".join(["RGPU=ILLUMINAi", "RGID=TUMOR",  "RGSM=TUMOR", "RGPL=ILLUMINAi", "RGLB=ILLUMINAi"])

if config["analysis"]["sequencing_type"] == 'wgs':
    tumor_bam = "{tumor}.dedup.realign.bam".format(tumor = tumor_sample)
else:
    tumor_bam = "{tumor}.sorted.{picardstr}.bam".format(tumor = tumor_sample, picardstr = picarddup)

rule mergeBam_tumor:
  input:
    fasta = config["reference"]["reference_genome"],
    bam = bam_dir + tumor_bam
  output:
    bam = bam_dir + "tumor.merged.bam",
    cram = bam_dir + "tumor.merged.cram",
  benchmark:
    Path(benchmark_dir,'mergeBam_tumor_' + "{mysample}.tsv".format(mysample=tumor_sample)).as_posix()
  singularity:
    Path(singularity_image, config[ "bioinfo_tools" ].get("picard") + ".sif").as_posix()
  params:
    housekeeper_id = {"id": tumor_sample, "tags": "tumor"},
    conda = config["bioinfo_tools"].get("picard"),
    picard = picard_extra_tumor,
    sample = tumor_sample
  threads:
    get_threads(cluster_config, "mergeBam_tumor")
  message:
    "Replace bam header using Picard tools for tumor sample {params.sample}"
  shell:
    """
source activate {params.conda};

picard AddOrReplaceReadGroups {params.picard} INPUT={input.bam} OUTPUT={output.bam}; 
samtools index {output.bam}; 
samtools view -h -T {input.fasta} --threads {threads} -C -o {output.cram} {output.bam}; 
samtools index {output.cram}; 
    """