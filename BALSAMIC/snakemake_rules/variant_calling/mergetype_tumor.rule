# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

if config["analysis"]["sequencing_type"] == 'wgs':
    tumor_bam = "{tumor}.dedup.realign.bam".format(tumor = tumor_sample)
else:
    tumor_bam = "{tumor}.sorted.{picardstr}.bam".format(tumor = tumor_sample, picardstr = picarddup)



rule mergeBam_tumor:
  input:
    fasta = config["reference"]["reference_genome"],
    bam = bam_dir + tumor_bam
  output:
    bam = bam_dir + "tumor.merged.bam",
    cram = bam_dir + "tumor.merged.cram",
  benchmark:
    Path(benchmark_dir,'mergeBam_tumor_' + "{mysample}.tsv".format(mysample=tumor_sample)).as_posix()
  singularity:
    Path(singularity_image, config[ "bioinfo_tools" ].get("picard") + ".sif").as_posix()
  params:
    housekeeper_id = {"id": tumor_sample, "tags": "tumor"},
    picard = params.common.picard_RG_tumor,
    sample = tumor_sample,
    tmpdir= tempfile.mkdtemp(prefix=tmp_dir),
  threads:
    get_threads(cluster_config, "mergeBam_tumor")
  message:
    "Replacing bam header using Picardtools for {params.sample}"
  shell:
    """
samtools collate --threads {threads} -Ou {input.bam} {params.tmpdir}/{params.sample} |\
samtools fixmate - - |\
samtools sort --threads {threads} -O BAM -o {params.tmpdir}/tumor.fixed.bam -;

samtools index {params.tmpdir}/tumor.fixed.bam;

picard AddOrReplaceReadGroups {params.picard} INPUT={params.tmpdir}/tumor.fixed.bam OUTPUT={output.bam}; 

samtools index {output.bam}; 

samtools view -h -T {input.fasta} --threads {threads} -C -o {output.cram} {output.bam}; 

samtools index {output.cram}; 
    """
