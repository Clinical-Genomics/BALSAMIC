# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

import os
from BALSAMIC.utils.rule import get_picard_mrkdup
from BALSAMIC.utils.rule import get_conda_env
from BALSAMIC.utils.rule import get_chrom
from BALSAMIC.utils.rule import get_threads
from BALSAMIC import __version__ as bv

picarddup = get_picard_mrkdup(config)
chromlist = config["panel"]["chrom"]
capture_kit = os.path.split(config["panel"]["capture_kit"])[1]

rule vardict_tumor_normal:
  input:
    fa = config["reference"]["reference_genome"],
    bamN = bam_dir + "normal.merged.bam", 
    bamT = bam_dir + "tumor.merged.bam",
    bed = vcf_dir + "split_bed/{bedchrom}." + capture_kit,
  output:
    vcf_dir + "vardict/split_vcf/{bedchrom}_vardict.vcf.gz"
  params:
    af = "0.005",
    max_pval = "0.9",
    max_mm = "4.5",
    col_info = "-c 1 -S 2 -E 3 -g 4",
    name = config["analysis"]["case_id"],
    conda = get_conda_env(config["conda_env_yaml"], "vardict"),
  singularity: singularity_image
  benchmark:
    benchmark_dir + "vardict/{bedchrom}.vardict_tumor_normal.tsv"
  shell:
    "source activate {params.conda}; "
    "vardict -G {input.fa} -f {params.af} -N {params.name} "
        "-b \"{input.bamT}|{input.bamN}\" "
        "{params.col_info} {input.bed} "
        "| testsomatic.R "
        "| var2vcf_paired.pl -P {params.max_pval} "
        "-m {params.max_mm} -M -f {params.af} -N {params.name} "
        "| bgzip > {output}; "
    "tabix -p vcf {output}; "
    "source deactivate;"

rule vardict_merge:
  input:
    expand(vcf_dir + "vardict/split_vcf/{chrom}_vardict.vcf.gz", chrom=chromlist) 
  output:
    vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz"
  params:
    conda = get_conda_env(config["conda_env_yaml"], "vardict"),
  singularity: singularity_image
  benchmark:
    benchmark_dir + config["analysis"]["case_id"] + ".vardict_merge.tsv"
  shell:
    "source activate {params.conda} ; "
    "bcftools concat {input} | bcftools sort - | bgzip > {output}; " 
    "tabix -f -p vcf {output}; "
    "source deactivate;" 

rule mutect2_tumor_normal:
  input:
    fa = config["reference"]["reference_genome"],
    dbsnp = config["reference"]["dbsnp"],
    cosmic = config["reference"]["cosmic"],
    bamT = bam_dir + "tumor.sorted." + picarddup + ".ralgn.bsrcl.merged.bam",
    bamN = bam_dir + "normal.sorted." + picarddup + ".ralgn.bsrcl.merged.bam",
    bed = vcf_dir + "split_bed/{bedchrom}." + capture_kit,
  output:
    vcf_dir + "mutect/split_vcf/{bedchrom}_mutect.vcf.gz"
  params:
    result_dir = vcf_dir + "mutect/",
    conda = get_conda_env(config["conda_env_yaml"],"gatk")
  threads: get_threads(cluster_config, "mutect2_tumor_normal")
  singularity: singularity_image
  benchmark:
    benchmark_dir + "mutect2/{bedchrom}.mutect2_tumor_normal.tsv"
  shell:
    "source activate {params.conda};"
    "mkdir -p {params.result_dir}; "
    "gatk3  -T MuTect2 "
        "-R {input.fa} "
        "--cosmic {input.cosmic} "
        "--dbsnp {input.dbsnp} "
        "-I:normal {input.bamN} "
        "-I:tumor {input.bamT} "
        "--annotation Coverage --useNewAFCalculator --annotation VariantType --annotateNDA  --annotation RMSMappingQuality " 
        "--disable_auto_index_creation_and_locking_when_reading_rods "
        "-L {input.bed} "
    " | bgzip > {output}; "
    "tabix -p vcf {output}; " 
    "source deactivate; "

rule mutect2_merge:
  input:
    expand(vcf_dir + "mutect/split_vcf/{chrom}_mutect.vcf.gz", chrom=chromlist) 
  output:
    vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".mutect.vcf.gz"
  params:
    conda = get_conda_env(config["conda_env_yaml"],"bcftools"),
  singularity: singularity_image
  benchmark:
    benchmark_dir + config["analysis"]["case_id"] + ".mutect2_merge.tsv"
  shell:
    "source activate {params.conda} ; "
    "bcftools concat {input} | bcftools sort - | bgzip > {output}; "
    "tabix -f -p vcf {output}; "
    "source deactivate;" 

rule strelka_tumor_normal:
  input:
    fa = config["reference"]["reference_genome"],
    bamN = bam_dir + "normal.merged.bam", 
    bamT = bam_dir + "tumor.merged.bam",
    mantaindel = vcf_dir + "manta/results/variants/candidateSmallIndels.vcf.gz" 
  output:
    final = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".strelka.vcf.gz", 
    default = expand(vcf_dir + "strelka/results/variants/{vcf_file}", vcf_file=["somatic.snvs.vcf.gz", "somatic.indels.vcf.gz"])
  params:
    tmpdir = vcf_dir + "strelka/", 
    runmode = "local",
    conda = get_conda_env(config["conda_env_yaml"],"strelka"),
  threads: get_threads(cluster_config, "strelka_tumor_normal")
  singularity: singularity_image
  benchmark:
    benchmark_dir + config["analysis"]["case_id"] + ".strelka_tumor_normal.tsv"
  shell:
    "source activate {params.conda};"
    "rm -rf {params.tmpdir}; "
    "configureStrelkaSomaticWorkflow.py "
        "--normalBam={input.bamN} "
        "--tumorBam={input.bamT} "
        "--referenceFasta={input.fa} "
        "--indelCandidates {input.mantaindel} "
        "--outputCallableRegions "
        "--exome "
        "--runDir={params.tmpdir}; "
    "python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads}; "
    "bcftools concat -a "
        "-o {output.final} "
        "-O z "
        "{output.default}; "
    "tabix -f -p vcf {output.final}; "
    "source deactivate; "
