# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


rule manta_tumor_normal_wgs:
    input:
        fa = reference_genome,
        bamN = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = normal_sample),
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample)
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'manta_tumor_normal_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        settings = params.get_manta_settings(sequencing_type=sequencing_type),
        runmode = "local",
        tumor = config_model.get_sample_name_by_type(SampleType.TUMOR),
        normal = config_model.get_sample_name_by_type(SampleType.NORMAL),
        case_name = case_id,
        low_pr_sr_count_value = MANTA_FILTERS.low_pr_sr_count.tag_value,
        low_pr_sr_count_filter_name = MANTA_FILTERS.low_pr_sr_count.filter_name,
    message:
        ("Calling structural variants using manta for {params.case_name} and "
        "index the compressed vcf file")
    shell:
        """
export TMPDIR={params.tmpdir} ;
samtools_path=$(readlink -f $(which samtools)) ;

configManta.py \
{params.settings} \
--normalBam={input.bamN} \
--tumorBam={input.bamT} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {resources.threads};

convertInversion.py \
  $samtools_path \
  {input.fa} \
  {params.tmpdir}/results/variants/somaticSV.vcf.gz > {params.tmpdir}/results/variants/somaticSV_converted.vcf;

bgzip -l 9 {params.tmpdir}/results/variants/somaticSV_converted.vcf ;

bcftools filter --threads {resources.threads} --exclude 'SUM(FORMAT/PR[1:1]+FORMAT/SR[1:1]) < {params.low_pr_sr_count_value}' --soft-filter '{params.low_pr_sr_count_filter_name}' --mode '+' -o {output.final} -O z {params.tmpdir}/results/variants/somaticSV_converted.vcf.gz

tabix -p vcf -f {output.final};

echo -e \"{params.normal}\\tNORMAL\\n{params.tumor}\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule delly_sv_tumor_normal_wgs:
    input:
        fa = config_model.reference["reference_genome"].file.as_posix(),
        bamN = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = normal_sample),
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        excl = delly_exclusion_converted
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".dellysv.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'delly_sv_tumor_normal_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR",
        normal = "NORMAL",
        case_name = config["analysis"]["case_id"]
    message:
        ("Calling structural variants using delly for {params.case_name},"
        "filter somatic variants and finally convert from bcf to compressed vcf file")
    shell:
        """
export TMPDIR={params.tmpdir} ;

delly call -x {input.excl} -o {params.tmpdir}/delly.bcf -g {input.fa} {input.bamT} {input.bamN};

echo -e \"{params.tumor}\\ttumor\\n{params.normal}\\tcontrol\" > {params.tmpdir}/samples.tsv;

delly filter -p -f somatic -o {output.final} -s {params.tmpdir}/samples.tsv {params.tmpdir}/delly.bcf;

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """


rule delly_cnv_tumor_normal_wgs:
    input:
        fa = config_model.reference["reference_genome"].file.as_posix(),
        bamN = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = normal_sample),
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        map = delly_mappability
    output:
        cnv_delly = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        rd_delly = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.cov.gz",
        namemap= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.sample_name_map",
    benchmark:
        benchmark_dir + 'delly_cnv_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix(),
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        housekeeper_id= {"id": config["analysis"]["case_id"],"tags": "clinical"},
        normal = "NORMAL",
        tumor = "TUMOR",
        case_name = config["analysis"]["case_id"]
    message:
        ("Calling copy number variants using delly for {params.case_name}")
    shell:
        """
export TMPDIR={params.tmpdir} ;

echo -e \"{params.tumor}\\ttumor\\n{params.normal}\\tcontrol\" > {params.tmpdir}/samples.tsv;

delly cnv -u -z 10000 -m {input.map} -g {input.fa} -c {output.rd_delly} \
-o {params.tmpdir}/{params.tumor}.bcf {input.bamT};

delly cnv -u -v {params.tmpdir}/{params.tumor}.bcf -m {input.map} -g {input.fa} \
-o {params.tmpdir}/{params.normal}.bcf {input.bamN};

bcftools merge -m id -O b -o {params.tmpdir}/{params.tumor}_{params.normal}.bcf \
{params.tmpdir}/{params.tumor}.bcf {params.tmpdir}/{params.normal}.bcf; 

bcftools index {params.tmpdir}/{params.tumor}_{params.normal}.bcf; 

delly classify -p -f somatic -o {output.cnv_delly} -s {params.tmpdir}/samples.tsv \
{params.tmpdir}/{params.tumor}_{params.normal}.bcf ;

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule ascat_tumor_normal_wgs:
    input:
        fa = config_model.reference["reference_genome"].file.as_posix(),
        bamN = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = normal_sample),
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        gccorrection = ascat_gc_correction,
    output:
        final_vcf = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".raw.ascat.vcf.gz",
        ascat_copynumber = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.copynumber.txt.gz",
        sample_statistics = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.samplestatistics.txt",
        plot_ascat_profile = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.ascatprofile.png",
        plot_raw_profile = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.rawprofile.png",
        plot_aspcf = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.ASPCF.png",
        plot_tumor = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.tumor.png",
        plot_germline = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.germline.png",
        plot_sunrise = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.sunrise.png",
        namemap = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.sample_name_map",
    benchmark:
        benchmark_dir + 'ascat_tumor_normal_' + config["analysis"]["case_id"] + "_ascat.tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("ascatNgs") + ".sif").as_posix()
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "clinical"},
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR",
        normal = "NORMAL",
        genome = config["reference"]["genome_version"],
        case_name = config["analysis"]["case_id"],
        gender = config["analysis"]["gender"]
    message:
        ("Calling copy number variants using ascatNGS for {params.case_name}")
    shell:
        """
export TMPDIR={params.tmpdir} ;
export LD_LIBRARY_PATH=:/opt/wtsi-cgp/lib;

if [[ "{params.gender}" = "female" ]]; then gender="XX"; else gender="XY"; fi

ascat.pl \
  -protocol WGS \
  -species human \
  -genderChr Y \
  -assembly {params.genome} \
  -cpus {resources.threads} \
  -reference {input.fa} \
  -snp_gc {input.gccorrection} \
  -outdir {params.tmpdir} \
  -gender $gender \
  -tumour {input.bamT} \
  -normal {input.bamN};

cp  {params.tmpdir}/{params.tumor}.copynumber.caveman.vcf.gz {output.final_vcf};

cp {params.tmpdir}/{params.tumor}.copynumber.txt.gz {output.ascat_copynumber}

cp {params.tmpdir}/{params.tumor}.samplestatistics.txt {output.sample_statistics};

cp {params.tmpdir}/{params.tumor}.ASCATprofile.png {output.plot_ascat_profile};

cp {params.tmpdir}/{params.tumor}.rawprofile.png {output.plot_raw_profile};

cp {params.tmpdir}/{params.tumor}.ASPCF.png {output.plot_aspcf};

cp {params.tmpdir}/{params.tumor}.tumour.png {output.plot_tumor};

cp {params.tmpdir}/{params.tumor}.germline.png {output.plot_germline};

cp {params.tmpdir}/{params.tumor}.sunrise.png {output.plot_sunrise};

tabix -p vcf -f {output.final_vcf};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule tiddit_sv_tumor_normal_wgs:
    input:
        fa = config["reference"]["reference_genome"],
        bamN = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = normal_sample),
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample)
    output:
        vcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tiddit.vcf.gz",
        cov_tumor_tiddit = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tumor.tiddit_cov.bed",
        cov_normal_tiddit = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".normal.tiddit_cov.bed",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tiddit.sample_name_map",
    benchmark:
        benchmark_dir + 'tiddit_sv_tumor_normal_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("tiddit") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        vcf_dir = vcf_dir,
        housekeeper_id= {"id": config["analysis"]["case_id"],"tags": "clinical"},
        tumor = "TUMOR",
        normal = "NORMAL",
        case_name = config["analysis"]["case_id"],
        filter_svs = get_script_path("filter_SVs.py")
    message:
        ("Calling structural variants using tiddit for {params.case_name}")
    shell:
        """
export TMPDIR={params.tmpdir} ;

tiddit --cov -z 500 --ref {input.fa} --bam {input.bamT} -o {params.tmpdir}/{params.tumor}_cov &

tiddit --cov -z 500 --ref {input.fa} --bam {input.bamN} -o {params.tmpdir}/{params.normal}_cov &

tiddit --sv -p 6 -r 6 -z 100 --p_ratio 0.10 --ref {input.fa} --bam {input.bamT} -o {params.tmpdir}/{params.tumor};

tiddit --sv -p 3 -r 3 --ref {input.fa} --bam {input.bamN} -o {params.tmpdir}/{params.normal};

grep -E "#|PASS" {params.tmpdir}/{params.tumor}.vcf > {params.tmpdir}/{params.tumor}_PASS.vcf;

grep -E "#|PASS" {params.tmpdir}/{params.normal}.vcf > {params.tmpdir}/{params.normal}_PASS.vcf;

svdb --merge --pass_only --notag --bnd_distance 500 --overlap 0.6 \
--vcf {params.tmpdir}/{params.tumor}_PASS.vcf {params.tmpdir}/{params.normal}_PASS.vcf \
> {params.vcf_dir}{params.tumor}_{params.normal}_merged_PASS.vcf ;

python {params.filter_svs} tiddit_tn -v {params.vcf_dir}{params.tumor}_{params.normal}_merged_PASS.vcf filter \
> {params.vcf_dir}{params.tumor}_{params.normal}_merged_tn_filter.vcf ;

python {params.filter_svs} tiddit_tn -v {params.vcf_dir}{params.tumor}_{params.normal}_merged_tn_filter.vcf rescue_bnds \
| bgzip -l 9 -c > {output.vcf}

cp {params.tmpdir}/{params.tumor}_cov.bed {output.cov_tumor_tiddit};

cp {params.tmpdir}/{params.normal}_cov.bed {output.cov_normal_tiddit};

tabix -p vcf -f {output.vcf};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """


rule igh_dux4_detection_tumor_normal_wgs:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        bamN = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name= normal_sample),
    output:
        vcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".igh_dux4.vcf.gz",
    benchmark:
        benchmark_dir + 'igh_dux4_detection_tumor_normal_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("samtools") + ".sif").as_posix()
    params:
        genome_version = config["reference"]["genome_version"],
        custom_sv_detection_script = get_script_path("igh_dux4_detection.sh"),
        case_name = config["analysis"]["case_id"],
    message:
        "Detecting IGH::DUX4 rearrangement for {params.case_name} using samtools."
    shell:
        """
        bash {params.custom_sv_detection_script} {params.genome_version} {output.vcf} {input.bamT} {input.bamN} 
        """
