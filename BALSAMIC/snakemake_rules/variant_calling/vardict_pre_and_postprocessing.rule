

rule bedtools_pad_bedfile:
    input:
        bed = config["panel"]["capture_kit"],
        chrom = config["reference"]["genome_chrom_size"]
    output:
        bed = vcf_dir + "pad_bedfile/" + "100bp_padding_" + capture_kit
    benchmark:
        Path(benchmark_dir, 'bedtools_pad_bedfile.tsv').as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bedtools") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        pad_bed_dir = vcf_dir + "pad_bedfile/",
        origin_bed = capture_kit,
    message:
        "Padding 100bp to target capture bedfile."
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

sed 's/^chr//g;/_/d' {input.chrom} | sort -k1,1 > {params.pad_bed_dir}hg19.chrom.sizes;

bedtools slop -b 100 -i {input.bed} -g {params.pad_bed_dir}hg19.chrom.sizes \
| sort -k1,1 -k2,2n \
| bedtools merge > {params.pad_bed_dir}100bp_padding_{params.origin_bed} ;

        """

rule vardict_sort:
    input:
        vcf = vcf_dir + "vardict/vardict.vcf"
    output:
        vcf_sorted = vcf_dir + "vardict/vardict.sorted.vcf"
    params:
        tmpdir=tempfile.mkdtemp(prefix=tmp_dir),
        sort_vcf=get_script_path("sort_vcf.awk"),
        case_name=config["analysis"]["case_id"],
    benchmark:
        Path(benchmark_dir, 'vardict_sort_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    message:
        ("Sorting VarDict VCF with awk {params.case_name}")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

awk -f {params.sort_vcf} {input.vcf} > {output.vcf_sorted}

rm -rf {params.tmpdir} ;
    """

rule gatk_update_vcf_sequence_dictionary:
    input:
        ref = config["reference"]["reference_genome"],
        vcf = vcf_dir + "vardict/SNV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz",
    output:
        vcf_vardict = vcf_dir + "vardict/SNV_SV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz",
    params:
        tmpdir=tempfile.mkdtemp(prefix=tmp_dir),
    benchmark:
        Path(benchmark_dir,"gatk_update_vcf_sequence_dictionary" + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("gatk") + ".sif").as_posix()
    message:
        "Running GATK UpdateVCFSequenceDictionary on VarDict VCF."
    shell:
        """
export TMPDIR={params.tmpdir};  

ref=$(echo {input.ref} | sed 's/.fasta/.dict/g') ;

gatk UpdateVCFSequenceDictionary -V {input.vcf} --source-dictionary $ref --replace --output {output.vcf_vardict} ;
      
rm -rf {params.tmpdir}
        """

rule vardict_move_svs:
    input:
        vcf_vardict = vcf_dir + "vardict/SNV_SV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz"
    output:
        vcf_vardict=vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz",
        vcf_vardict_sv=vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz",
    params:
        housekeeper_id={"id": config["analysis"]["case_id"], "tags": "research"},
        tmpdir=tempfile.mkdtemp(prefix=tmp_dir),
    benchmark:
        Path(benchmark_dir,"vardict_move_svs" + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    message:
        "Moving SVs from VarDict VCF to separate VCF."
    shell:
        """
export TMPDIR={params.tmpdir};  

bcftools view view -i 'INFO/SVTYPE!=""' -Oz -o {output.vcf_vardict_sv} {input.vcf_vardict}
tabix -p vcf -f {output.vcf_vardict_sv}
bcftools view view -i 'INFO/SVTYPE!=""' -Oz -o {output.vcf_vardict} {input.vcf_vardict}
tabix -p vcf -f {output.vcf_vardict}

rm -rf {params.tmpdir}
        """