# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

if config["analysis"]["sequencing_type"] == 'wgs':
    normal_bam = "{normal}.dedup.realign.bam".format(normal = normal_sample)
else:
    normal_bam = "{normal}.sorted.{picardstr}.bam".format(normal = normal_sample, picardstr = picarddup)



rule mergeBam_normal:
  input:
    fasta = config["reference"]["reference_genome"],
    bam = bam_dir + normal_bam 
  output:
    bam = bam_dir + "normal.merged.bam", 
    cram = bam_dir + "normal.merged.cram",
  benchmark:
    Path(benchmark_dir,'mergeBam_normal_' + "{mysample}.tsv".format(mysample=normal_sample)).as_posix()
  singularity:
    Path(singularity_image, config["bioinfo_tools"].get("picard") + ".sif").as_posix()
  params:
    housekeeper_id = {"id": normal_sample, "tags": "normal"},
    picard = params.common.picard_RG_normal,
    sample = normal_sample,
    tmpdir= tempfile.mkdtemp(prefix=tmp_dir),
  threads:
    get_threads(cluster_config, "mergeBam_normal")
  message:
    "Replacing bam header using Picardtools for {params.sample}"
  shell:
    """
samtools collate --threads {threads} -Ou {input.bam} {params.tmpdir}/{params.sample} |\
samtools fixmate -r --threads {threads} - - |\
samtools sort --threads {threads} -O BAM -o {params.tmpdir}/normal.fixed.bam -;

samtools index {params.tmpdir}/normal.fixed.bam;

picard AddOrReplaceReadGroups {params.picard} -INPUT {params.tmpdir}/normal.fixed.bam -OUTPUT {output.bam}; 

samtools index {output.bam}; 

samtools view -h -T {input.fasta} --threads {threads} -C -o {output.cram} {output.bam}; 

samtools index {output.cram}; 
    """
