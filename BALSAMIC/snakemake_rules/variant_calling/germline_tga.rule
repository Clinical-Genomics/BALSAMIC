# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule sentieon_DNAscope:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_type = wildcards.sample_type),
        ref = config["reference"]["reference_genome"],
        dbsnp = config["reference"]["dbsnp"],
        interval = config["panel"]["capture_kit"]
    output:
        vcf = vcf_dir + "SNV.germline.{sample_type}.dnascope.vcf.gz",
    benchmark:
        Path(benchmark_dir, "sentieon_dnascope_{sample_type}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        sample = '{sample_type}'
    threads:
        get_threads(cluster_config, 'sentieon_DNAscope')
    message:
        "Calling germline variants using Sentieon DNAscope for {params.sample}"
    shell:
        """
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-t {threads} \
-r {input.ref} \
-i {input.bam} \
--interval {input.interval} \
--algo DNAscope \
-d {input.dbsnp} {output.vcf};

rm -rf {params.tmpdir};
        """


rule manta_germline:
    input:
        fa = config["reference"]["reference_genome"],
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_type = wildcards.sample_type, specified_suffix="dedup.fixmate.qualcapped"),
    output:
        final = vcf_dir + "SV.germline.{sample_type}.manta_germline.vcf.gz",
    benchmark:
        Path(benchmark_dir, 'manta_germline_' + "{sample_type}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        sample = "{sample_type}"
    threads:
        get_threads(cluster_config,"manta_germline")
    message:
        "Calling germline variants using manta for {params.sample}"
    shell:
        """
export TMPDIR={params.tmpdir};        

configManta.py \
--bam={input.bam} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};

cp {params.tmpdir}/results/variants/diploidSV.vcf.gz {output.final};

tabix -p vcf -f {output.final};

rm -rf {params.tmpdir};
        """
