# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Hassan Foroughi Asl"

from BALSAMIC.utils.rule import get_conda_env, get_chrom
from BALSAMIC import __version__ as bv

tumor_bam = "tumor.merged.bam"

if config["analysis"]["sequencing_type"] == 'wgs':
    tumor_bam = "{tumor}.dedup.realign.bam".format(tumor = get_sample_type(config["samples"], "tumor")[0])

rule cnvkit_single:
  input:
    refflat = config["reference"]["refflat"],
    reffa = config["reference"]["reference_genome"],
    bamT = bam_dir + tumor_bam, 
  output:
    done = cnv_dir + "cnvkit_single.done" 
  params:
    target = config["panel"]["capture_kit"] if "panel" in config.keys() else "None", 
    refcnn = cnv_dir + "FlatReference.cnn",
    name = config["analysis"]["case_id"],
    outdir = cnv_dir,
    conda = get_conda_env(config["conda_env_yaml"], "cnvkit"),
  singularity: singularity_image
  benchmark:
    benchmark_dir + config["analysis"]["case_id"] + ".cnvkit_single.tsv"
  run:
    if config["analysis"]["sequencing_type"] == 'wgs':
      shell(("source activate {params.conda}; " 
            "cnvkit.py batch {input.bamT} " 
              "-f {input.reffa} " 
              "-m wgs "
              "--annotate {input.refflat} " 
              "--output-reference {output.cnn} " 
              "--output-dir {params.outdir} && touch {output.done}; "))
    else:
      shell(("source activate {params.conda}; "
            "cnvkit.py target {params.target} --annotate {input.refflat} --split -o {params.outdir}/targets.bed; "
            "cnvkit.py reference -o {params.refcnn} -f {input.reffa} -t {params.outdir}/targets.bed; "
            "cnvkit.py batch "
              "--method hybrid "
              "--drop-low-coverage "
              "--reference {params.refcnn} "
              "--output-dir {params.outdir} "
              "--scatter --diagram {input.bamT} && touch {output.done}; "))
