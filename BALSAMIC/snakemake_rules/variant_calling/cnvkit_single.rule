# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

if config["analysis"]["sequencing_type"] == 'wgs':
    tumor_bam = "{tumor}.dedup.realign".format(tumor = get_sample_type(config["samples"], "tumor")[0])
    cnvkit_params = " --method wgs "
else:
    tumor_bam = "tumor.merged"
    cnvkit_params = " --drop-low-coverage --method hybrid "

rule cnvkit_single:
    input:
        fasta = config["reference"]["reference_genome"],
        refflat = config["reference"]["refflat"],
        wgs_calling_interval = config["reference"]["wgs_calling_interval"],
        bamT = bam_dir + tumor_bam + ".bam", 
    output:
        vcf = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.vcf.gz"),
        namemap = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.sample_name_map"),
        cns = cnv_dir + tumor_bam + ".cns",
        cnr = cnv_dir + tumor_bam + ".cnr",
        scatter = cnv_dir + tumor_bam + "-scatter.pdf",
        diagram = cnv_dir + tumor_bam + "-diagram.pdf",
        gene_breaks = cnv_dir + config["analysis"]["case_id"] + ".gene_breaks",
        gene_metrics = cnv_dir + config["analysis"]["case_id"] + ".gene_metrics",
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "cnv"},
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        extra = cnvkit_params,
        refcnn = cnv_dir + "FlatReference.cnn",
        target = config["panel"]["capture_kit"] if "panel" in config else "None", 
        name = config["analysis"]["case_id"],
        tumor_name = tumor_bam,
        cnv_dir = cnv_dir,
        conda = get_conda_env(config["conda_env_yaml"], "cnvkit"),
    singularity: singularity_image
    benchmark:
        benchmark_dir + 'cnvkit_single_' + config["analysis"]["case_id"] + ".cnvkit_single.tsv"
    shell:
      """
source activate {params.conda};
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

if [ {params.target} != None ]; then
cnvkit.py target {params.target} \
--annotate {input.refflat} \
--split \
-o {params.cnv_dir}/targets.bed;
cnvkit.py reference \
-o {params.refcnn} \
-f {input.fasta} \
-t {params.cnv_dir}/targets.bed;
else
cnvkit.py reference \
-o {params.refcnn} \
-f {input.fasta} \
-t {input.wgs_calling_interval};
fi;

cnvkit.py batch {input.bamT} \
{params.extra} \
--reference {params.refcnn} \
--scatter --diagram \
--output-dir {params.cnv_dir};

cnvkit.py genemetrics {output.cnr} \
-s {output.cns} \
--drop-low-coverage -y \
--output {output.gene_metrics};

cnvkit.py breaks {output.cnr} {output.cns} \
| cut -f1 | sort -u > {output.gene_breaks};

cnvkit.py export vcf {output.cns} \
--cnr {output.cnr} \
-o {params.cnv_dir}/{params.tumor_name}.vcf \
--sample-id TUMOR;

bgzip -f {params.cnv_dir}/{params.tumor_name}.vcf;

tabix -p vcf -f {params.cnv_dir}/{params.tumor_name}.vcf.gz;

bcftools sort \
-o {output.vcf} \
--temp-dir {params.tmpdir} \
-O z {params.cnv_dir}/{params.tumor_name}.vcf.gz; 

tabix -p vcf -f {output.vcf};

echo -e \"TUMOR\\tTUMOR\" > {output.namemap}; 
      """
