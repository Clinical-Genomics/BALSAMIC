# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

from BALSAMIC.utils.rule import get_conda_env, get_chrom
from BALSAMIC import __version__ as bv

fasta = config["reference"]["reference_genome"]
refflat = config["reference"]["refflat"]
exon_bed = config["reference"]["exon_bed"]

if config["analysis"]["sequencing_type"] == 'wgs':
    tumor_bam = "{tumor}.dedup.realign.bam".format(tumor = get_sample_type(config["samples"], "tumor")[0])
    cnvkit_params = " --method wgs "
else:
    tumor_bam = "tumor.merged.bam"
    cnvkit_params = " --drop-low-coverage --method hybrid "

rule cnvkit_single:
    input:
        fasta = fasta, 
        refflat = refflat, 
        exon_bed = exon_bed, 
        bamT = bam_dir + tumor_bam, 
    output:
        done = cnv_dir + "cnvkit_single.done"
    params:
        extra = cnvkit_params,
        refcnn = cnv_dir + "FlatReference.cnn",
        target = config["panel"]["capture_kit"] if "panel" in config else "None", 
        name = config["analysis"]["case_id"],
        tumor_name = tumor_bam,
        cnv_dir = cnv_dir,
        conda = get_conda_env(config["conda_env_yaml"], "cnvkit"),
    singularity: singularity_image
    benchmark:
        benchmark_dir + 'cnvkit_single_' + config["analysis"]["case_id"] + ".cnvkit_single.tsv"
    shell:
        "source activate {params.conda}; "
        "if [ {params.target} != None ]; then "
        "cnvkit.py target {params.target} --annotate {input.refflat} --split -o {params.cnv_dir}/targets.bed; "
        "cnvkit.py reference -o {params.refcnn} -f {input.fasta} -t {params.cnv_dir}/targets.bed; "
        "else "
        "cnvkit.py reference -o {params.refcnn} -f {input.fasta} -t {input.exon_bed}; " 
        "fi; "
        "cnvkit.py batch {input.bamT} "
            "{params.extra} "
            " --reference {params.refcnn} "
            " --scatter --diagram "
            " --output-dir {params.cnv_dir} && touch {output.done}; "
        "cnvkit.py genemetrics {params.cnv_dir}/{params.tumor_name}.cnr "
            "-s {params.cnv_dir}/{params.tumor_name}.cns "
            "--drop-low-coverage -y "
            "--output {params.cnv_dir}/{params.name}.gene_metrics.csv; "
        "cnvkit.py breaks {params.cnv_dir}/{params.tumor_name}.cnr {params.cnv_dir}/{params.tumor_name}.cns "
            "| cut -f1 | sort -u > {params.cnv_dir}/{params.name}.gene_breaks.csv; "
