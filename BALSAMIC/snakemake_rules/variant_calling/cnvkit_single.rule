# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule cnvkit_single:
    input:
        access_bed = config["reference"]["access_regions"],
        bamT = bam_dir  + "tumor.merged.bam",
        baits_bed = config["panel"]["capture_kit"],
        fasta = config["reference"]["reference_genome"],
        refflat = config["reference"]["refflat"],
        snv_vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnhaplotyper.vcf.gz"
    output:
        cns = cnv_dir + "tumor.merged" + ".cns",
        cnr = cnv_dir + "tumor.merged" + ".cnr",
        diagram = cnv_dir + "tumor.merged" + "-diagram.pdf", 
        gene_breaks = cnv_dir + config["analysis"]["case_id"] + ".gene_breaks",
        gene_metrics = cnv_dir + config["analysis"]["case_id"] + ".gene_metrics",
        scatter = cnv_dir + "tumor.merged" + "-scatter.pdf",
        namemap = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.sample_name_map"),
        vcf = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.vcf.gz"),
    benchmark:
        benchmark_dir + 'cnvkit_single_' + config["analysis"]["case_id"] + ".cnvkit_single.tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("cnvkit") + ".sif").as_posix() 
    params:
        purecn_exec = config["PURECN"],
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "cnv"},
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor_name = "tumor.merged",
        purecn_dir = cnv_dir + "PureCN",
        cnv_dir = cnv_dir,
        conda = config["bioinfo_tools"].get("cnvkit"),
        sample_id = config["analysis"]["case_id"] 
    message:
        "Run CNVkit pipeline for sample {params.sample_id},"
        "while tumor purity/ploidy calculated using PureCN" 
    shell:
      """
source activate {params.conda};
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

cnvkit.py target {input.baits_bed} \
--annotate {input.refflat} \
--split \
--output {params.cnv_dir}/targets.bed;

cnvkit.py antitarget {input.baits_bed} \
--access {input.access_bed} \
--output {params.cnv_dir}/antitarget_bed;

cnvkit.py coverage {input.bamT} \
{params.cnv_dir}/targets.bed \
--min-mapq 20 \
--processes 16 \
--output {params.cnv_dir}/tumor.targetcoverage.cnn;

cnvkit.py coverage {input.bamT} \
{params.cnv_dir}/antitarget_bed \
--min-mapq 20 \
--processes 16 \
--output {params.cnv_dir}/tumor.antitargetcoverage.cnn;

cnvkit.py reference --output {params.cnv_dir}/FlatReference.cnn \
--fasta {input.fasta} \
--targets {params.cnv_dir}/targets.bed \
--antitargets {params.cnv_dir}/antitarget_bed;

cnvkit.py fix {params.cnv_dir}/tumor.targetcoverage.cnn \
{params.cnv_dir}/tumor.antitargetcoverage.cnn \
{params.cnv_dir}/FlatReference.cnn \
--output {output.cnr};

cnvkit.py segment {output.cnr} \
--output {params.cnv_dir}/tumor.initial.cns \
--method cbs \
--drop-low-coverage \
--processes 16;

cnvkit.py export seg {params.cnv_dir}/tumor.initial.cns \
--output {params.cnv_dir}/tumor.seg;


mkdir -p {params.purecn_dir}

Rscript {params.purecn_exec} \
--out {params.purecn_dir} \
--sampleid TUMOR \
--tumor {output.cnr} \
--segfile {params.cnv_dir}/tumor.seg \
--vcf  {input.snv_vcf} \
--genome hg19 \
--funsegmentation Hclust \
--force --postoptimize \
--seed 124;


purity=$(awk -F\, 'NR>1 {{print $2}}' {params.purecn_dir}/TUMOR.csv)
ploidy=$(awk -F\, 'NR>1 {{printf int($3)}}' {params.purecn_dir}/TUMOR.csv)

cnvkit.py call {params.cnv_dir}/tumor.initial.cns \
--vcf {input.snv_vcf} \
--sample-sex male \
--method clonal \
--purity $purity \
--ploidy $ploidy \
--output {output.cns};

cnvkit.py scatter {output.cnr} \
--segment {output.cns} \
--output {output.scatter};

cnvkit.py diagram {output.cnr} \
--segment  {output.cns} \
--output {output.diagram};


cnvkit.py genemetrics {output.cnr} \
--segment {output.cns} \
--drop-low-coverage -y \
--output {output.gene_metrics};

cnvkit.py breaks {output.cnr} {output.cns} \
| cut -f1 | sort -u > {output.gene_breaks};

cnvkit.py export vcf {output.cns} \
--cnr {output.cnr} \
-o {params.cnv_dir}/{params.tumor_name}.vcf \
--sample-id TUMOR;

bgzip -f {params.cnv_dir}/{params.tumor_name}.vcf;

tabix -p vcf -f {params.cnv_dir}/{params.tumor_name}.vcf.gz;

bcftools sort \
-o {output.vcf} \
--temp-dir {params.tmpdir} \
-O z {params.cnv_dir}/{params.tumor_name}.vcf.gz; 

tabix -p vcf -f {output.vcf};

echo -e \"TUMOR\\tTUMOR\" > {output.namemap}; 
rm -rf {params.tmpdir};

      """
