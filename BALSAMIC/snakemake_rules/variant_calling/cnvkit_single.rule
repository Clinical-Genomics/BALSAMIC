# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


rule cnvkit_single:
    input:
        access_bed = config["reference"]["access_regions"],
        bamT = bam_dir  + "tumor.merged.bam",
        baits_bed = config["panel"]["capture_kit"],
        fasta = config["reference"]["reference_genome"],
        refflat = config["reference"]["refflat"],
        snv_vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnhaplotyper.vcf.gz"
    output:
        cns = cnv_dir + "tumor.merged" + ".cns",
        cnr = cnv_dir + "tumor.merged" + ".cnr",
        diagram = cnv_dir + "tumor.merged" + "-diagram.pdf", 
        gene_breaks = cnv_dir + config["analysis"]["case_id"] + ".gene_breaks",
        gene_metrics = cnv_dir + config["analysis"]["case_id"] + ".gene_metrics",
        scatter = cnv_dir + "tumor.merged" + "-scatter.pdf",
        namemap = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.sample_name_map"),
        vcf = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.vcf.gz"
    benchmark:
        Path(benchmark_dir, 'cnvkit_single_' + config["analysis"]["case_id"] + ".cnvkit_single.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("cnvkit") + ".sif").as_posix() 
    threads: 
        get_threads(cluster_config, "cnvkit_single")
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "cnv"},
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor_name = "tumor.merged",
        purecn_dir = cnv_dir + "PureCN",
        cnv_dir = cnv_dir,
        min_mapq= params.common.min_mapq,
        case_name = config["analysis"]["case_id"],
        sample_id = "tumor",
        genome_version = config["reference"]["reference_genome"].split('/')[-3]
    message:
        ("Run CNVkit pipeline for sample {params.case_name},"
        "while tumor purity/ploidy calculated using PureCN")
    shell:
      """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export PURECN='/opt/conda/envs/varcall_cnvkit/lib/R/library/PureCN/extdata/PureCN.R'

# create target and anti-target bed files
cnvkit.py target {input.baits_bed} \
--annotate {input.refflat} \
--split \
--output {params.cnv_dir}/targets.bed;

cnvkit.py antitarget {input.baits_bed} \
--access {input.access_bed} \
--output {params.cnv_dir}/antitarget_bed;

# calculate coverage in the given regions from BAM read depths
cnvkit.py coverage {input.bamT} \
{params.cnv_dir}/targets.bed \
--min-mapq {params.min_mapq} \
--processes {threads} \
--output {params.cnv_dir}/tumor.targetcoverage.cnn;

cnvkit.py coverage {input.bamT} \
{params.cnv_dir}/antitarget_bed \
--min-mapq {params.min_mapq} \
--processes {threads} \
--output {params.cnv_dir}/tumor.antitargetcoverage.cnn;

# Compile a coverage reference from the given list of files
cnvkit.py reference --output {params.cnv_dir}/FlatReference.cnn \
--fasta {input.fasta} \
--targets {params.cnv_dir}/targets.bed \
--antitargets {params.cnv_dir}/antitarget_bed;

# Combine the uncorrected target and antitarget coverage tables (.cnn) and 
# correct for biases in regional coverage and GC content, according to the given reference
cnvkit.py fix {params.cnv_dir}/tumor.targetcoverage.cnn \
{params.cnv_dir}/tumor.antitargetcoverage.cnn \
{params.cnv_dir}/FlatReference.cnn \
--output {output.cnr};

# Infer copy number segments from the given coverage table 
# segmentattion methods (-m): cbs: reccommended for mid-size target panels and exomes
# drop bins with 0  read depth and bins whose log2 values deviating from avg
cnvkit.py segment {output.cnr} \
--output {params.cnv_dir}/tumor.initial.cns \
--method cbs \
--drop-low-coverage \
--processes {threads};

# Convert copy number segments (.cns) to standard SEG format to be used in PureCN
cnvkit.py export seg {params.cnv_dir}/tumor.initial.cns \
--output {params.cnv_dir}/tumor.seg;

# Run PureCN to estimate tumor-purity and ploidy
mkdir -p {params.purecn_dir}

if (Rscript $PURECN \
--out {params.purecn_dir} \
--sampleid {params.sample_id} \
--tumor {output.cnr} \
--segfile {params.cnv_dir}/tumor.seg \
--vcf  {input.snv_vcf} \
--genome {params.genome_version} \
--funsegmentation Hclust \
--force --postoptimize \
--seed 124); then 

purity=$(awk -F\\, 'NR>1 {{print $2}}' {params.purecn_dir}/{params.sample_id}.csv)
ploidy=$(awk -F\\, 'NR>1 {{printf int($3)}}' {params.purecn_dir}/{params.sample_id}.csv)
gender=$(awk -F\\, 'NR>1 {{print $4}}' {params.purecn_dir}/{params.sample_id}.csv | tr '[:upper:]' '[:lower:]' | tr -d \\")
if $gender="?"; then gender="x"; fi

else gender="male"; purity="0.02"; ploidy=2; fi

# Call copy number variants from segmented log2 ratios
cnvkit.py call {params.cnv_dir}/tumor.initial.cns \
--vcf {input.snv_vcf} \
--sample-sex $gender \
--method clonal \
--purity $purity \
--ploidy $ploidy \
--output {output.cns};

# Plot bin-level log2 coverages and segmentation calls
cnvkit.py scatter {output.cnr} \
--segment {output.cns} \
--output {output.scatter};

# Draw copy number (.cnr or .cns) on chromosomes as an ideogram
cnvkit.py diagram {output.cnr} \
--segment  {output.cns} \
--output {output.diagram};

# Identify targeted genes with copy number gain or loss 
cnvkit.py genemetrics {output.cnr} \
--segment {output.cns} \
--drop-low-coverage  \
--sample-sex $gender \
--output {output.gene_metrics};

# List the genenames that contain a possibe copy number breakpoint.
cnvkit.py breaks {output.cnr} {output.cns} \
| cut -f1 | sort -u > {output.gene_breaks};

# Convert segments to a vcf file
cnvkit.py export vcf {output.cns} \
--cnr {output.cnr} \
--output {params.cnv_dir}/{params.tumor_name}.vcf \
--sample-sex $gender \
--sample-id {params.sample_id};

bgzip -f {params.cnv_dir}/{params.tumor_name}.vcf;

tabix -p vcf -f {params.cnv_dir}/{params.tumor_name}.vcf.gz;

bcftools sort \
-o {output.vcf} \
--temp-dir {params.tmpdir} \
-O z {params.cnv_dir}/{params.tumor_name}.vcf.gz; 

tabix -p vcf -f {output.vcf};

echo -e \"TUMOR\\tTUMOR\" > {output.namemap}; 

rm -rf {params.tmpdir};
      """
