# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

from BALSAMIC.utils.rule import get_conda_env, get_chrom
from BALSAMIC import __version__ as bv

fasta = config["reference"]["reference_genome"]
refflat = config["reference"]["refflat"]
wgs_calling_interval = config["reference"]["wgs_calling_interval"]
case_id = config["analysis"]["case_id"]

if config["analysis"]["sequencing_type"] == 'wgs':
    tumor_bam = "{tumor}.dedup.realign".format(tumor = get_sample_type(config["samples"], "tumor")[0])
    cnvkit_params = " --method wgs "
else:
    tumor_bam = "tumor.merged"
    cnvkit_params = " --drop-low-coverage --method hybrid "

rule cnvkit_single:
    input:
        fasta = fasta, 
        refflat = refflat, 
        wgs_calling_interval = wgs_calling_interval, 
        bamT = bam_dir + tumor_bam + ".bam", 
    output:
        vcf = vcf_dir + "CNV.somatic." + case_id + ".cnvkit.vcf.gz",
        namemap = vcf_dir + "CNV.somatic." + case_id + ".cnvkit.sample_name_map",
        tumor_cns = cnv_dir + tumor_bam + ".cns",
        tumor_cnr = cnv_dir + tumor_bam + ".cnr",
        tumor_scatter = cnv_dir + tumor_bam + "-scatter.png",
        tumor_diagram = cnv_dir + tumor_bam + "-diagram.pdf",
        gene_breaks_csv = cnv_dir + case_id + ".gene_breaks.csv",
        gene_metrics_csv = cnv_dir + case_id + ".gene_metrics.csv",
    params:
        extra = cnvkit_params,
        refcnn = cnv_dir + "FlatReference.cnn",
        target = config["panel"]["capture_kit"] if "panel" in config else "None", 
        name = case_id,
        tumor_name = tumor_bam,
        cnv_dir = cnv_dir,
        conda = get_conda_env(config["conda_env_yaml"], "cnvkit"),
    singularity: singularity_image
    benchmark:
        benchmark_dir + 'cnvkit_single_' + case_id + ".cnvkit_single.tsv"
    shell:
        "source activate {params.conda}; "
        "if [ {params.target} != None ]; then "
        "cnvkit.py target {params.target} --annotate {input.refflat} --split -o {params.cnv_dir}/targets.bed; "
        "cnvkit.py reference -o {params.refcnn} -f {input.fasta} -t {params.cnv_dir}/targets.bed; "
        "else "
        "cnvkit.py reference -o {params.refcnn} -f {input.fasta} -t {input.wgs_calling_interval}; " 
        "fi; "
        "cnvkit.py batch {input.bamT} "
            "{params.extra} "
            " --reference {params.refcnn} "
            " --scatter --diagram "
            " --output-dir {params.cnv_dir}; "
        "cnvkit.py genemetrics {output.tumor_cnr} "
            "-s {output.tumor_cns}"
            "--drop-low-coverage -y "
            "--output {output.gene_metrics_csv}; "
        "cnvkit.py breaks {output.tumor_cnr} {output.tumor_cns} "
            "| cut -f1 | sort -u > {output.gene_breaks_csv}; "
        "cnvkit.py export vcf {output.tumor_cns} --cnr {output.tumor_cnr} "
            "-o {params.cnv_dir}/{params.tumor_name}.vcf --sample-id TUMOR; "
        "bgzip -f {params.cnv_dir}/{params.tumor_name}.vcf; "
        "tabix -p vcf -f {params.cnv_dir}/{params.tumor_name}.vcf.gz; "
        "bcftools sort -o {output.vcf} -O z {params.cnv_dir}/{params.tumor_name}.vcf.gz; " 
        "tabix -p vcf -f {output.vcf}; "
        "echo -e \"TUMOR\\tTUMOR\" > {output.namemap}; " 
