

if config["analysis"]["sequencing_type"] == 'wgs' and config["analysis"]["analysis_type"] == 'single':
    rule bcftools_quality_filter_tnscope_tumor_only_wgs:
      input:
        vcf_snv = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.vcf.gz",
        wgs_calling_file = config["reference"]["wgs_calling_regions"],
      output:
        vcf_filtered = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.research.pre_process.vcf",
      benchmark:
        Path(benchmark_dir, 'bcftools_quality_filter_tnscope_tumor_only_' + config["analysis"]["case_id"] + ".tsv").as_posix()
      singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
      params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        DP = get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_dp"),
        AD = get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_ad"),
        AF_min = get_tag_and_filtername(snv_quality_filters, "balsamic_low_af"),
        strand_reads = get_tag_and_filtername(snv_quality_filters, "balsamic_low_strand_read_counts"),
        qss = get_tag_and_filtername(snv_quality_filters, "balsamic_low_quality_scores"),
        sor = get_tag_and_filtername(snv_quality_filters, "balsamic_high_strand_oddsratio"),
        hard_filters = WgsSNVFilters.get_bcftools_filter_string(category="quality", analysis_type=analysis_type, variant_caller=BioinfoTools.TNSCOPE, soft_filter_normals=soft_filter_normal),
        case_name = config["analysis"]["case_id"],
      threads:
        get_threads(cluster_config, 'bcftools_quality_filter_tnscope_tumor_only')
      message:
        "Quality filtering WGS tumor-only tnscope variants using bcftools for {params.case_name}"
      shell:
          """
export TMPDIR={params.tmpdir};

grep -v '^@' {input.wgs_calling_file} > {input.wgs_calling_file}.bed

bcftools view --threads {threads} --regions-file {input.wgs_calling_file}.bed {input.vcf_snv} \
| bcftools filter --threads {threads} --include 'SUM(FORMAT/AD[0:0]+FORMAT/AD[0:1]) >= {params.DP[0]}' --soft-filter '{params.DP[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'FORMAT/AD[0:1] > {params.AD[0]}' --soft-filter '{params.AD[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'FORMAT/AF > {params.AF_min[0]}' --soft-filter '{params.AF_min[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'SUM(FORMAT/QSS)/SUM(FORMAT/AD) >= {params.qss[0]}' --soft-filter '{params.qss[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'FORMAT/ALT_F1R2 > {params.strand_reads[0]} && (FORMAT/ALT_F1R2 > 0  && FORMAT/ALT_F2R1 > {params.strand_reads[0]} &&  FORMAT/REF_F1R2 > {params.strand_reads[0]} && FORMAT/REF_F2R1 > {params.strand_reads[0]})' --soft-filter '{params.strand_reads[1]}' --mode '+' \
| bcftools filter --threads {threads} --include "INFO/SOR < {params.sor[0]}" --soft-filter '{params.sor[1]}' --mode '+' \
| bcftools view --exclude '{params.hard_filters}' -o {output.vcf_filtered};

rm -rf {params.tmpdir};
          """

elif config["analysis"]["sequencing_type"] == 'wgs' and config["analysis"]["analysis_type"] == 'paired':
    rule bcftools_quality_filter_tnscope_tumor_normal_wgs:
      input:
        vcf_snv = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.vcf.gz",
        wgs_calling_file = config["reference"]["wgs_calling_regions"],
      output:
        vcf_filtered = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.research.pre_process.vcf",
      benchmark:
        Path(benchmark_dir, 'bcftools_quality_filter_tnscope_tumor_normal_' + config["analysis"]["case_id"] + ".tsv").as_posix()
      singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
      params:
        AD = get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_ad"),
        DP = get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_dp"),
        AF_min = get_tag_and_filtername(snv_quality_filters, "balsamic_low_af"),
        sor = get_tag_and_filtername(snv_quality_filters,"balsamic_high_strand_oddsratio"),
        in_normal = get_tag_and_filtername(snv_quality_filters, "in_normal"),
        hard_filters = WgsSNVFilters.get_bcftools_filter_string(category="quality", analysis_type=analysis_type, variant_caller=BioinfoTools.TNSCOPE, soft_filter_normals=soft_filter_normal),
        case_name = config["analysis"]["case_id"],
      threads:
        get_threads(cluster_config, 'bcftools_quality_filter_tnscope_tumor_normal')
      message:
        "Quality filtering WGS tumor-normal tnscope variants using bcftools for {params.case_name}"
      shell:
          """
bcftools view {input.vcf_snv} \
| bcftools filter --threads {threads} --include 'SUM(FORMAT/AD[0:0]+FORMAT/AD[0:1]) >= {params.DP[0]} || SUM(FORMAT/AD[1:0]+FORMAT/AD[1:1]) >= {params.DP[0]}' --soft-filter '{params.DP[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'FORMAT/AD[0:1] >= {params.AD[0]}' --soft-filter '{params.AD[1]}' --mode '+' \
| bcftools filter --threads {threads} --include 'FORMAT/AF[0] >= {params.AF_min[0]}' --soft-filter '{params.AF_min[1]}' --mode '+' \
| bcftools filter --threads {threads} --include "INFO/SOR < {params.sor[0]}" --soft-filter '{params.sor[1]}' --mode '+' \
| bcftools annotate -x FILTER/alt_allele_in_normal \
| bcftools filter --threads {threads} --exclude 'sum(FORMAT/AF[1])/sum(FORMAT/AF[0])>{params.in_normal[0]}' --soft-filter '{params.in_normal[1]}' --mode '+' \
| bcftools view --exclude '{params.hard_filters}' -o {output.vcf_filtered}; 

          """

if config["analysis"]["sequencing_type"] == 'targeted' and config["analysis"]["analysis_type"] == 'single':

  rule bcftools_quality_filter_tnscope_tumor_only_tga:
    input:
      vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.vcf.gz",
    output:
      vcf_filtered = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.research.pre_process.vcf.gz",
    benchmark:
      Path(benchmark_dir,'bcftools_quality_filter_vardict_tumor_only_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
      Path(singularity_image,config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
      AD=get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_ad"),
      DP=get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_dp"),
      AF_min=get_tag_and_filtername(snv_quality_filters, "balsamic_low_af"),
      qss=get_tag_and_filtername(snv_quality_filters, "balsamic_low_quality_scores"),
      sor=get_tag_and_filtername(snv_quality_filters, "balsamic_high_strand_oddsratio"),
      rpa=get_tag_and_filtername(snv_quality_filters,"balsamic_high_tnscope_rpa"),
      hard_filters=TgaSNVFilters.get_bcftools_filter_string(category="quality", analysis_type=analysis_type, variant_caller=BioinfoTools.TNSCOPE, soft_filter_normals=soft_filter_normal, exome=exome),
      case_name=config["analysis"]["case_id"],
    threads:
      get_threads(cluster_config,'bcftools_quality_filter_vardict_tumor_only')
    message:
      "Quality filtering vardict tumor-only annotated variants using bcftools for {params.case_name}"
    shell:
      """
    bcftools view {input.vcf} \
    | bcftools filter --include 'SUM(FORMAT/AD[0:0]+FORMAT/AD[0:1]) >= {params.DP[0]}' --soft-filter '{params.DP[1]}' --mode '+' \
    | bcftools filter --include 'FORMAT/AD[0:1] >= {params.AD[0]}' --soft-filter '{params.AD[1]}' --mode '+' \
    | bcftools filter --threads {threads} --include 'SUM(FORMAT/QSS)/SUM(FORMAT/AD) >= {params.qss[0]}' --soft-filter '{params.qss[1]}' --mode '+' \
    | bcftools filter --threads {threads} --include "INFO/SOR < {params.sor[0]}" --soft-filter '{params.sor[1]}' --mode '+' \
    | bcftools filter --threads {threads} --exclude "INFO/RPA > {params.rpa[0]}" --soft-filter '{params.rpa[1]}' --mode + \
    | bcftools filter --include 'FORMAT/AF[0] >= {params.AF_min[0]}' --soft-filter '{params.AF_min[1]}' --mode '+' \
    | bcftools view --exclude '{params.hard_filters}' -o {output.vcf_filtered} -O z;
    
    tabix -p vcf -f {output.vcf_filtered};
      """

  rule bcftools_quality_filter_vardict_tumor_only:
    input:
      vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz",
    output:
      vcf_filtered=vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.research.vcf.gz",
    benchmark:
      Path(benchmark_dir,'bcftools_quality_filter_vardict_tumor_only_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
      Path(singularity_image,config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
      MQ=get_tag_and_filtername(snv_quality_filters, "balsamic_low_mq"),
      AD=get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_ad"),
      DP=get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_dp"),
      AF_min=get_tag_and_filtername(snv_quality_filters, "balsamic_low_af"),
      hard_filters=TgaSNVFilters.get_bcftools_filter_string(category="quality", analysis_type=analysis_type, variant_caller=BioinfoTools.VARDICT, soft_filter_normals=soft_filter_normal, exome=exome),
      case_name=config["analysis"]["case_id"],
    threads:
      get_threads(cluster_config,'bcftools_quality_filter_vardict_tumor_only')
    message:
      "Quality filtering vardict tumor-only annotated variants using bcftools for {params.case_name}"
    shell:
      """
    bcftools view -f PASS {input.vcf} | \
    bcftools filter --include 'INFO/MQ >= {params.MQ[0]}' --soft-filter '{params.MQ[1]}' --mode '+' | \
    bcftools filter --include 'INFO/DP >= {params.DP[0]}' --soft-filter '{params.DP[1]}' --mode '+' | \
    bcftools filter --include 'INFO/VD >= {params.AD[0]}' --soft-filter '{params.AD[1]}' --mode '+' | \
    bcftools filter --include 'INFO/AF >= {params.AF_min[0]}' --soft-filter '{params.AF_min[1]}' --mode '+' | \
    bcftools view --exclude '{params.hard_filters}' -o {output.vcf_filtered} -O z;
      
    tabix -p vcf -f {output.vcf_filtered};
      """


elif config["analysis"]["sequencing_type"] == 'targeted' and config["analysis"]["analysis_type"] == 'paired':

  rule bcftools_quality_filter_tnscope_tumor_normal_tga:
    input:
      vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.vcf.gz",
    output:
      vcf_filtered = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.research.pre_process.vcf.gz",
    benchmark:
      Path(benchmark_dir,'bcftools_quality_filter_vardict_tumor_normal_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
      Path(singularity_image,config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
      AD = get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_ad"),
      DP = get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_dp"),
      AF_min = get_tag_and_filtername(snv_quality_filters, "balsamic_low_af"),
      sor = get_tag_and_filtername(snv_quality_filters,"balsamic_high_strand_oddsratio"),
      rpa = get_tag_and_filtername(snv_quality_filters,"balsamic_high_tnscope_rpa"),
      in_normal = get_tag_and_filtername(snv_quality_filters, "in_normal"),
      hard_filters = TgaSNVFilters.get_bcftools_filter_string(category="quality", analysis_type=analysis_type, variant_caller=BioinfoTools.TNSCOPE, soft_filter_normals=soft_filter_normal, exome=exome),
      case_name = config["analysis"]["case_id"],
    threads:
      get_threads(cluster_config,'bcftools_quality_filter_vardict_tumor_normal')
    message:
      "Quality filtering vardict tumor-normal variants using bcftools for {params.case_name} "
    shell:
      """
    bcftools view {input.vcf} \
    | bcftools annotate -x FILTER/alt_allele_in_normal \
    | bcftools filter --threads {threads} --exclude 'sum(FORMAT/AF[1])/sum(FORMAT/AF[0])>{params.in_normal[0]}' --soft-filter '{params.in_normal[1]}' --mode '+' \
    | bcftools filter --threads {threads} --include 'SUM(FORMAT/AD[0:0]+FORMAT/AD[0:1]) >= {params.DP[0]} || SUM(FORMAT/AD[1:0]+FORMAT/AD[1:1]) >= {params.DP[0]}' --soft-filter '{params.DP[1]}' --mode '+' \
    | bcftools filter --threads {threads} --include "INFO/SOR < {params.sor[0]}" --soft-filter '{params.sor[1]}' --mode '+' \
    | bcftools filter --threads {threads} --exclude "INFO/RPA > {params.rpa[0]}" --soft-filter '{params.rpa[1]}' --mode + \
    | bcftools filter --threads {threads} --include 'FORMAT/AD[0:1] >= {params.AD[0]}' --soft-filter '{params.AD[1]}' --mode '+' \
    | bcftools filter --threads {threads} --include 'FORMAT/AF[0] >= {params.AF_min[0]}' --soft-filter '{params.AF_min[1]}' --mode '+' \
    | bcftools view --exclude '{params.hard_filters}' -o {output.vcf_filtered} -O z;
    
    tabix -p vcf -f {output.vcf_filtered};
      """

  rule bcftools_quality_filter_vardict_tumor_normal:
    input:
      vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz",
    output:
      vcf_filtered = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.research.vcf.gz",
    benchmark:
      Path(benchmark_dir,'bcftools_quality_filter_vardict_tumor_normal_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
      Path(singularity_image,config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
      MQ=get_tag_and_filtername(snv_quality_filters, "balsamic_low_mq"),
      AD=get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_ad"),
      DP=get_tag_and_filtername(snv_quality_filters, "balsamic_low_tumor_dp"),
      AF_min=get_tag_and_filtername(snv_quality_filters, "balsamic_low_af"),
      in_normal=get_tag_and_filtername(snv_quality_filters,"in_normal"),
      hard_filters=TgaSNVFilters.get_bcftools_filter_string(category="quality", analysis_type=analysis_type, variant_caller=BioinfoTools.VARDICT, soft_filter_normals=soft_filter_normal, exome=exome),
      case_name=config["analysis"]["case_id"],
    threads:
      get_threads(cluster_config,'bcftools_quality_filter_vardict_tumor_normal')
    message:
      "Quality filtering vardict tumor-normal variants using bcftools for {params.case_name} "
    shell:
      """
    bcftools view {input.vcf} | \
    bcftools annotate -x FILTER/MAF0.05 | \
    bcftools filter --include 'SMPL_MIN(FMT/MQ) >= {params.MQ[0]}' --soft-filter '{params.MQ[1]}' --mode + | \
    bcftools filter --threads {threads} --exclude 'sum(FORMAT/AF[1:0])/sum(FORMAT/AF[0:0])>{params.in_normal[0]}' --soft-filter '{params.in_normal[1]}' --mode '+' | \
    bcftools filter --include 'INFO/DP >= {params.DP[0]}' --soft-filter '{params.DP[1]}' --mode '+' | \
    bcftools filter --include 'INFO/VD >= {params.AD[0]}' --soft-filter '{params.AD[1]}' --mode '+' | \
    bcftools filter --include 'INFO/AF >= {params.AF_min[0]}' --soft-filter '{params.AF_min[1]}' --mode '+' | \
    bcftools view --exclude '{params.hard_filters}' -o {output.vcf_filtered} -O z;
    
    tabix -p vcf -f {output.vcf_filtered};
      """


if config_model.analysis.analysis_workflow == AnalysisWorkflow.BALSAMIC_UMI and config["analysis"]["analysis_type"] == 'paired':
  rule bcftools_quality_filter_TNscope_umi_tumor_normal:
    input:
      vcf = vcf_dir + "sentieon_tnscope/SNV.somatic." + config["analysis"]["case_id"] + ".tnscope_umi.post_process.vcf.gz",
    output:
      vcf_filtered = vcf_dir +  "SNV.somatic."+ config["analysis"]["case_id"] + ".tnscope_umi.research.vcf.gz",
    benchmark:
      Path(benchmark_dir,'bcftools_quality_filter_TNscope_umi_tumor_normal' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
      Path(singularity_image,config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
      case_name = config["analysis"]["case_id"],
      in_normal=get_tag_and_filtername(umi_snv_quality_filters,"in_normal"),
      hard_filters=TgaUmiSNVFilters.get_bcftools_filter_string(category="quality", analysis_type=analysis_type, variant_caller=BioinfoTools.TNSCOPE, soft_filter_normals=soft_filter_normal),
    threads:
      get_threads(cluster_config,'bcftools_quality_filter_TNscope_umi_tumor_normal')
    message:
      "Quality filtering TNscope_umi tumor-normal annotated variants using bcftools for {params.case_name} "
    shell:
      """
    bcftools view {input.vcf} \
    | bcftools annotate -x FILTER/alt_allele_in_normal \
    | bcftools filter --threads {threads} --exclude 'sum(FORMAT/AF[1])/sum(FORMAT/AF[0])>{params.in_normal[0]}' --soft-filter '{params.in_normal[1]}' --mode '+' \
    | bcftools view --exclude '{params.hard_filters}' -o {output.vcf_filtered} -O z;
    
    tabix -p vcf -f {output.vcf_filtered};
      """

elif config_model.analysis.analysis_workflow == AnalysisWorkflow.BALSAMIC_UMI and config["analysis"]["analysis_type"] == 'single':
  rule bcftools_quality_filter_TNscope_umi_tumor_only:
    input:
      vcf = vcf_dir + "sentieon_tnscope/SNV.somatic." + config["analysis"]["case_id"] + ".tnscope_umi.post_process.vcf.gz",
    output:
      vcf_filtered = vcf_dir +  "SNV.somatic."+ config["analysis"]["case_id"] + ".tnscope_umi.research.vcf.gz"
    benchmark:
      Path(benchmark_dir,'bcftools_quality_filter_TNscope_umi_tumor_only' + config["analysis"][
        "case_id"] + ".tsv").as_posix()
    singularity:
      Path(singularity_image,config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
      hard_filters=TgaUmiSNVFilters.get_bcftools_filter_string(category="quality", analysis_type=analysis_type, variant_caller=BioinfoTools.TNSCOPE, soft_filter_normals=soft_filter_normal),
      case_name=config["analysis"]["case_id"],
    threads:
      get_threads(cluster_config,'bcftools_quality_filter_tnscope_umi_tumor_only')
    message:
      "Quality filtering tnscope_umi tumor-only variants using bcftools for {params.case_name}"
    shell:
      """
    bcftools view {input.vcf} \
    | bcftools view --exclude '{params.hard_filters}' -o {output.vcf_filtered} -O z;

    tabix -p vcf -f {output.vcf_filtered};
      """