# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


rule manta_tumor_only:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample)
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.sample_name_map"
    benchmark:
        benchmark_dir + 'manta_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = config_model.get_sample_name_by_type(SampleType.TUMOR),
        case_name = config["analysis"]["case_id"],
        manta_install_path= "/opt/conda/share/manta-1.6.0-2"
    threads:
        get_threads(cluster_config, "manta_tumor_only")
    message:
        ("Calling structural variants using manta for {params.case_name} and"
        "index the compressed vcf file")
    shell:
      """
samtools_path=$(readlink -f $(which samtools))

configManta.py \
--tumorBam={input.bamT} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};

{params.manta_install_path}/libexec/convertInversion.py \
  $samtools_path \
  {input.fa} \
  {params.tmpdir}/results/variants/tumorSV.vcf.gz > {params.tmpdir}/results/variants/tumorSV_converted.vcf; 

bgzip -l 9 -c {params.tmpdir}/results/variants/tumorSV_converted.vcf > {output.final};

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap}; 

rm -rf {params.tmpdir};
      """

rule delly_sv_tumor_only:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        excl = config["reference"]["delly_exclusion_converted"],
    output:
        bcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        namemap= vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".dellysv.sample_name_map",
    benchmark:
        benchmark_dir + 'delly_sv_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR",
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "delly_tumor_only")
    message:
        ("Calling structural variants using delly for {params.case_name}")
    shell:
        """
delly call -x {input.excl} -o {output.bcf} -g {input.fa} {input.bamT}

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
        """

if config["analysis"]["sequencing_type"] == 'wgs':
    rule delly_cnv_tumor_only:
        input:
            fa = config["reference"]["reference_genome"],
            bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
            bcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
            map = config["reference"]["delly_mappability"],
        output:
            cnv_delly = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
            rd_delly = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.cov.gz",
            namemap= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.sample_name_map",
        benchmark:
            benchmark_dir + 'delly_cnv_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
        singularity:
            Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
        params:
            tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
            housekeeper_id= {"id": config["analysis"]["case_id"],"tags": "clinical"},
            tumor = "TUMOR",
            case_name = config["analysis"]["case_id"]
        threads:
            get_threads(cluster_config, "delly_tumor_only")
        message:
            ("Calling copy number variants using delly for {params.case_name}")
        shell:
            """
delly cnv -m {input.map} -g {input.fa} -c {output.rd_delly} -o {output.cnv_delly} -l {input.bcf} {input.bamT}
    
echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};
    
rm -rf {params.tmpdir};
            """

else:
    rule delly_cnv_tumor_only:
        input:
            fa = config["reference"]["reference_genome"],
            bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
            bcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
            map = config["reference"]["delly_mappability"],
            baits_bed = config["panel"]["capture_kit"],
        output:
            cnv_delly=vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
            rd_delly=vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.cov.gz",
            namemap=vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.sample_name_map",
        benchmark:
            benchmark_dir + 'delly_cnv_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
        singularity:
            Path(singularity_image,config["bioinfo_tools"].get("delly") + ".sif").as_posix()
        params:
            tmpdir=tempfile.mkdtemp(prefix=tmp_dir),
            housekeeper_id={"id": config["analysis"]["case_id"], "tags": "clinical"},
            tumor="TUMOR",
            case_name=config["analysis"]["case_id"]
        threads:
            get_threads(cluster_config,"delly_tumor_only")
        message:
            ("Calling copy number variants using delly for {params.case_name}")
        shell:
            """
delly cnv  -i 10000 -m {input.map} -g {input.fa} -b {input.baits_bed} \
-c {output.rd_delly} -o {output.cnv_delly} -l {input.bcf} {input.bamT}

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
            """

rule tiddit_sv_tumor_only:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample)
    output:
        vcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tiddit.vcf.gz",
        cov_tumor_tiddit = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tumor.tiddit_cov.bed",
        namemap= vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tiddit.sample_name_map",
    benchmark:
        benchmark_dir + 'tiddit_sv_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("tiddit") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        housekeeper_id= {"id": config["analysis"]["case_id"],"tags": "clinical"},
        tumor = "TUMOR",
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "tiddit_sv_tumor_only")
    message:
        ("Calling structural variants using tiddit for {params.case_name}")
    shell:
        """
tiddit --cov -z 500 --ref {input.fa} --bam {input.bamT} -o {params.tmpdir}/{params.tumor}_cov &

tiddit --sv -p 6 -r 6 -z 1000 --ref {input.fa} --bam {input.bamT} -o {params.tmpdir}/{params.tumor};

grep -E "#|PASS" {params.tmpdir}/{params.tumor}.vcf | bgzip -l 9 -c > {output.vcf};

tabix -p vcf -f {output.vcf};

cp {params.tmpdir}/{params.tumor}_cov.bed {output.cov_tumor_tiddit};

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule cnvpytor_tumor_only:
    input:
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        vcfT = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.vcf.gz",
    output:
        cnv_cnvpytor = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvpytor.vcf.gz",
        circular_cnvpytor = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvpytor.circular.png",
        scattter_cnvpytor = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvpytor.scatter.png",
        namemap= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvpytor.sample_name_map",
    benchmark:
        benchmark_dir + 'cnvpytor_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("cnvpytor") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        housekeeper_id= {"id": config["analysis"]["case_id"],"tags": "clinical"},
        tumor = "TUMOR",
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "cnvpytor_tumor_only")
    message:
        ("Calling copy number variants using cnvpytor for {params.case_name}")
    shell:
        """
export tumor={params.tumor};

export tumor_file={params.tmpdir}/$tumor

cnvpytor --max_cores {threads} -root {params.tmpdir}/{params.tumor}.pytor -rd {input.bamT};

cnvpytor --max_cores {threads} -root {params.tmpdir}/{params.tumor}.pytor -his 1000 10000 100000;

cnvpytor --max_cores {threads} -root {params.tmpdir}/{params.tumor}.pytor  -partition 1000 10000 100000;

cnvpytor --max_cores {threads} -root {params.tmpdir}/{params.tumor}.pytor -snp {input.vcfT} -sample {params.tumor};

cnvpytor --max_cores {threads} -root {params.tmpdir}/{params.tumor}.pytor -mask_snps;

cnvpytor --max_cores {threads} -root {params.tmpdir}/{params.tumor}.pytor -baf 10000 100000;

cnvpytor --max_cores {threads} -root {params.tmpdir}/{params.tumor}.pytor -call 1000 10000 100000 1> {params.tmpdir}/{params.tumor}.call

echo -e \"set print_filename $tumor_file.vcf\\n\
set Q0_range -1 0.5\\nset p_range 0 0.0001\\n\
set p_N 0 0.5\\nprint calls\" > {params.tmpdir}/{params.tumor}.out.sh;

echo -e \"set rd_use_mask\\nset markersize 1\\nset grid vertical\\n\
set output_filename $tumor_file.png\\nmanhattan\\ncircular\" > {params.tmpdir}/{params.tumor}.plot.sh;

cnvpytor -root {params.tmpdir}/{params.tumor}.pytor \
-view 100000 < {params.tmpdir}/{params.tumor}.plot.sh;

for binsize in 1000 10000 100000; do cnvpytor -root {params.tmpdir}/{params.tumor}.pytor \
-view $binsize < {params.tmpdir}/{params.tumor}.out.sh;done;

cp {params.tmpdir}/{params.tumor}.global.0000.png {output.scattter_cnvpytor};

cp {params.tmpdir}/{params.tumor}.circular.0001.png {output.circular_cnvpytor};

bgzip -c -l 9 {params.tmpdir}/{params.tumor}.vcf > {output.cnv_cnvpytor};

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
        """


rule bcftools_process_SV_CNV:
    input:
        delly_sv = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        delly_cnv = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
    output:
        delly_sv = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".dellysv.vcf.gz",
        cnv = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".tmpdellyCNV.vcf.gz"),
        delly_cnv= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.vcf.gz",
    benchmark:
        Path(benchmark_dir, 'bcftools_process_SV_CNV_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
        case_name = config["analysis"]["case_id"],
        process_cnv = get_script_path("process_CNV.py"),
    threads:
        get_threads(cluster_config, "bcftools_process_SV_CNV")
    message:
        ("Converting BCF from delly to VCF for {params.case_name}")
    shell:
        """
bcftools view  --threads {threads} -f PASS -O z -o {output.delly_sv} {input.delly_sv};

bcftools view --threads {threads} -f PASS -O z -o {output.cnv} {input.delly_cnv};

python {params.process_cnv} -f {output.cnv} -c delly | bgzip -l 9 -c > {output.delly_cnv};

tabix -p vcf -f {output.delly_sv};

tabix -p vcf -f {output.delly_cnv};
        """

rule svdb_merge_tumor_only:
    input:
        vcf = expand(
                vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".{caller}.vcf.gz",
                caller=somatic_caller_sv) +
              expand(
                vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".{caller}.vcf.gz",
                caller=somatic_caller_cnv)
    output:
        vcf_svdb = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'svdb_merge_tumor_only_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("svdb") + ".sif").as_posix()
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
        tumor = config_model.get_sample_name_by_type(SampleType.TUMOR),
        case_name = config["analysis"]["case_id"],
        vcf= lambda wildcards, input:[input[index] + ":" + svdb_callers_prio[index] for index in range(0,len(input))],
        svdb_priority= ",".join(svdb_callers_prio)
    threads:
        get_threads(cluster_config, "svdb_merge_tumor_only")
    message:
        "Merging structural and copy number variants using SVDB for {params.case_name}"
    shell:
        """
svdb --merge --no_intra --bnd_distance 5000 --overlap 0.80 \
--vcf {params.vcf} \
--priority {params.svdb_priority} | \
bgzip -l 9 -c > {output.vcf_svdb};
tabix -p vcf -f {output.vcf_svdb};

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};
        """
