# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

tumor_bam = "tumor.merged.bam"

rule manta_tumor_only:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = bam_dir + tumor_bam
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.sample_name_map"
    benchmark:
        benchmark_dir + 'manta_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = get_sample_type(config["samples"], "tumor"),
        case_name = config["analysis"]["case_id"],
        manta_install_path= "/opt/conda/share/manta-1.6.0-1"
    threads:
        get_threads(cluster_config, "manta_tumor_only")
    message:
        ("Calling structural variants using manta for {params.case_name} and"
        "index the compressed vcf file")
    shell:
      """
samtools_path=$(readlink -f $(which samtools))

configManta.py \
--tumorBam={input.bamT} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};

{params.manta_install_path}/libexec/convertInversion.py \
  $samtools_path \
  {input.fa} \
  {params.tmpdir}/results/variants/tumorSV.vcf.gz > {params.tmpdir}/results/variants/tumorSV_converted.vcf; 

bgzip -l 9 -c {params.tmpdir}/results/variants/tumorSV_converted.vcf > {output.final};

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap}; 

rm -rf {params.tmpdir};
      """

rule delly_sv_tumor_only:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = bam_dir + tumor_bam,
        excl = config["reference"]["delly_exclusion_converted"],
    output:
        bcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        namemap= vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".dellysv.sample_name_map",
    benchmark:
        benchmark_dir + 'delly_sv_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = "TUMOR",
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "delly_tumor_only")
    message:
        ("Calling structural variants using delly for {params.case_name}")
    shell:
        """
delly call -x {input.excl} -o {output.bcf} -g {input.fa} {input.bamT}

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule delly_cnv_tumor_only:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = bam_dir + tumor_bam,
        bcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        map = config["reference"]["delly_mappability"],
    output:
        cnv = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        namemap= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.sample_name_map",
    benchmark:
        benchmark_dir + 'delly_cnv_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = "TUMOR",
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "delly_tumor_only")
    message:
        ("Calling copy number variants using delly for {params.case_name}")
    shell:
        """
delly cnv -m {input.map} -g {input.fa} -o {output.cnv} -l {input.bcf} {input.bamT}

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule bcftools_bcf2vcf_delly:
    input:
        bcf_sv = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        bcf_cnv= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
    output:
        vcf_sv = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".dellysv.vcf.gz",
        vcf_cnv= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.vcf.gz",
    benchmark:
        Path(benchmark_dir, 'bcftools_bcf2vcf_delly_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "bcftools_bcf2vcf_delly")
    message:
        ("Converting BCF from delly to VCF for {params.case_name}")
    shell:
        """
bcftools view  --threads {threads} -f PASS -O z -o {output.vcf_sv} {input.bcf_sv};

bcftools view --threads {threads} -f PASS -O z -o {output.vcf_cnv} {input.bcf_cnv}

tabix -p vcf -f {output.vcf_sv};

tabix -p vcf -f {output.vcf_cnv}
        """

rule svdb_merge_tumor_only:
    input:
        vcf = expand(
                vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".{caller}.vcf.gz",
                caller=somatic_caller_sv) +
              expand(
                vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".{caller}.vcf.gz",
                caller=somatic_caller_cnv)
    output:
        svdb_vcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'svdb_merge_tumor_only_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("svdb") + ".sif").as_posix()
    params:
        tumor = get_sample_type(config["samples"], "tumor"),
        case_name = config["analysis"]["case_id"],
        vcf= lambda wildcards, input:[input[index] + ":" + svdb_callers_prio[index] for index in range(0,len(input))],
        svdb_priority= ",".join(svdb_callers_prio)
    threads:
        get_threads(cluster_config, "svdb_merge_tumor_only")
    message:
        "Merging structural and copy number variants using SVDB for {params.case_name}"
    shell:
        """
svdb --merge --no_intra --bnd_distance 5000 --overlap 0.80 \
--vcf {params.vcf} \
--priority {params.svdb_priority} | \
bgzip -l 9 -c > {output.svdb_vcf};
echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};
        """
