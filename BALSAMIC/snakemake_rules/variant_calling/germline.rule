# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule gatk_haplotypecaller:
    input:
        fa = config["reference"]["reference_genome"],
        bam = bam_dir + "{sample_type}.merged.bam",
        bed = vcf_dir + "split_bed/{bedchrom}." + capture_kit,
    output:
        vcf_dir + "haplotypecaller/split_vcf/{sample_type}.{bedchrom}_haplotypecaller.vcf.gz"
    benchmark:
        Path(benchmark_dir,'gatk_haplotypecaller_' + "{sample_type}.{bedchrom}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("gatk") + ".sif").as_posix()
    params:
        conda = config["bioinfo_tools"].get("gatk"),
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sample = '{sample_type}'
    threads:
        get_threads(cluster_config,'gatk_haplotypecaller')
    message:
        ("Calling germline variants using gatk haplotypecaller for"
         "targeted-panel sample {params.sample}")
    shell:
        """
source activate {params.conda};
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

java -jar -Djava.io.tmpdir={params.tmpdir} -Xms8G -Xmx32G $CONDA_PREFIX/opt/gatk-3.8/GenomeAnalysisTK.jar \
-T HaplotypeCaller \
-R {input.fa} \
-I {input.bam} \
-L {input.bed} \
| bgzip > {output}; 

rm -rf {params.tmpdir};
        """


rule haplotypecaller_merge:
    input:
        expand(vcf_dir + "haplotypecaller/split_vcf/{{sample_type}}.{chrom}_haplotypecaller.vcf.gz", chrom=chromlist)
    output:
        vcf_dir + "SNV.germline.{sample_type}.haplotypecaller.vcf.gz"
    benchmark:
        Path(benchmark_dir, 'haplotypecaller_merge_' + "SNV.germline.{sample_type}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("gatk") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix = tmp_dir),
        conda = config["bioinfo_tools"].get("gatk"),
        sample = '{sample_type}'
    message:
        "Concatenate haplotyper outputs of multiple chr vcfs using bcftools for sample {params.sample}"
    shell:
        """
source activate {params.conda};
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

bcftools concat {input} | bcftools sort --temp-dir {params.tmpdir} - | bgzip > {output};
tabix -f -p vcf {output};

rm -rf {params.tmpdir};
        """


rule manta_germline:
    input:
        fa = config["reference"]["reference_genome"],
        bam = bam_dir + "{sample_type}.merged.bam",
    output:
        final = vcf_dir + "SV.germline.{sample_type}.manta_germline.vcf.gz",
    benchmark:
        Path(benchmark_dir, 'manta_germline_' + "{sample_type}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        conda = config["bioinfo_tools"].get("manta"),
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        sample = "{sample_type}"
    threads:
        get_threads(cluster_config,"manta_germline")
    message:
        "Calling germline variants using manta for sample {params.sample}"
    shell:
        """
source activate {params.conda};

configManta.py \
--bam={input.bam} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};

cp {params.tmpdir}/results/variants/diploidSV.vcf.gz {output.final};

tabix -p vcf -f {output.final};

rm -rf {params.tmpdir};
        """

rule sentieon_DNAscope:
    input:
        bam = bam_dir + "{sample_type}.merged.bam",
        ref = config["reference"]["reference_genome"],
        dbsnp = config["reference"]["dbsnp"],
        interval = config["panel"]["capture_kit"]
    output:
        vcf = vcf_dir + "SNV.germline.{sample_type}.dnascope.vcf.gz",
    benchmark:
        Path(benchmark_dir, "sentieon_dnascope_{sample_type}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample = '{sample_type}'
    threads:
        get_threads(cluster_config, 'sentieon_DNAscope')
    message:
        "Calling germline variants using Sentieon DNAscope for sample {params.sample}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver --algo DNAscope \
-t {threads} \
-r {input.ref} \
-i {input.bam} \
--interval {input.interval} \
-d {input.dbsnp} {output.vcf};

rm -rf {params.tmpdir};
        """