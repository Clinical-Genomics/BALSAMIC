# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule haplotypecaller:
    input:
        fa = config["reference"]["reference_genome"],
        bam = bam_dir + "{sample}.sorted." + picarddup  + ".bam",
        bed = vcf_dir + "split_bed/{bedchrom}." + capture_kit,
    output:
        vcf_dir + "haplotypecaller/split_vcf/{sample}.{bedchrom}_haplotypecaller.vcf.gz"
    params:
        conda = config["bioinfo_tools"].get("gatk"),
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
    threads: get_threads(cluster_config, 'haplotypecaller')
    singularity: Path(singularity_image, config["bioinfo_tools"].get("gatk") + ".sif").as_posix() 
    benchmark:
        benchmark_dir + 'haplotypecaller_' + "{sample}.{bedchrom}.haplotypecaller.tsv"
    shell:
        """
source activate {params.conda};
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
java -jar -Djava.io.tmpdir={params.tmpdir} -Xms8G -Xmx32G $CONDA_PREFIX/opt/gatk-3.8/GenomeAnalysisTK.jar \
-T HaplotypeCaller \
-R {input.fa} \
-I {input.bam} \
-L {input.bed} \
| bgzip > {output}; 
rm -rf {params.tmpdir};
        """


rule haplotypecaller_merge:
    input:
        expand(vcf_dir + "haplotypecaller/split_vcf/{{sample}}.{chrom}_haplotypecaller.vcf.gz", chrom=chromlist)
    output:
        vcf_dir + "SNV.germline.{sample}.haplotypecaller.vcf.gz"
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        conda = config["bioinfo_tools"].get("gatk"),
    singularity: Path(singularity_image, config["bioinfo_tools"].get("gatk") + ".sif").as_posix() 
    benchmark:
        benchmark_dir + 'haplotypecaller_merge_' + "SNV.germline.{sample}.haplotypecaller.tsv" 
    shell:
        """
source activate {params.conda};
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
bcftools concat {input} | bcftools sort --temp-dir {params.tmpdir} - | bgzip > {output};
tabix -f -p vcf {output};
rm -rf {params.tmpdir};
        """


rule manta_germline:
    input:
        fa = config["reference"]["reference_genome"],
        bam = bam_dir + "{sample}.sorted." + picarddup  + ".bam",
    output:
        final = vcf_dir + "SV.germline.{sample}.manta_germline.vcf.gz",
    params:
        conda = config["bioinfo_tools"].get("manta"),
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
    threads: get_threads(cluster_config, "manta_germline")
    singularity: Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    benchmark:
        benchmark_dir + 'manta_germline_' + "{sample}.manta_germline.tsv"
    shell:
        """
source activate {params.conda};
configManta.py \
--bam={input.bam} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};
python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};
cp {params.tmpdir}/results/variants/diploidSV.vcf.gz {output.final};
tabix -p vcf -f {output.final};
rm -rf {params.tmpdir};
        """


rule sentieon_DNAscope:
    input:
        bam = bam_dir + "{sample}.sorted." + picarddup + ".bam",
        ref = config["reference"]["reference_genome"],
        dbsnp = config["reference"]["dbsnp"],
        interval = config["panel"]["capture_kit"]
    output:
        vcf = vcf_dir + "SNV.germline.{sample}.dnascope.vcf.gz",
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"]
    threads: get_threads(cluster_config, 'sentieon_DNAscope')
    log: 
        vcf_dir + "{sample}.dnascope.log"
    benchmark:
        benchmark_dir + "{sample}.dnascope.tsv"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver -t {threads} -r {input.ref} -i {input.bam} --interval {input.interval} --algo DNAscope -d {input.dbsnp} {output.vcf}
rm -rf {params.tmpdir};
        """
