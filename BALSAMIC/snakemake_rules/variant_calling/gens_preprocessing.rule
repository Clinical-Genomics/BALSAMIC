# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

if config["analysis"]["sequencing_type"] == 'wgs':
    rule sentieon_DNAscope_gnomad:
        input:
            ref=config["reference"]["reference_genome"],
            gnomad_af5=config["reference"]["gnomad_min_af5"],
            bam=lambda wildcards: config_model.get_final_bam_name(bam_dir=bam_dir,sample_name=wildcards.sample)
        output:
            gnomad_af5_vcf=cnv_dir + "SNV.germline.{sample}.dnascope_gnomad_af5.vcf.gz",
        params:
            tmpdir=tempfile.mkdtemp(prefix=tmp_dir),
            pcr_model=params.common.pcr_model,
            sentieon_exec=config["SENTIEON_EXEC"],
            sentieon_lic=config["SENTIEON_LICENSE"],
            sample="{sample}"
        benchmark:
            Path(benchmark_dir,"sentieon_DNAscope_gnomad_{sample}.tsv").as_posix()
        threads:
            get_threads(cluster_config,"sentieon_DNAscope_gnomad")
        message:
            "Calling germline variants on positions in Gnomad AF > 0.05 using Sentieon DNAscope for {params.sample}"
        shell:
            """
      export TMPDIR={params.tmpdir};
      export SENTIEON_TMPDIR={params.tmpdir};
      export SENTIEON_LICENSE={params.sentieon_lic};
  
      {params.sentieon_exec} driver \
      -t {threads} \
      -r {input.ref} \
      -i {input.bam} \
      --algo DNAscope \
      --pcr_indel_mode {params.pcr_model} \
      --given {input.gnomad_af5} {output.gnomad_af5_vcf};
  
      rm -rf {params.tmpdir};
            """

    rule gatk_denoisereadcounts:
        input:
            gens_pon=config["reference"]["gens_coverage_pon"],
            readcounts_hdf5=cnv_dir + "{sample}.collectreadcounts.hdf5"
        output:
            denoised_cr=cnv_dir + "{sample}.denoisedCR.tsv",
            standardized_cr=cnv_dir + "{sample}.standardizedCR.tsv"
        params:
            tmpdir=tempfile.mkdtemp(prefix=tmp_dir),
            sample="{sample}"
        benchmark:
            Path(benchmark_dir,"gatk_denoisereadcounts_{sample}.tsv").as_posix()
        singularity:
            Path(singularity_image,config["bioinfo_tools"].get("gatk") + ".sif").as_posix()
        threads:
            get_threads(cluster_config,"gatk_denoisereadcounts")
        message:
            "Running GATK DenoiseReadCounts on {params.sample} for GENS."
        shell:
            """
    export TMPDIR={params.tmpdir};  

    gatk --java-options "-Xmx60g" DenoiseReadCounts  \
    -I {input.readcounts_hdf5} \
    --count-panel-of-normals {input.gens_pon} \
    --tmp-dir {params.tmpdir} \
    --standardized-copy-ratios {output.standardized_cr} \
    --denoised-copy-ratios {output.denoised_cr} ;

    rm -rf {params.tmpdir}
            """

    rule gens_preprocessing_wgs:
        input:
            denoised_cr = cnv_dir + "{sample}.denoisedCR.tsv",
            gnomad_af5_vcf = cnv_dir + "SNV.germline.{sample}.dnascope_gnomad_af5.vcf.gz",
        output:
            gens_baf_bed = cnv_dir + "{sample}.baf.bed",
            gens_cov_bed = cnv_dir + "{sample}.cov.bed"
        params:
            gens_preprocessing = get_script_path("preprocess_gens.py"),
            sequencing_type = sequencing_type,
            sample="{sample}"
        benchmark:
            Path(benchmark_dir, "gens_preprocessing_{sample}.tsv").as_posix()
        threads:
            get_threads(cluster_config, "gens_preprocessing")
        message:
            "Formatting output for GENS for sample: {params.sample}."
        shell:
            """
    python {params.gens_preprocessing} -s {params.sequencing_type} -o {output.gens_baf_bed} calculate-bafs --vcf-file-path {input.gnomad_af5_vcf} ;
    python {params.gens_preprocessing} -s {params.sequencing_type} -o {output.gens_cov_bed} create-coverage-regions --normalised-coverage-path {input.denoised_cr}
            """
else:
    rule sentieon_DNAscope_gnomad_tga:
        input:
            bed=config["panel"]["capture_kit"],
            ref=config["reference"]["reference_genome"],
            gnomad_af5=config["reference"]["gnomad_min_af5"],
            bam=lambda wildcards: config_model.get_final_bam_name(bam_dir=bam_dir,sample_name=wildcards.sample)
        output:
            gnomad_af5_vcf=cnv_dir + "SNV.germline.{sample}.dnascope_gnomad_af5.vcf.gz",
        params:
            tmpdir=tempfile.mkdtemp(prefix=tmp_dir),
            pcr_model=params.common.pcr_model,
            sentieon_exec=config["SENTIEON_EXEC"],
            sentieon_lic=config["SENTIEON_LICENSE"],
            sample="{sample}"
        benchmark:
            Path(benchmark_dir,"sentieon_DNAscope_gnomad_{sample}.tsv").as_posix()
        threads:
            get_threads(cluster_config,"sentieon_DNAscope_gnomad")
        message:
            "Calling germline variants on positions in Gnomad AF > 0.05 using Sentieon DNAscope for {params.sample}"
        shell:
            """
      export TMPDIR={params.tmpdir};
      export SENTIEON_TMPDIR={params.tmpdir};
      export SENTIEON_LICENSE={params.sentieon_lic};
  
      {params.sentieon_exec} driver \
      -t {threads} \
      -r {input.ref} \
      -i {input.bam} \
      --interval {input.bed} \
      --interval_padding 20 \
      --algo DNAscope \
      --pcr_indel_mode {params.pcr_model} \
      --given {input.gnomad_af5} {output.gnomad_af5_vcf};
  
      rm -rf {params.tmpdir};
            """

    rule gens_preprocessing_tga:
        input:
            cnvkit_cnr = cnv_dir + "tumor.merged.cnr",
            gnomad_af5_vcf = cnv_dir + "SNV.germline.{sample}.dnascope_gnomad_af5.vcf.gz",
            purecn_purity_csv = cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".purecn.purity.csv",
        output:
            gens_baf_bed = cnv_dir + "{sample}.baf.bed",
            gens_cov_bed = cnv_dir + "{sample}.cov.bed"
        params:
            sequencing_type = sequencing_type,
            gens_preprocessing = get_script_path("preprocess_gens.py"),
            gens_preprocess_cnvkit = get_script_path("postprocess_gens_cnvkit.py"),
            sample="{sample}"
        benchmark:
            Path(benchmark_dir, "gens_preprocessing_{sample}.tsv").as_posix()
        threads:
            get_threads(cluster_config, "gens_preprocessing")
        message:
            "Formatting output for GENS for sample: {params.sample}."
        shell:
            """
    python {params.gens_preprocessing} -s {params.sequencing_type} -o {output.gens_baf_bed} calculate-bafs --vcf-file-path {input.gnomad_af5_vcf} ;
    python {params.gens_preprocess_cnvkit} -o {output.gens_cov_bed} --normalised-coverage-path {input.cnvkit_cnr} --tumor-purity-path {input.purecn_purity_csv} 
            """

rule finalize_gens_outputfiles:
    input:
        gens_input = cnv_dir + "{sample}.{gens_input}.bed"
    output:
        gens_bed = cnv_dir + "{sample}.{gens_input}.bed.gz",
    params:
        sample_id="{sample}",
        gens_input="{gens_input}",
        housekeeper_id= {"id": "{sample}", "tags": "cnv"}
    benchmark:
        Path(benchmark_dir, "finalize_gens_outputfiles_{sample}_{gens_input}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("bgzip") + ".sif").as_posix()
    threads:
        get_threads(cluster_config, "finalize_gens_outputfiles")
    message:
        "Bgzip and index GENS output: {params.gens_input} for sample: {params.sample_id}."
    shell:
        """
bgzip {input.gens_input} ;
tabix {input.gens_input}.gz
        """

