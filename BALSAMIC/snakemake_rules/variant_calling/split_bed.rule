# vim: syntax=python tabstop=4 expandtab
# coding: utf-8



rule bedtools_splitbed_by_chrom:
    input:
        bed = config["panel"]["capture_kit"],
        chrom = config["reference"]["genome_chrom_size"],
        bam = bam_dir + "tumor.merged.bam"
    output:
        bed = expand(vcf_dir + "split_bed/" + "{chrom}." + capture_kit, chrom=chromlist)
    benchmark:
        Path(benchmark_dir, 'bedtools_splitbed_by_chrom.tsv').as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bedtools") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        split_bed_dir = vcf_dir + "split_bed/",
        origin_bed = capture_kit,
    message:
        ("Capturing reference genome chromosome size and splitting the panel bed per chromosome"
         "Extend the region by 100bp on each direction, sort and merge the overlapping intervals using bedtools")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

chromlist=`cut -f 1 {input.bed} | sort -u`;
sed 's/^chr//g;/_/d' {input.chrom} | sort -k1,1 > {params.split_bed_dir}hg19.chrom.sizes;

for c in $chromlist; do \
awk -v C=$c '$1==C' {input.bed} \
| bedtools slop -b 100 -i - -g {params.split_bed_dir}hg19.chrom.sizes \
| sort -k1,1 -k2,2n \
| bedtools merge > {params.split_bed_dir}$c.{params.origin_bed}; done;

unset chromlist; 
readlink -f {input.bam};
        """
