# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

normal_bam = "normal.merged.bam"
tumor_bam = "tumor.merged.bam"

if config["analysis"]["sequencing_type"] == 'wgs':
    normal_bam = "{normal}.dedup.realign.bam".format(normal = get_sample_type(config["samples"], "normal")[0])
    tumor_bam = "{tumor}.dedup.realign.bam".format(tumor = get_sample_type(config["samples"], "tumor")[0])


rule manta_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"],
        bamN = bam_dir + normal_bam, 
        bamT = bam_dir + tumor_bam,
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'manta_tumor_normal_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal"),
        conda = config["bioinfo_tools"].get("manta"),
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "manta_tumor_normal")
    message:
        ("Calling structural variants using manta for {params.case_name} and "
        "index the compressed vcf file")
    shell:
        """
source activate {params.conda};

configManta.py \
--normalBam={input.bamN} \
--tumorBam={input.bamT} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};

cp {params.tmpdir}/results/variants/somaticSV.vcf.gz {output.final};

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule delly_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"],
        bamN = bam_dir + normal_bam,
        bamT = bam_dir + tumor_bam,
        excl = config["reference"]["delly_exclusion_converted"],
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'delly_tumor_normal_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal"),
        conda = config["bioinfo_tools"].get("delly"),
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "delly_tumor_normal")
    message:
        ("Calling structural variants using delly for {params.case_name},"
        "filter somatic variants and finally convert from bcf to compressed vcf file")
    shell:
        """
source activate {params.conda};

delly call -x {input.excl} -o {params.tmpdir}/delly.bcf -g {input.fa} {input.bamT} {input.bamN};

echo -e \"{params.tumor}\\ttumor\\n{params.normal}\\tcontrol\" > {params.tmpdir}/samples.tsv;

delly filter -p -f somatic -o {params.tmpdir}/delly.somatic.bcf -s {params.tmpdir}/samples.tsv {params.tmpdir}/delly.bcf;

bcftools view -O z -o {output.final} {params.tmpdir}/delly.somatic.bcf;

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """
