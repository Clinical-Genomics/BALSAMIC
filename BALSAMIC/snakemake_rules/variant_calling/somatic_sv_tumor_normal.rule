# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

normal_bam = "normal.merged.bam"
tumor_bam = "tumor.merged.bam"

rule manta_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"],
        bamN = bam_dir + normal_bam,
        bamT = bam_dir + tumor_bam,
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'manta_tumor_normal_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal"),
        case_name = config["analysis"]["case_id"],
        manta_install_path = "/opt/conda/share/manta-1.6.0-1"
    threads:
        get_threads(cluster_config, "manta_tumor_normal")
    message:
        ("Calling structural variants using manta for {params.case_name} and "
        "index the compressed vcf file")
    shell:
        """
samtools_path=$(readlink -f $(which samtools))

configManta.py \
--normalBam={input.bamN} \
--tumorBam={input.bamT} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};

{params.manta_install_path}/libexec/convertInversion.py \
  $samtools_path \
  {input.fa} \
  {params.tmpdir}/results/variants/somaticSV.vcf.gz > {params.tmpdir}/results/variants/somaticSV_converted.vcf;

bgzip -l 9 -c {params.tmpdir}/results/variants/somaticSV_converted.vcf > {output.final};

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule delly_sv_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"],
        bamN = bam_dir + normal_bam,
        bamT = bam_dir + tumor_bam,
        excl = config["reference"]["delly_exclusion_converted"],
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".dellysv.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'delly_sv_tumor_normal_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR",
        normal = "NORMAL",
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "delly_tumor_normal")
    message:
        ("Calling structural variants using delly for {params.case_name},"
        "filter somatic variants and finally convert from bcf to compressed vcf file")
    shell:
        """
delly call -x {input.excl} -o {params.tmpdir}/delly.bcf -g {input.fa} {input.bamT} {input.bamN};

echo -e \"{params.tumor}\\ttumor\\n{params.normal}\\tcontrol\" > {params.tmpdir}/samples.tsv;

delly filter -p -f somatic -o {output.final} -s {params.tmpdir}/samples.tsv {params.tmpdir}/delly.bcf;

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule delly_cnv_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"],
        bamN = bam_dir + normal_bam,
        bamT = bam_dir + tumor_bam,
        map = config["reference"]["delly_mappability"],
    output:
        cnv_delly = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        rd_delly = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.cov.gz",
        namemap= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.sample_name_map",
    benchmark:
        benchmark_dir + 'delly_cnv_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix(),
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        housekeeper_id= {"id": config["analysis"]["case_id"],"tags": "clinical"},
        normal = "NORMAL",
        tumor = "TUMOR",
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "delly_tumor_normal")
    message:
        ("Calling copy number variants using delly for {params.case_name}")
    shell:
        """
echo -e \"{params.tumor}\\ttumor\\n{params.normal}\\tcontrol\" > {params.tmpdir}/samples.tsv;

delly cnv -u -z 10000 -m {input.map} -g {input.fa} -c {output.rd_delly} \
-o {params.tmpdir}/{params.tumor}.bcf {input.bamT};

delly cnv -u -v {params.tmpdir}/{params.tumor}.bcf -m {input.map} -g {input.fa} \
-o {params.tmpdir}/{params.normal}.bcf {input.bamN};

bcftools merge -m id -O b -o {params.tmpdir}/{params.tumor}_{params.normal}.bcf \
{params.tmpdir}/{params.tumor}.bcf {params.tmpdir}/{params.normal}.bcf; 

delly classify -p -f somatic -o {output.cnv_delly} -s {params.tmpdir}/samples.tsv \
{params.tmpdir}/{params.tumor}_{params.normal}.bcf ;

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule ascat_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"] ,
        bamN = bam_dir + normal_bam,
        bamT = bam_dir + tumor_bam,
        gccorrection = config["reference"]["ascat_gccorrection"],
        chryloci= config["reference"]["ascat_chryloci"],
    output:
        final_vcf = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".raw.ascat.vcf.gz",
        ascat_copynumber = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.copynumber.txt.gz",
        sample_statistics = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.samplestatistics.txt"),
        plot_ascat_profile = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.ascatprofile.png"),
        plot_raw_profile = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.rawprofile.png"),
        plot_aspcf = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.ASPCF.png"),
        plot_tumor = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.tumor.png"),
        plot_germline = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.germline.png"),
        plot_sunrise = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.sunrise.png"),
        namemap = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.sample_name_map",
    benchmark:
        benchmark_dir + 'ascat_tumor_normal_' + config["analysis"]["case_id"] + "_ascat.tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("ascatNgs") + ".sif").as_posix()
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "clinical"},
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR",
        normal = "NORMAL",
        genome = config["reference"]["genome_version"],
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "ascat_tumor_normal")
    message:
        ("Calling copy number variants using ascatNGS for {params.case_name}")
    shell:
        """
export LD_LIBRARY_PATH=:/opt/wtsi-cgp/lib;

ascat.pl \
  -protocol WGS \
  -species human \
  -assembly {params.genome} \
  -cpus {threads} \
  -reference {input.fa} \
  -snp_gc {input.gccorrection} \
  -outdir {params.tmpdir} \
  -gender L -locus {input.chryloci} \
  -tumour {input.bamT} \
  -normal {input.bamN};

cp  {params.tmpdir}/{params.tumor}.copynumber.caveman.vcf.gz {output.final_vcf};

cp {params.tmpdir}/{params.tumor}.copynumber.txt.gz {output.ascat_copynumber}

cp {params.tmpdir}/{params.tumor}.samplestatistics.txt {output.sample_statistics};

cp {params.tmpdir}/{params.tumor}.ASCATprofile.png {output.plot_ascat_profile};

cp {params.tmpdir}/{params.tumor}.rawprofile.png {output.plot_raw_profile};

cp {params.tmpdir}/{params.tumor}.ASPCF.png {output.plot_aspcf};

cp {params.tmpdir}/{params.tumor}.tumour.png {output.plot_tumor};

cp {params.tmpdir}/{params.tumor}.germline.png {output.plot_germline};

cp {params.tmpdir}/{params.tumor}.sunrise.png {output.plot_sunrise};

tabix -p vcf -f {output.final_vcf};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule ascat_tumor_normal_merge_output:
    input:
        sample_statistics = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.samplestatistics.txt",
        ascat_plots= expand(
            vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat." + "{output_suffix}" + ".png",
            output_suffix=["ascatprofile", "rawprofile", "ASPCF", "tumor", "germline", "sunrise"]
        ),
    output:
        ascat_pdf = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.output.pdf"
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "clinical"},
        merge_ascat_output_script= get_script_path("create_pdf.py"),
    singularity:
        Path(singularity_image, "balsamic.sif").as_posix()
    threads:
        get_threads(cluster_config, "ascat_tumor_normal_merge_output")
    message:
        "Merging the output plots and the sample statistics from ascatNGS into a single PDF"
    shell:
        """
python {params.merge_ascat_output_script} {output.ascat_pdf} {input.sample_statistics} {input.ascat_plots}
        """

rule tiddit_sv_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"],
        bamN = bam_dir + normal_bam,
        bamT = bam_dir + tumor_bam,
    output:
        vcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tiddit.vcf.gz",
        cov_tumor_tiddit = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tumor.tiddit_cov.bed",
        cov_normal_tiddit = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".normal.tiddit_cov.bed",
        namemap= vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tiddit.sample_name_map",
    benchmark:
        benchmark_dir + 'tiddit_sv_tumor_normal_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("tiddit") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        housekeeper_id= {"id": config["analysis"]["case_id"],"tags": "clinical"},
        tumor = "TUMOR",
        normal = "NORMAL",
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, "tiddit_sv_tumor_normal")
    message:
        ("Calling structural variants using tiddit for {params.case_name}")
    shell:
        """
tiddit --cov -z 500 --ref {input.fa} --bam {input.bamT} -o {params.tmpdir}/{params.tumor}_cov &

tiddit --cov -z 500 --ref {input.fa} --bam {input.bamN} -o {params.tmpdir}/{params.normal}_cov &

tiddit --sv -p 6 -r 6 -z 100 --p-ratio 0.10 --ref {input.fa} --bam {input.bamT} -o {params.tmpdir}/{params.tumor} &

tiddit --sv -p 3 -r 3 --ref {input.fa} --bam {input.bamN} -o {params.tmpdir}/{params.normal};

grep -E "#|PASS" {params.tmpdir}/{params.tumor}.vcf > {params.tmpdir}/{params.tumor}_PASS.vcf;

grep -E "#|PASS" {params.tmpdir}/{params.normal}.vcf > {params.tmpdir}/{params.normal}_PASS.vcf;

svdb --merge --pass_only --notag --bnd_distance 500 --overlap 0.6 \
--vcf {params.tmpdir}/{params.tumor}_PASS.vcf {params.tmpdir}/{params.normal}_PASS.vcf |\
bgzip -l 9 -c > {output.vcf};

cp {params.tmpdir}/{params.tumor}_cov.bed {output.cov_tumor_tiddit};

cp {params.tmpdir}/{params.normal}_cov.bed {output.cov_normal_tiddit};

tabix -p vcf -f {output.vcf};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule bcftools_process_SV_CNV:
    input:
        delly_sv = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        delly_cnv = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        ascat_cnv = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".raw.ascat.vcf.gz",
    output:
        delly_sv = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".dellysv.vcf.gz",
        tmp_delly_cnv = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".tmpdellyCNV.vcf.gz"),
        delly_cnv= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".dellycnv.vcf.gz",
        ascat_cnv= vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".ascat.vcf.gz",
    benchmark:
        Path(benchmark_dir, 'bcftools_process_SV_CNV_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    params:
        case_name = config["analysis"]["case_id"],
        process_cnv = get_script_path("process_CNV.py"),
    threads:
        get_threads(cluster_config, "bcftools_process_SV_CNV")
    message:
        ("Processing SVs and CNVs for {params.case_name}")
    shell:
        """
bcftools view  --threads {threads} -f PASS -O z -o {output.delly_sv} {input.delly_sv};

bcftools view --threads {threads} -f PASS -O z -o {output.tmp_delly_cnv} {input.delly_cnv};

python {params.process_cnv} -f {output.tmp_delly_cnv} -c delly | bgzip -l 9 -c > {output.delly_cnv};

python {params.process_cnv} -f {input.ascat_cnv} -c ascat | bgzip -l 9 -c > {output.ascat_cnv};

tabix -p vcf -f {output.delly_sv};

tabix -p vcf -f {output.delly_cnv};

tabix -p vcf -f {output.ascat_cnv};

rm {input.ascat_cnv};
        """

rule svdb_merge_tumor_normal:
    input:
        vcf = expand(
                vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".{caller}.vcf.gz",
                caller=somatic_caller_sv) +
              expand(
                vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".{caller}.vcf.gz",
                caller=somatic_caller_cnv)
    output:
        vcf_svdb = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'svdb_merge_tumor_normal_' + config["analysis"]["case_id"] + ".tsv")
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("svdb") + ".sif").as_posix()
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal"),
        case_name = config["analysis"]["case_id"],
        vcf= lambda wildcards, input:[input[index] + ":" + svdb_callers_prio[index] for index in range(0,len(input))],
        svdb_priority= ",".join(svdb_callers_prio)
    threads:
        get_threads(cluster_config, "svdb_merge_tumor_normal")
    message:
        "Merging structural and copy number variants using SVDB for {params.case_name}"
    shell:
        """
svdb --merge --no_intra --bnd_distance 5000 --overlap 0.80 \
--vcf {params.vcf} \
--priority {params.svdb_priority} | \
bgzip -l 9 -c  > {output.vcf_svdb};
tabix -p vcf -f {output.vcf_svdb};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};
        """
