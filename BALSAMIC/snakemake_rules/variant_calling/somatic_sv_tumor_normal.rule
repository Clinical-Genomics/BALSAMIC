# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

normal_bam = "normal.merged.bam"
tumor_bam = "tumor.merged.bam"

if config["analysis"]["sequencing_type"] == 'wgs':
    normal_bam = "{normal}.dedup.realign.bam".format(normal = get_sample_type(config["samples"], "normal")[0])
    tumor_bam = "{tumor}.dedup.realign.bam".format(tumor = get_sample_type(config["samples"], "tumor")[0])


rule manta_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"] ,
        bamN = bam_dir + normal_bam, 
        bamT = bam_dir + tumor_bam,
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.sample_name_map",
    benchmark:
        benchmark_dir + 'manta_tumor_normal_' + config["analysis"]["case_id"] + ".manta.tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal"),
        conda = config["bioinfo_tools"].get("manta")
    threads:
        get_threads(cluster_config, "manta_tumor_normal")
    message:
        ("Call structural variants using manta for {input.bamT} vs {input.bamN} files then "
        "index the compressed vcf file")
    shell:
        """
source activate {params.conda};

configManta.py \
  --normalBam={input.bamN} \
  --tumorBam={input.bamT} \
  --referenceFasta={input.fa} \
  --runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};

cp {params.tmpdir}/results/variants/somaticSV.vcf.gz {output.final};

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule delly_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"] ,
        bamN = bam_dir + normal_bam,
        bamT = bam_dir + tumor_bam,
        excl = config["reference"]["delly_exclusion_converted"],
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.sample_name_map",
    benchmark:
        benchmark_dir + 'delly_tumor_normal_' + config["analysis"]["case_id"] + "_delly.tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal"),
        conda = config["bioinfo_tools"].get("delly")
    threads:
        get_threads(cluster_config, "delly_tumor_normal")
    message:
        ("Call structural variants using delly for {input.bamT} vs {input.bamN} files then "
        "filter somatic variants and finally convert from bcf to compressed vcf file")
    shell:
        """
source activate {params.conda};

delly call -x {input.excl} -o {params.tmpdir}/delly.bcf -g {input.fa} {input.bamT} {input.bamN};

echo TUMOR$'\t'tumor$'\n'NORMAL$'\t'control > {params.tmpdir}/samples.tsv;

delly filter -p -f somatic -o {params.tmpdir}/delly.somatic.bcf -s {params.tmpdir}/samples.tsv {params.tmpdir}/delly.bcf;

bcftools view -O z -o {output.final} {params.tmpdir}/delly.somatic.bcf;

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """



rule ascat_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"] ,
        bamN = bam_dir + normal_bam,
        bamT = bam_dir + tumor_bam,
        gccorrection = config["reference"]["ascat_gccorrection"],
        chryloci= config["reference"]["ascat_chryloci"],
    output:
        finalvcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".ascat.vcf.gz",
        samplestatistics = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".ascat.samplestatistics.txt",
        germlineplot = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".ascat.germline.png",
        rawprofileplot = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".ascat.rawprofile.png",
        sunriseplot = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".ascat.sunrise.png",
        tumorplot = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".ascat.tumor.png",
        ASPCFplot = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".ascat.ASPCF.png",
        ascatprofileplot = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".ascat.ascatprofile.png",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".ascat.sample_name_map",
    benchmark:
        benchmark_dir + 'ascat_tumor_normal_' + config["analysis"]["case_id"] + "_ascat.tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("ascat") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal"),
        conda = config["bioinfo_tools"].get("ascat")
    threads:
        get_threads(cluster_config, "ascat_tumor_normal")
    message:
        ("Call copy number variants using ascatNGS for {input.bamT} vs {input.bamN} files then "
        "filter somatic variants and finally convert to compressed vcf file")
    shell:
        """
source activate {params.conda};

export LD_LIBRARY_PATH=:/opt/wtsi-cgp/lib;

ascat.pl -protocol WGS -species human -assembly GRCh37 -cpus 36 -reference {input.fa} -snp_gc {input.gccorrection} -outdir {params.tmpdir} -gender L -locus {input.chryloci} -tumour {input.bamT} -normal {input.bamN};

cp  {params.tmpdir}/TUMOR.copynumber.caveman.vcf.gz {output.finalvcf};

cp {params.tmpdir}/TUMOR.samplestatistics.txt {output.samplestatistics};

cp {params.tmpdir}/TUMOR.germline.png {outpui.germlineplot};

cp {params.tmpdir}/TUMOR.rawprofile.png {output.rawprofileplot};

cp {params.tmpdir}/TUMOR.sunrise.png {output.sunriseplot};

cp {params.tmpdir}/TUMOR.tumour.png {output.tumorplot};

cp {params.tmpdir}/TUMOR.ASCATprofile.png {output.ascatprofileplot};

cp {params.tmpdir}/TUMOR.ASPCF.png {output.ascatprofileplot};

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """
