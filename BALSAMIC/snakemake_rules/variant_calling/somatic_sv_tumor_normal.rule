# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

normal_bam = "normal.merged.bam"
tumor_bam = "tumor.merged.bam"

if config["analysis"]["sequencing_type"] == 'wgs':
    normal_bam = "{normal}.dedup.realign.bam".format(normal = get_sample_type(config["samples"], "normal")[0])
    tumor_bam = "{tumor}.dedup.realign.bam".format(tumor = get_sample_type(config["samples"], "tumor")[0])


rule manta_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"] ,
        bamN = bam_dir + normal_bam, 
        bamT = bam_dir + tumor_bam,
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.sample_name_map",
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal"),
        conda = config["bioinfo_tools"].get("manta")
    singularity: Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix() 
    benchmark: 
        benchmark_dir + 'manta_tumor_normal_' + config["analysis"]["case_id"] + ".manta.tsv"
    threads: get_threads(cluster_config, "manta_tumor_normal") 
    shell:
        """
source activate {params.conda};

configManta.py \
  --normalBam={input.bamN} \
  --tumorBam={input.bamT} \
  --referenceFasta={input.fa} \
  --runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {threads};

cp {params.tmpdir}/results/variants/somaticSV.vcf.gz {output.final};

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """

rule delly_tumor_normal:
    input:
        fa = config["reference"]["reference_genome"] ,
        bamN = bam_dir + normal_bam,
        bamT = bam_dir + tumor_bam,
        excl = config["reference"]["dly_excl"],
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.sample_name_map",
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        runmode = "local",
        tumor = get_sample_type(config["samples"], "tumor"),
        normal = get_sample_type(config["samples"], "normal"),
        conda = config["bioinfo_tools"].get("delly")
    singularity: Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    benchmark:
        benchmark_dir + 'delly_tumor_normal_' + config["analysis"]["case_id"] + "_delly.tsv"
    threads: get_threads(cluster_config, "delly_tumor_normal")
    shell:
        """
source activate {params.conda};

delly call -x {input.excl} -o {params.tmpdir}/delly.bcf -g {input.fa} {input.bamT} {input.bamN}
echo TUMOR$'\t'tumor$'\n'NORMAL$'\t'control > {params.tmpdir}/samples.tsv
delly filter -p -f somatic -o {params.tmpdir}/delly.somatic.bcf -s {params.tmpdir}/samples.tsv {params.tmpdir}/delly.bcf
bcftools view -O z -o {params.tmpdir}/delly.vcf.gz {params.tmpdir}/delly.somatic.bcf
cp {params.tmpdir}/delly.vcf.gz {output.final};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};

rm -rf {params.tmpdir};
        """
