# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


rule manta_tumor_only_tga:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = config_model.get_final_bam_name(bam_dir=bam_dir, sample_name=tumor_sample, specified_suffix="dedup.fixmate.qualcapped"),
    output:
        final = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.vcf.gz",
        namemap = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".manta.sample_name_map"
    benchmark:
        benchmark_dir + 'manta_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("manta") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        settings = params.get_manta_settings(sequencing_type=sequencing_type),
        runmode = "local",
        tumor = config_model.get_sample_name_by_type(SampleType.TUMOR),
        case_name = config["analysis"]["case_id"],
        low_pr_sr_count = [MANTA_FILTERS.low_pr_sr_count.tag_value,MANTA_FILTERS.low_pr_sr_count.filter_name],
    message:
        ("Calling structural variants using manta for {params.case_name} and"
        "index the compressed vcf file")
    shell:
      """
export TMPDIR={params.tmpdir} ;
samtools_path=$(readlink -f $(which samtools)) ;

configManta.py \
{params.settings} \
--tumorBam={input.bamT} \
--referenceFasta={input.fa} \
--runDir={params.tmpdir};

python {params.tmpdir}/runWorkflow.py -m {params.runmode} -j {resources.threads};

convertInversion.py \
  $samtools_path \
  {input.fa} \
  {params.tmpdir}/results/variants/tumorSV.vcf.gz > {params.tmpdir}/results/variants/tumorSV_converted.vcf; 

bgzip -l 9 {params.tmpdir}/results/variants/tumorSV_converted.vcf;

bcftools filter --threads {resources.threads} --exclude 'SUM(FORMAT/PR[0:1]+FORMAT/SR[0:1]) < {params.low_pr_sr_count[0]}' --soft-filter '{params.low_pr_sr_count[1]}' --mode '+' -o {output.final} -O z {params.tmpdir}/results/variants/tumorSV_converted.vcf.gz

tabix -p vcf -f {output.final};

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap}; 

rm -rf {params.tmpdir};
      """

rule delly_sv_tumor_only_tga:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        excl = config["reference"]["delly_exclusion_converted"],
    output:
        bcf = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".delly.bcf",
        namemap= vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".dellysv.sample_name_map",
    benchmark:
        benchmark_dir + 'delly_sv_tumor_only_' + config["analysis"]["case_id"] + ".tsv"
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("delly") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR",
        case_name = config["analysis"]["case_id"]
    message:
        ("Calling structural variants using delly for {params.case_name}")
    shell:
        """
export TMPDIR={params.tmpdir} ;

delly call -x {input.excl} -o {output.bcf} -g {input.fa} {input.bamT}

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
        """

