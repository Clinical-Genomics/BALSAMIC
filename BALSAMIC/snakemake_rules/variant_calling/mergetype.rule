# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

picard_extra_normal=" ".join(["RGPU=ILLUMINAi", "RGID=NORMAL","RGSM=NORMAL", "RGPL=ILLUMINAi", "RGLB=ILLUMINAi"])
picard_extra_tumor=" ".join(["RGPU=ILLUMINAi", "RGID=TUMOR",  "RGSM=TUMOR", "RGPL=ILLUMINAi", "RGLB=ILLUMINAi"])

rule mergeBam_normal_gatk:
  input:
    bamN = bam_dir + "{mysample}.sorted.{picardstr}.bsrcl.bam".format(mysample = normal_sample,
                                                                            picardstr = picarddup)
  output:
    bamN = bam_dir + "normal.sorted." + picarddup + ".bsrcl.merged.bam",
  params:
    conda = config["bioinfo_tools"].get("picard"),
    picard = picard_extra_normal
  singularity: singularity_image
  benchmark:
    benchmark_dir + 'mergeBam_normal_gatk_' + "{mysample}.mergebam_normal_gatk.tsv".format(mysample = normal_sample)
  shell:
    "source activate {params.conda}; "
    "picard AddOrReplaceReadGroups {params.picard} INPUT={input.bamN} OUTPUT={output.bamN}; "
    "samtools index {output.bamN}; "
    

rule mergeBam_normal:
  input:
    fasta = config["reference"]["reference_genome"],
    bam = bam_dir + "{mysample}.sorted.{picardstr}.bam".format(mysample = normal_sample,
                                                                picardstr = picarddup)
  output:
    bam = bam_dir + "normal.merged.bam", 
    cram = bam_dir + "normal.merged.cram",
  params:
    housekeeper_id = {"id": normal_sample, "tags": "normal"},
    conda = config["bioinfo_tools"].get("picard"),
    picard = picard_extra_normal
  threads: get_threads(cluster_config, "mergeBam_normal")
  singularity: singularity_image
  benchmark:
    benchmark_dir + 'mergeBam_normal_' + "{mysample}.mergebam_normal.tsv".format(mysample = normal_sample)
  shell:
    "source activate {params.conda}; "
    "picard AddOrReplaceReadGroups {params.picard} INPUT={input.bam} OUTPUT={output.bam}; "
    "samtools index {output.bam}; "
    "samtools view -h -T {input.fasta} --threads {threads} -C -o {output.cram} {output.bam}; "
    "samtools index {output.cram}; "


rule mergeBam_tumor:
  input:
    fasta = config["reference"]["reference_genome"],
    bam = bam_dir + "{mysample}.sorted.{picardstr}.bam".format(mysample = tumor_sample,
                                                                picardstr = picarddup)
  output:
    bam = bam_dir + "tumor.merged.bam",
    cram = bam_dir + "tumor.merged.cram",
  params:
    housekeeper_id = {"id": tumor_sample, "tags": "tumor"},
    conda = config["bioinfo_tools"].get("picard"),
    picard = picard_extra_tumor
  threads: get_threads(cluster_config, "mergeBam_tumor")
  singularity: singularity_image
  benchmark:
    benchmark_dir + 'mergeBam_tumor_' + "{mysample}.mergebam_tumor.tsv".format(mysample = tumor_sample)
  shell:
    "source activate {params.conda}; "
    "picard AddOrReplaceReadGroups {params.picard} INPUT={input.bam} OUTPUT={output.bam}; "
    "samtools index {output.bam}; "
    "samtools view -h -T {input.fasta} --threads {threads} -C -o {output.cram} {output.bam}; "
    "samtools index {output.cram}; "


rule mergeBam_tumor_gatk:
  input:
    bamT = bam_dir + "{mysample}.sorted.{picardstr}.bsrcl.bam".format(mysample = tumor_sample,
                                                                      picardstr = picarddup)
  output:
    bamT = bam_dir + "tumor.sorted." + picarddup + ".bsrcl.merged.bam",
  params:
    conda = config["bioinfo_tools"].get("picard"),
    picard = picard_extra_tumor
  threads: get_threads(cluster_config, "samtools_sort_index")
  singularity: singularity_image
  benchmark:
    benchmark_dir + 'mergeBam_tumor_gatk_' + "{mysample}.mergebam_tumor_gatk.tsv".format(mysample = tumor_sample)
  shell:
    "source activate {params.conda}; "
    "picard AddOrReplaceReadGroups {params.picard} INPUT={input.bamT} OUTPUT={output.bamT}; "
    "samtools index {output.bamT}; "
    
