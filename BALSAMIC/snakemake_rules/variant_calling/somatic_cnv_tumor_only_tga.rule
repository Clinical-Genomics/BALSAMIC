# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule cnvkit_segment_CNV_research:
    input:
        access_bed = config["reference"]["access_regions"],
        baits_bed = config["panel"]["capture_kit"],
        fasta = config["reference"]["reference_genome"],
        refgene_flat = config["reference"]["refgene_flat"],
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir,sample_name=tumor_sample),
    output:
        cns = cnv_dir + "tumor.initial.cns",
        cnr = cnv_dir + "tumor.merged.cnr",
        targets = cnv_dir + "targets.bed",
        antitargets = cnv_dir + "antitarget.bed",
        tumor_target_coverage = cnv_dir + "tumor.targetcoverage.cnn",
        tumor_antitarget_coverage = cnv_dir + "tumor.antitargetcoverage.cnn",
        segment = cnv_dir + "tumor.seg",
    benchmark:
        Path(f"{benchmark_dir}/cnvkit_segment_{config['analysis']['case_id']}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("cnvkit") + ".sif").as_posix()
    threads:
        get_threads(cluster_config,"cnvkit_segment_CNV_research")
    params:
        min_mapq = params.common.min_mapq,
        case_name = config["analysis"]["case_id"],
        sample_id = "TUMOR",
        flat_reference_cnn = cnv_dir + "flat_reference.cnn",
        pon = " " if pon_cnn is None else pon_cnn,
    message:
        ("Segmenting genomic regions using CNVkit for {params.case_name}")
    shell:
      """
# create target and anti-target bed files
cnvkit.py target {input.baits_bed} \
--annotate {input.refgene_flat} \
--split \
--output {output.targets};

cnvkit.py antitarget {input.baits_bed} \
--access {input.access_bed} \
--output {output.antitargets};

# calculate coverage in the given regions from BAM read depths
cnvkit.py coverage {input.bamT} \
{output.targets} \
--min-mapq {params.min_mapq} \
--processes {threads} \
--output {output.tumor_target_coverage};

cnvkit.py coverage {input.bamT} \
{output.antitargets} \
--min-mapq {params.min_mapq} \
--processes {threads} \
--output {output.tumor_antitarget_coverage};

# Combine the uncorrected target and antitarget coverage tables (.cnn) and
# correct for biases in regional coverage and GC content, according to the given reference
if [[ ! -f "{params.pon}" ]]; then
cnvkit.py reference --output {params.flat_reference_cnn} \
--fasta {input.fasta} \
--targets {output.targets} \
--antitargets {output.antitargets};

cnvkit.py fix {output.tumor_target_coverage} \
{output.tumor_antitarget_coverage} \
{params.flat_reference_cnn} \
--output {output.cnr};

else

echo "PON reference exists- Using it for coverage correction"
cnvkit.py fix {output.tumor_target_coverage} \
{output.tumor_antitarget_coverage} \
{params.pon} \
--output {output.cnr};

fi

# Infer copy number segments from the given coverage table
# segmentattion methods (-m): cbs: reccommended for mid-size target panels and exomes
# drop bins with 0  read depth and bins whose log2 values deviating from avg
cnvkit.py segment {output.cnr} \
--sample-id {params.sample_id} \
--output {output.cns} \
--method cbs \
--drop-low-coverage \
--processes {threads};

# Convert copy number segments (.cns) to standard SEG format to be used for PureCN
cnvkit.py export seg {output.cns} --output {output.segment};
      """

rule purecn_call_CNV_research:
    input:
        fasta = config["reference"]["reference_genome"],
        refgene_flat = config["reference"]["refgene_flat"],
        snv_vcf = vcf_dir + "SNV.germline.tumor.dnascope.vcf.gz",
        segment= cnv_dir + "tumor.seg",
        cnr = cnv_dir + "tumor.merged.cnr",
    output:
        purity_ploidy = cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".purecn.purity.csv",
        purity_pdf = cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".purecn.purity.pdf",
        loh_regions = cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".purecn.LOHregions.csv",
        loh_genes = cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".purecn.LOHgenes.csv",
        cnv_csv = cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".purecn.cnv.csv",
        purecn_vcf = cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".purecn.vcf.gz"
    benchmark:
        Path(f"{benchmark_dir}/purecn_call_{config['analysis']['case_id']}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("purecn") + ".sif").as_posix()
    threads:
        get_threads(cluster_config, "purecn_call_CNV_research")
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "cnv"},
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor_name = "tumor.merged",
        cnv_dir = cnv_dir,
        min_mapq= params.common.min_mapq,
        case_name = config["analysis"]["case_id"],
        gender = config["analysis"]["gender"],
        sample_id = "TUMOR_" + config["analysis"]["case_id"],
        genome = config["reference"]["genome_version"],
        pon = " " if pon_cnn is None else pon_cnn,
    message:
        ("Computing tumor purity and ploidy values using PureCN for {params.case_name}")
    shell:
      """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export PURECN='/opt/PureCN/PureCN.R'

# Run PureCN to estimate tumor-purity and ploidy
purecn_status="true"
{{
Rscript $PURECN \
--parallel \
--out {params.tmpdir} \
--out-vcf TRUE \
--sampleid {params.sample_id} \
--tumor {input.cnr} \
--seg-file {input.segment} \
--vcf  {input.snv_vcf} \
--genome {params.genome} \
--fun-segmentation Hclust \
--force --post-optimize \
--seed 124;
}} || purecn_status="false"

if $purecn_status; then

mv {params.tmpdir}/{params.sample_id}_dnacopy.seg {output.cnv_csv};
mv {params.tmpdir}/{params.sample_id}.csv {output.purity_ploidy};
mv {params.tmpdir}/{params.sample_id}.pdf {output.purity_pdf};
mv {params.tmpdir}/{params.sample_id}_loh.csv {output.loh_regions};
mv {params.tmpdir}/{params.sample_id}_genes.csv {output.loh_genes};
mv {params.tmpdir}/{params.sample_id}.vcf.gz {output.purecn_vcf};

else

echo '"Sampleid","Purity","Ploidy","Sex","Contamination","Flagged","Failed","Curated","Comment"
"tumor.initial",0.02,2,"?",0,FALSE,FALSE,FALSE,NA' > {output.purity_ploidy}; 

fi

#rm -rf {params.tmpdir};
      """

rule cnvkit_call_CNV_research:
    input:
        access_bed = config["reference"]["access_regions"],
        fasta = config["reference"]["reference_genome"],
        baits_bed = config["panel"]["capture_kit"],
        refgene_flat = config["reference"]["refgene_flat"],
        purity_ploidy = cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".purecn.purity.csv",
        cns= cnv_dir + "tumor.initial.cns",
        cnr = cnv_dir + "tumor.merged.cnr",
        snv_vcf = vcf_dir + "SNV.germline.tumor.dnascope.vcf.gz",
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
    output:
        cns = cnv_dir + "tumor.merged.cns",
        gene_breaks = cnv_dir + config["analysis"]["case_id"] + ".gene_breaks",
        gene_metrics = cnv_dir + config["analysis"]["case_id"] + ".gene_metrics",
        vcf =  cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.vcf",
        diagram = cnv_dir + "tumor.merged-diagram.pdf",
        scatter = cnv_dir + "tumor.merged-scatter.pdf",
    benchmark:
        Path(f"{benchmark_dir}/cnvkit_call_{config['analysis']['case_id']}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("cnvkit") + ".sif").as_posix()
    threads:
        get_threads(cluster_config, "cnvkit_call_CNV_research")
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "cnv"},
        tumor_name = "tumor.merged",
        cnv_dir = cnv_dir,
        cnsr = lambda wc: "tumor.merged.cn{s,r}",
        min_mapq= params.common.min_mapq,
        case_name = config["analysis"]["case_id"],
        gender = config["analysis"]["gender"],
        sample_id = "TUMOR",
        genome_version = config["reference"]["genome_version"],
        pon = pon_cnn,
    message:
        ("Calling CNVs using CNVkit for {params.case_name}")
    shell:
      """
purity=$(awk -F\\, 'NR>1 {{print $2}}' {input.purity_ploidy})
ploidy=$(awk -F\\, 'NR>1 {{printf int($3)}}' {input.purity_ploidy})

# Call copy number variants from segmented log2 ratios
cnvkit.py call {input.cns} \
--vcf {input.snv_vcf} \
--sample-sex {params.gender} \
--method clonal \
--purity $purity \
--ploidy $ploidy \
--output {output.cns};

# Plot bin-level log2 coverages and segmentation calls
cnvkit.py scatter {input.cnr} \
--segment {output.cns} \
--output {output.scatter};

# Draw copy number (.cnr or .cns) on chromosomes as an ideogram
cnvkit.py diagram {input.cnr} \
--segment  {output.cns} \
--output {output.diagram};

# Identify targeted genes with copy number gain or loss
cnvkit.py genemetrics {input.cnr} \
--segment {output.cns} \
--drop-low-coverage  \
--sample-sex {params.gender} \
--output {output.gene_metrics};

# List the genenames that contain a possibe copy number breakpoint.
cnvkit.py breaks {input.cnr} {output.cns} \
| cut -f1 | sort -u > {output.gene_breaks};

# Convert segments to a vcf file
cnvkit.py export vcf {output.cns} \
--cnr {input.cnr} \
--output {output.vcf} \
--sample-sex {params.gender} \
--sample-id {params.sample_id};
      """

rule bcftools_sort_cnvkitCNV_research:
    input:
        vcf =  cnv_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.vcf",
    output:
        namemap = temp(vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.sample_name_map"),
        vcf = vcf_dir + "CNV.somatic." + config["analysis"]["case_id"] + ".cnvkit.vcf.gz"
    benchmark:
        Path(f"{benchmark_dir}/bcftools_sort_cnvkitCNV_research_{config['analysis']['case_id']}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    threads:
        get_threads(cluster_config, "bcftools_sort_cnvkitCNV_research")
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "cnv"},
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        cnv_dir = cnv_dir,
        case_name = config["analysis"]["case_id"],
    message:
        ("Sorting CNVs using bcftools for {params.case_name}")
    shell:
      """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

bgzip -l 9 {input.vcf};

tabix -p vcf -f {input.vcf}.gz;

bcftools sort \
-o {output.vcf} \
--temp-dir {params.tmpdir} \
-O z {input.vcf}.gz;

tabix -p vcf -f {output.vcf};

echo -e \"TUMOR\\tTUMOR\" > {output.namemap};

rm -rf {params.tmpdir};
      """
