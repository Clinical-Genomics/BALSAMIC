# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

def get_pon(config):
    """ return pon cli string, complete with file """
    if "PON" in config["analysis"]:
        return os.path.abspth(config["analysis"]["PON"])
    else:
        return None


rule sentieon_TNsnv_tumor_only:
    input:
        bam = expand(bam_dir + "{mysample}.dedup.realign.bam", mysample=get_sample_type(config["samples"], "tumor")),
        recal_data_table = expand(bam_dir + "{mysample}.dedup.realign.recal_data.table", mysample=get_sample_type(config["samples"], "tumor")),
        ref = config["reference"]["reference_genome"],
        dbsnp = config["reference"]["dbsnp"],
        cosmic = config["reference"]["cosmic"],
    output:
        vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnsnv.vcf.gz",
        stats = vcf_dir + config["analysis"]["case_id"] + ".tnsnv.call_stats",
        namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnsnv.sample_name_map",
    params:
        tmpdir = tempfile.mkstemp(prefix=tmp_dir),
        tumor = get_sample_type(config["samples"], "tumor"),
        pon = " " if get_pon(config) is None else " ".join(["--pon", get_pon(config)]),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
    threads: get_threads(cluster_config, 'sentieon_TNsnv_tumor_only')
    log:
        vcf_dir + config["analysis"]["case_id"] + ".tnsnv.log"
    benchmark:
        benchmark_dir + config["analysis"]["case_id"] + ".tnsnv.tsv"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver -r {input.ref} -t {threads} -q {input.recal_data_table} -i {input.bam} --algo TNsnv --tumor_sample {params.tumor} {params.pon} --cosmic {input.cosmic} --dbsnp {input.dbsnp} --call_stats_out {output.stats} {output.vcf} 

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap}; 
        """

rule sentieon_TNhaplotyper_tumor_only:
    input:
        bam = expand(bam_dir + "{mysample}.dedup.realign.bam", mysample=get_sample_type(config["samples"], "tumor")),
        recal_data_table = expand(bam_dir + "{mysample}.dedup.realign.recal_data.table", mysample=get_sample_type(config["samples"], "tumor")),
        ref = config["reference"]["reference_genome"],
        dbsnp = config["reference"]["dbsnp"],
        cosmic = config["reference"]["cosmic"],
    output:
        vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnhaplotyper.vcf.gz",
        namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnhaplotyper.sample_name_map",
    params:
        tmpdir = tempfile.mkstemp(prefix=tmp_dir),
        tumor = get_sample_type(config["samples"], "tumor"),
        pon = " " if get_pon(config) is None else " ".join(["--pon", get_pon(config)]),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
    threads: get_threads(cluster_config, 'sentieon_TNhaplotyper_tumor_only')
    log:
        vcf_dir + config["analysis"]["case_id"] + ".tnsnv.log"
    benchmark:
        benchmark_dir + config["analysis"]["case_id"] + ".tnhaplotyper.tsv"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver -r {input.ref} -t {threads} -i {input.bam} -q {input.recal_data_table} --algo TNhaplotyper --tumor_sample {params.tumor} {params.pon} --cosmic {input.cosmic} --dbsnp {input.dbsnp} {output.vcf} 

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap}; 
        """


rule sentieon_TNscope_tumor_only:
    input:
        ref = config["reference"]["reference_genome"],
        dbsnp = config["reference"]["dbsnp"],
        bam = expand(bam_dir + "{tumor}.dedup.realign.bam", tumor=get_sample_type(config["samples"], "tumor")),
        recal = expand(bam_dir + "{tumor}.dedup.realign.recal_data.table", tumor=get_sample_type(config["samples"], "tumor")),
    output:
        vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.vcf.gz",
        namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.sample_name_map",
    params:
        tmpdir = tempfile.mkstemp(prefix=tmp_dir),
        tumor = get_sample_type(config["samples"], "tumor"),
        pon = " " if get_pon(config) is None else " ".join(["--pon", get_pon(config)]),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
    threads: get_threads(cluster_config, 'sentieon_TNscope_tumor_only')
    log: 
        vcf_dir + config["analysis"]["case_id"] + ".tnscope_tumor_only.log"
    benchmark:
        benchmark_dir + config["analysis"]["case_id"] + ".tnscope.tsv"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver -t {threads} -r {input.ref} -i {input.bam} -q {input.recal} --algo TNscope --tumor_sample {params.tumor} {params.pon} --dbsnp {input.dbsnp} {output.vcf};

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap}; 
        """
