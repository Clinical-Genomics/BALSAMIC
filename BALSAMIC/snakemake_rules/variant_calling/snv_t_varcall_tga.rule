# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

# Variant-calling using TNscope



rule sentieon_tnscope_tga_tumor_only:
    input:
        bam = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        ref_fa = config["reference"]["reference_genome"],
        bed = config["panel"]["capture_kit"],
        dbsnp = config["reference"]["dbsnp"]
    output:
        vcf_tnscope = vcf_dir + "sentieon_tnscope" + "/" + "ALL.somatic." + config["analysis"]["case_id"] + ".tnscope.vcf.gz",
        namemap_snv = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.sample_name_map",
        namemap_sv = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tnscope.sample_name_map",
    benchmark:
        Path(benchmark_dir, "sentieon_tnscope_" + config["analysis"]["case_id"] + ".tsv").as_posix()
    params:
        algo = params.tnscope_tga.algo,
        error_rate = params.tnscope_tga.error_rate,
        init_tumor_lod = params.tnscope_tga.init_tumorLOD,
        padding = params.tnscope_tga.padding,
        pcr_model = params.tnscope_tga.pcr_model,
        prune_factor = params.tnscope_tga.prunefactor,
        sentieon_exec=config_model.sentieon.sentieon_exec,
        sentieon_lic=config_model.sentieon.sentieon_license,
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR",
        tumor_af = params.tnscope_tga.filter_tumor_af,
        tumor_lod = params.tnscope_tga.min_tumorLOD,
    threads:
        get_threads(cluster_config, "sentieon_tnscope_tga_t_only")
    message:
        "Calling single nucleotide variants using TNscope for {params.tumor}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-t {threads} \
-r {input.ref_fa} \
-i {input.bam} \
--interval {input.bed} \
--interval_padding {params.padding} \
--algo {params.algo} \
--tumor_sample {params.tumor} \
--dbsnp {input.dbsnp} \
--min_tumor_allele_frac {params.tumor_af} \
--filter_t_alt_frac {params.tumor_af} \
--min_init_tumor_lod {params.init_tumor_lod} \
--min_tumor_lod {params.tumor_lod} \
--max_error_per_read {params.error_rate} \
--pcr_indel_model {params.pcr_model} \
--prune_factor {params.prune_factor} \
{output.vcf_tnscope};

echo -e \"{params.tumor}\\tTUMOR\" > {output.namemap_snv};
cp {output.namemap_snv} {output.namemap_sv};
rm -rf {params.tmpdir};
        """


rule vardict_tumor_only:
    input:
        fa = config["reference"]["reference_genome"],
        bamT = config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample),
        bed = vcf_dir + "split_bed/{bedchrom}." + capture_kit,
    output:
        temp(vcf_dir + "vardict/split_vcf/{bedchrom}_vardict.vcf.gz")
    benchmark:
        Path(benchmark_dir, 'vardict_tumor_only_' + '{bedchrom}.tsv').as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("vardict") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        af = params.vardict.allelic_frequency,
        max_pval = params.vardict.max_pval,
        max_mm = params.vardict.max_mm,
        col_info = params.vardict.column_info,
        case_name = config["analysis"]["case_id"],
    threads:
        get_threads(cluster_config, "vardict_tumor_only")
    message:
        "Calling single nucleotide variants using vardict for {params.case_name}"
    shell:
        """
export PERL5LIB=;

export TMPDIR={params.tmpdir};
export VAR_DICT_OPTS='\"-Djava.io.tmpdir={params.tmpdir}\" \"-Xmx45G\"'; 

vardict-java -I 600 \
-G {input.fa} \
-f {params.af} \
-N {params.case_name} \
-th {threads} \
-b {input.bamT} \
{params.col_info} {input.bed} \
| teststrandbias.R \
| var2vcf_valid.pl -P {params.max_pval} \
-m {params.max_mm} -E -f {params.af} -N {params.case_name} \
| bgzip > {output};

tabix -p vcf {output};
rm -rf {params.tmpdir};
    """

rule vardict_merge:
    input:
        expand(vcf_dir + "vardict/split_vcf/{chrom}_vardict.vcf.gz", chrom=chromlist)
    output:
        vcf_vardict = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.vcf.gz",
        namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.sample_name_map"
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "research"},
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sort_vcf = get_script_path("sort_vcf.awk"),
        case_name = config["analysis"]["case_id"],
    benchmark:
        Path(benchmark_dir,'vardict_merge_' + config["analysis"]["case_id"] + ".tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bcftools") + ".sif").as_posix()
    threads:
        get_threads(cluster_config,"vardict_merge")
    message:
        ("Merging multiple VCFs from vardict into single VCF using bcftools for {params.case_name}")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export LC_ALL=en_US.UTF-8;

bcftools concat {input} > {params.tmpdir}/concatenated_vardict.vcf ;
awk -f {params.sort_vcf} {params.tmpdir}/concatenated_vardict.vcf | bgzip > {params.tmpdir}/merged_vardict.vcf.gz ; 
tabix -f -p vcf {params.tmpdir}/merged_vardict.vcf.gz ;

echo \"TUMOR\" > {params.tmpdir}/reheader ;

bcftools reheader -s {params.tmpdir}/reheader {params.tmpdir}/merged_vardict.vcf.gz -o {output.vcf_vardict} ;
tabix -f -p vcf {output.vcf_vardict} ;

echo -e \"tTUMOR\\tTUMOR\" > {output.namemap} ; 
echo -e \"tTUMOR\" > {output.namemap}.tumor ;

rm -rf {params.tmpdir} ;
    """
