# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

from BALSAMIC.utils.constants import VARCALL_PARAMS

rule sentieon_base_calibration:
    input:
        ref = config["reference"]["reference_genome"],
        mills = config["reference"]["mills_1kg"],
        indel_1kg = config["reference"]["1kg_known_indel"],
        dbsnp = config["reference"]["dbsnp"],
        bam = Path(bam_dir, "{sample_type}.merged.bam").as_posix()
    output:
        recal_data_table = Path(bam_dir, "{sample_type}.merged.recal_data.table").as_posix(),
        qual_recal = Path(bam_dir, "{sample_type}.merged.recal.csv").as_posix(),
        qual_recal_plot = Path(bam_dir, "{sample_type}.recal.pdf").as_posix(),
    benchmark:
        Path(benchmark_dir, "sentieon_base_calibration_{sample_type}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        case_name = "{sample_type}"
    threads:
        get_threads(cluster_config, 'sentieon_base_calibration')
    message:
        "Base recalibration using Sentieon tools for sample {params.case_name}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver --algo QualCal \
-r {input.ref} \
-t {threads} \
-i {input.bam} \
-k {input.dbsnp} \
-k {input.mills} \
-k {input.indel_1kg} {output.recal_data_table};

{params.sentieon_exec} driver --algo QualCal \
-r {input.ref} \
-t {threads} \
-i {input.bam} \
-q {output.recal_data_table} \
-k {input.dbsnp} \
-k {input.mills} \
-k {input.indel_1kg} {output.recal_data_table}.post;

{params.sentieon_exec} driver --algo QualCal \
-t {threads} \
--plot --before {output.recal_data_table} \
--after {output.recal_data_table}.post {output.qual_recal};

{params.sentieon_exec} plot QualCal \
-o {output.qual_recal_plot} {output.qual_recal};

rm -rf {params.tmpdir};
        """


rule sentieon_TN_corealign:
    input:
        ref = config["reference"]["reference_genome"],
        bamT = expand(bam_dir + "tumor.merged.bam"),
        bamN = expand(bam_dir + "normal.merged.bam"),
        recalT = expand(bam_dir + "tumor.merged.recal_data.table"),
        recalN = expand(bam_dir + "normal.merged.recal_data.table"),
        mills = config["reference"]["mills_1kg"],
        indel_1kg = config["reference"]["1kg_known_indel"],
    output:
        bam = bam_dir + config["analysis"]["case_id"] + ".corealign.bam"
    benchmark:
        Path(benchmark_dir, 'sentieon_TN_corealign_' + config[ "analysis" ][ "case_id" ] + ".tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, 'sentieon_TN_corealign')
    message:
        ""
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver --algo Realigner \
-r {input.ref} \
-t {threads} \
-i {input.bamT} \
-i {input.bamN} \
-q {input.recalT} \
-q {input.recalN} \
-k {input.mills} \
-k {input.indel_1kg} {output.bam}

rm -rf {params.tmpdir};
        """

rule sentieon_TNhaplotyper:
    input:
        bam = bam_dir + config["analysis"]["case_id"] + ".corealign.bam",
        ref = config["reference"]["reference_genome"],
        dbsnp = config["reference"]["dbsnp"],
    output:
        vcf = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnhaplotyper.vcf.gz",
        namemap = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnhaplotyper.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'sentieon_TNhaplotyper_' + config[ "analysis" ][ "case_id" ] + ".tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR", 
        normal = "NORMAL",
        pcr_model = "NONE", 
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, 'sentieon_TNhaplotyper')
    message:
        "Calling SNV variants using Sentieon TNhaplotyper for sample {params.case_name}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver --algo TNhaplotyper \
-r {input.ref} \
-t {threads} \
-i {input.bam} \
--tumor_sample {params.tumor} \
--normal_sample {params.normal} \
--pcr_indel_mode {params.pcr_model} \
--dbsnp {input.dbsnp} {output.vcf};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap};
rm -rf {params.tmpdir};
        """


rule sentieon_TNscope:
    input:
        ref = config["reference"]["reference_genome"],
        dbsnp = config["reference"]["dbsnp"],
        bamT = expand(bam_dir + "tumor.merged.bam"),
        bamN = expand(bam_dir + "normal.merged.bam"),
        recalT = expand(bam_dir + "tumor.merged.recal_data.table"),
        recalN = expand(bam_dir + "normal.merged.recal_data.table"),
    output:
        vcf_all = vcf_dir + "sentieon_tnscope/ALL.somatic." + config["analysis"]["case_id"] + ".tnscope.vcf.gz",
        namemap_snv = vcf_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.sample_name_map",
        namemap_sv = vcf_dir + "SV.somatic." + config["analysis"]["case_id"] + ".tnscope.sample_name_map",
    benchmark:
        Path(benchmark_dir, 'sentieon_TNscope_' + config[ "analysis" ][ "case_id" ] + ".tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        tumor = "TUMOR",
        normal = "NORMAL",
        pcr_model = "NONE",
        tumor_options = VARCALL_PARAMS["tnscope"]["tumor"], 
        normal_options = VARCALL_PARAMS["tnscope"]["normal"], 
        sentieon_ml_tnscope = config["SENTIEON_TNSCOPE"],
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        case_name = config["analysis"]["case_id"]
    threads:
        get_threads(cluster_config, 'sentieon_TNscope')
    message:
        ("Calling SNVs and SVs using Sentieon TNscope and "
         "applying machine learning algorithm for sample {params.case_name}")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

intermediate_vcf={params.tmpdir}/tn_sentieon_varcall_file

{params.sentieon_exec} driver --algo TNscope \
-t {threads} \
-r {input.ref} \
-i {input.bamT} \
-q {input.recalT} \
-i {input.bamN} \
-q {input.recalN} \
--tumor_sample {params.tumor} \
--normal_sample {params.normal} \
--dbsnp {input.dbsnp} \
--pcr_indel_mode {params.pcr_model} \
{params.tumor_options} \
{params.normal_options} $intermediate_vcf;

{params.sentieon_exec} driver --algo TNModelApply \
-r {input.ref} \
-m {params.sentieon_ml_tnscope} \
-v $intermediate_vcf {output.vcf_all};

echo -e \"{params.tumor}\\tTUMOR\\n{params.normal}\\tNORMAL\" > {output.namemap_snv};
cp {output.namemap_snv} {output.namemap_sv}
rm -rf {params.tmpdir};
        """
