# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Hassan Foroughi Asl"

from BALSAMIC.tools import get_result_dir, get_conda_env

bam_dir = get_result_dir(config) + "/bam/"
vcf_dir = get_result_dir(config) + "/vcf/"
vep_dir = get_result_dir(config) + "/vep/"

mutect_dir = "mutect/"

rule mutect2_somatic:
  input:
    fa = config["path"]["genomefa"] + config["references"]["genomefa"],
    dbsnp = config["path"]["genomefa"] + config["references"]["dbsnp_all"],
    cosmic = config["path"]["genomefa"] + config["references"]["cosmic"],
    bamN = bam_dir + "normal.merged.bam", 
    bamT = bam_dir + "tumor.merged.bam",
    bed = vcf_dir + "split_bed/" + "{bedchrom}" + "." + config["bed"]["variant_panel"],
  output:
    vcf_dir + mutect_dir + "split_vcf/" + "{bedchrom}_" + config["vcf"]["mutect"]["default"] + ".gz"
  params:
    result_dir = vcf_dir + mutect_dir,
    conda = get_conda_env(config["conda_env_yaml"],"gatk")
  threads: 6
  shell:
    "source activate {params.conda};"
    "mkdir -p {params.result_dir}; "
    "gatk  -T MuTect2 "
        "-R {input.fa} "
        "--cosmic {input.cosmic} "
        "--dbsnp {input.dbsnp} "
        "-I:normal {input.bamN} "
        "-I:tumor {input.bamT} "
        "--annotation Coverage --useNewAFCalculator --annotation VariantType --annotateNDA " 
        "--disable_auto_index_creation_and_locking_when_reading_rods "
        "-L {input.bed} "
    " | bgzip > {output}; "
    "tabix -p vcf {output}; " 
    "source deactivate; "

rule mutect2_merge_chrom:
  input:
    expand(vcf_dir + mutect_dir + "split_vcf/{chrom}_" + config["vcf"]["mutect"]["default"] + ".gz", chrom=["1","10","11","12","13","14","15","16","17","18","19","2","20","21","22","3","4","5","6","7","8","9","X","Y"]) 
  output:
    vcf_dir + config["vcf"]["mutect"]["type"] + "/" + config["vcf"]["mutect"]["merged"]
  params:
    conda = get_conda_env(config["conda_env_yaml"],"bcftools"),
  shell:
    "source activate {params.conda} ; "
    "bcftools concat -o {output} -O z {input}; " 
    "tabix -f -p vcf {output}; "
    "source deactivate;" 

rule mutect_simple:
  input:
    vep_dir + "vep_" + config["vcf"]["mutect"]["merged"]
  output:
    tbl = vep_dir + "vep_table_" + config["vcf"]["mutect"]["merged"],
    vcf = vep_dir + "vep_simple_" + config["vcf"]["mutect"]["merged"]
  params:
    name = config["analysis"]["sample_id"],
    MVL = "/mnt/hds/proj/bioinfo/BALSAMIC/references/GRCh37/MVL/MSK_IMPAKT_supp_S11_Cheng_2015.bed.gz",
    conda = get_conda_env(config["conda_env_yaml"], "bcftools")
  shell:
    "source activate {params.conda};"
    "bcftools annotate "
        "--annotation {input} "
        "--mark-sites +CALLER=MUTECT2 "
        "-h <(echo '##INFO=<ID=CALLER,Number=1,Type=String,Description=\"VariantCaller\">') "
        "--remove \"^INF/DP,INF/CSQ\",\"^FMT/GT,FMT/AD,FMT/AF\" {input} "
    "| "
    "bcftools annotate "
        "--remove \"INFO/CALLER=MUTECT2\" - "
    "| "
    "bcftools annotate -a {params.MVL} -Oz "
        "-c CHROM,POS --mark-sites +\"MSK_MVL\" "
    " > {output.vcf}; "
    "HEADER=`bcftools view -h {input} | sed -n '/Consequence annotations/p' | sed 's/#.* //g;s/\">//g'`; "
    "bcftools view -f .,PASS {output.vcf} "
    "| "
    "bcftools query --print-header "
        "-f \'%CHROM\\t%POS\\t%REF\\t%ALT\\t%TYPE\\t%CALLER\\t[%AD{{0}}\\t][%AD{{1}}\\t][%AF\\t]%CSQ\\t%MSK_MVL\\n\' "
        "-s TUMOR "
    "| "
    "awk -v FS=\"\\t\" -v OFS=\"\\t\" "
        "'NR==1 {{ gsub(\"#\", \"\", $0); gsub(\" \",\"\",$0); "
                  "for (i=1; i<=NF; i++) gsub(/\[[[:digit:]]*\]/,\"\",$i); "
                  "print $1,$2,$3,$4,$5,$6,\"DP\",$7,$8,\"FILTERED\",$11,$10 }}"
        " NR>1 {{ print $1,$2,$3,$4,$5,$6,\"NA\",$7,$8,\"NA\",$11,$10 }}'"
    "| "
    "awk -v H=$HEADER -v OFS=\"\\t\" "
        "'NR==1 {{C=split(H,h,\"|\"); "
        " print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,h[2],h[3],h[4],h[5],h[6] }} "
        " NR>1 {{split($12,a,\",\"); for (x in a) {{ split(a[x],b,\"|\"); "
        " print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,b[2],b[3],b[4],b[5],b[6] }} }}' "
    "| bgzip > {output.tbl}"
