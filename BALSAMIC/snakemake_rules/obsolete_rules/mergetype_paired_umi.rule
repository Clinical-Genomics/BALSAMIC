# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Hassan Foroughi Asl"

from BALSAMIC.utils.rule import get_sample_type
from BALSAMIC.utils.rule import get_conda_env, get_picard_mrkdup

picarddup = get_picard_mrkdup(config)

rule mergeBam_normal_gatk:
  input:
    bamN = expand(bam_dir + "{mysample}.sorted." + picarddup + ".ralgn.bsrcl.bam", mysample=get_sample_type(config["samples"], "normal")),
  output:
    bamN = bam_dir + "normal.sorted." + picarddup + ".ralgn.bsrcl.merged.bam",
  params:
    conda = get_conda_env(config["bioinfo_tools"],"samtools")
  shell:
    "source activate {params.conda}; "
    "samtools merge {output.bamN} {input.bamN}; samtools index {output.bamN}; "
    

rule mergeBam_normal:
  input:
    bamN = expand(bam_dir + "{mysample}.unalg.umi.mrkadp.bwa.map.umi.cnsunalg.bwa.map.fltr.clip.bam", mysample=get_sample_type(config["samples"], "normal"))
  output:
    bamN = bam_dir + "normal.merged.bam", 
  params:
    conda = get_conda_env(config["bioinfo_tools"],"samtools")
  shell:
    "source activate {params.conda}; "
    "samtools merge {output.bamN} {input.bamN}; samtools index {output.bamN}; "
    

rule mergeBam_tumor_gatk:
  input:
    bamT = expand(bam_dir + "{mysample}.sorted." + picarddup + ".ralgn.bsrcl.bam", mysample=get_sample_type(config["samples"], "tumor"))
  output:
    bamT = bam_dir + "tumor.sorted." + picarddup + ".ralgn.bsrcl.merged.bam",
  params:
    conda = get_conda_env(config["bioinfo_tools"],"samtools")
  shell:
    "source activate {params.conda}; "
    "samtools merge {output.bamT} {input.bamT}; samtools index {output.bamT}; "
    

rule mergeBam_tumor:
  input:
    bamT = expand(bam_dir + "{mysample}.unalg.umi.mrkadp.bwa.map.umi.cnsunalg.bwa.map.fltr.clip.bam", mysample=get_sample_type(config["samples"], "tumor"))
  output:
    bamT = bam_dir + "tumor.merged.bam",
  params:
    conda = get_conda_env(config["bioinfo_tools"],"samtools")
  shell:
    "source activate {params.conda}; "
    "samtools merge {output.bamT} {input.bamT}; samtools index {output.bamT}; "
    
