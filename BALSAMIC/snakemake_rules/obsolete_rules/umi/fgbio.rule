#!python
# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

from BALSAMIC.utils.rule import get_conda_env, get_picard_mrkdup


rule fgbio_ExtractUmisFromBam:
    input:
        bam_dir + "{sample}.unalg.bam"
    output:
        bam_dir + "{sample}.unalg.umi.bam"
    params:
        tmpdir=bam_dir,
        conda = get_conda_env(config["conda_env_yaml"],"picard"),
    shell:
        """
source activate {params.conda}; 
java -Djava.io.tmpdir={params.tmpdir} -jar -Xms8G -Xmx16G $CONDA_PREFIX/share/fgbio/fgbio.jar \
ExtractUmisFromBam \
--input={input} \
--output={output} \
--read-structure=3M2S146T 3M2S146T \
--molecular-index-tags=ZA ZB \
--single-tag=RX
        """

rule fgbio_GroupReadsByUmi:
    input:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.bam"
    output:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.umi.bam"
    params:
        tmpdir=bam_dir,
        conda = get_conda_env(config["conda_env_yaml"],"picard"),
    shell:
        """
source activate {params.conda}; 
java -Djava.io.tmpdir={params.tmpdir} -jar -Xms8G -Xmx16G $CONDA_PREFIX/share/fgbio/fgbio.jar \
GroupReadsByUmi \
--strategy=paired \
--input={input} \
--output={output} \
--raw-tag=RX \
--assign-tag=MI \
--min-map-q=10 \
--edits=1
        """

rule fgbio_CallDuplexConsensusReads:
    input:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.umi.bam"
    output:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.umi.cnsunalg.bam"
    params:
        tmpdir=bam_dir,
        conda = get_conda_env(config["conda_env_yaml"],"picard"),
    shell:
        """
source activate {params.conda}; 
java -Djava.io.tmpdir={params.tmpdir} -jar -Xms8G -Xmx16G $CONDA_PREFIX/share/fgbio/fgbio.jar \
CallDuplexConsensusReads \
--input={input} \
--output={output} \
--min-reads=1 \
--error-rate-pre-umi=45 \
--error-rate-post-umi=30 \
--min-input-base-quality=30
        """

rule fgbio_FilterConsensusReads:
    input:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.umi.cnsunalg.bwa.map.bam"
    output:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.umi.cnsunalg.bwa.map.fltr.bam"
    params:
        tmpdir=bam_dir,
        conda = get_conda_env(config["conda_env_yaml"],"picard"),
        ref = config["path"]["genomefa"] + config["references"]["genomefa"]
    shell:
        """
source activate {params.conda}; 
java -Djava.io.tmpdir={params.tmpdir} -jar -Xms8G -Xmx16G $CONDA_PREFIX/share/fgbio/fgbio.jar \
FilterConsensusReads \
-i {input} \
-o {output} \
--ref {params.ref} \
--min-reads 3 1 1 \
--max-read-error-rate 0.05 \
--max-base-error-rate 0.1 \
--min-base-quality 50 \
--max-no-call-fraction 0.05
        """

rule fgio_ClipBam:
    input:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.umi.cnsunalg.bwa.map.fltr.bam"
    output:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.umi.cnsunalg.bwa.map.fltr.clip.bam"
    params:
        tmpdir=bam_dir,
        conda = get_conda_env(config["conda_env_yaml"],"picard"),
        ref = config["path"]["genomefa"] + config["references"]["genomefa"], 
    shell:
        """
source activate {params.conda}; 
java -Djava.io.tmpdir={params.tmpdir} -jar -Xms8G -Xmx16G $CONDA_PREFIX/share/fgbio/fgbio.jar \
ClipBam \
--input={input} \
--output={output} \
--ref={params.ref} \
--soft-clip=false \
--clip-overlapping-reads=true
        """

rule fgbio_CollectDuplexSeqMetrics:
    input:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.umi.bam"
    output:
        bam_dir + "{sample}.unalg.umi.mrkadp.bwa.map.umi.bam.duplex_qc.pdf"
    params:
        tmpdir=bam_dir,
        conda = get_conda_env(config["conda_env_yaml"],"picard"),
    shell:
        """
source activate {params.conda}; 
java -Djava.io.tmpdir={params.tmpdir} -jar -Xms8G -Xmx16G $CONDA_PREFIX/share/fgbio/fgbio.jar \
CollectDuplexSeqMetrics \
--input={input} \
--output={input} \
--description={wildcards.sample}
        """
