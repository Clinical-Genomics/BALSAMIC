"""Rules to align, mark duplicates and realign reads with Sentieon tools."""

rule sentieon_align_sort:
    input:
        ref = config["reference"]["reference_genome"],
        fastq_r1 = Path(fastq_dir, "{sample_type}.{sample}.{fastq_pattern}_1.fp.fastq.gz").as_posix(),
        fastq_r2 = Path(fastq_dir, "{sample_type}.{sample}.{fastq_pattern}_2.fp.fastq.gz").as_posix(),
        refidx = expand(config["reference"]["reference_genome"] + ".{prefix}", prefix=["amb","ann","bwt","pac","sa"])
    output:
        bam_out = Path(bam_dir, "{sample_type}.{sample}.{fastq_pattern}.align_sort.bam").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_align_sort_{sample_type}.{sample}.{fastq_pattern}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        sample_id = "{sample}",
        sample_type = lambda wildcards: config_model.get_sample_type_by_name(wildcards.sample, uppercase=True),
        fastq_pattern = "{fastq_pattern}"
    threads:
        get_threads(cluster_config, 'sentieon_align_sort')
    resources:
        runtime=1440,
        mem_mb=20000
    message:
        ("Align fastq reads using sentieon bwa-mem and sort reads using samtools for sample type: "
        "{params.sample_type} : {params.sample_id}, {params.fastq_pattern}")
    shell:
        """
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} bwa mem -M \
-R '@RG\\tID:{wildcards.fastq_pattern}\\tSM:{params.sample_type}\\tPL:ILLUMINA' \
-t {threads} \
-K 50000000 \
{input.ref} {input.fastq_r1} {input.fastq_r2} \
| {params.sentieon_exec} util sort \
-o {output.bam_out} \
-t {threads} \
--block_size 3G \
--sam2bam -i -;

rm -rf {params.tmpdir}
        """

