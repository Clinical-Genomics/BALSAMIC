# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule samtools_merge_index:
    input:
        bam_files = lambda wildcards: config_model.get_bam_name_per_lane(bam_dir = bam_dir, sample_name = wildcards.sample)
    output:
        bam = Path(bam_dir,"{sample_type}.{sample}.merged.bam").as_posix(),
    benchmark:
        Path(benchmark_dir,"samtools_merge_index_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("samtools") + ".sif").as_posix()
    params:
        sample_id="{sample}"
    threads:
        get_threads(cluster_config,"samtools_sort_index")
    message:
        "Merging lane bamfiles for sample: {params.sample_id}"
    shell:
        """
samtools merge --threads {threads} -o {output.bam} {input.bam_files} ;
samtools index -@ {threads} {output.bam};
        """

rule sentieon_dedup_consensus:
    input:
        ref = config["reference"]["reference_genome"],
        bam = Path(bam_dir,"{sample_type}.{sample}.merged.bam").as_posix(),
    output:
        bam = Path(bam_dir, "{sample_type}.{sample}.dedup.bam").as_posix(),
        score = Path(bam_dir, "{sample_type}.{sample}.dedup.score").as_posix(),
        metrics = Path(qc_dir, "{sample_type}.{sample}.dedup.metrics").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_dedup_{sample_type}.{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, 'sentieon_dedup')
    message:
        ("Collects read information using sentieon LocusCollector and collapse duplicate reads based on UMIs. "
         "Current sample: {params.sample_id}")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-t {threads} \
-i {input.bam} \
--algo LocusCollector \
--umi_ecc_dist 0 \
--consensus --umi_tag XR --fun score_info \
{output.score};

{params.sentieon_exec} driver \
-t {threads} \
-r {input.ref} \
-i {input.bam} \
--algo Dedup \
--score_info {output.score} \
--metrics {output.metrics} \
{output.bam};

sed 's/^LIBRARY/\\n## METRICS CLASS\tpicard\.sam\.DuplicationMetrics\\nLIBRARY/' -i {output.metrics}
        """


# NOTE: This rule is only applied to prevent VarDict from failing with error like this:
# Critical exception occurs on region: 20:39794721-39795011, program will be stopped.
# java.util.concurrent.CompletionException: java.lang.InternalError: a fault occurred in a recent unsafe memory access
# It's however unclear how this resolves the issue.

rule samtools_sort_index:
    input:
        bam = Path(bam_dir,"{sample_type}.{sample}.dedup.bam").as_posix(),
    output:
        bam = Path(bam_dir,"{sample_type}.{sample}.dedup_sorted.bam").as_posix(),
    benchmark:
        Path(benchmark_dir,"samtools_sort_index_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("samtools") + ".sif").as_posix()
    params:
        sample_id="{sample}"
    threads:
        get_threads(cluster_config,"samtools_sort_index")
    message:
        "Calculating alignment stats for sample: {params.sample_id}"
    shell:
        """
samtools sort --threads {threads} -o {output.bam} {input.bam};
samtools index -@ {threads} {output.bam};
        """


rule postprocess_bam:
    input:
        bam = Path(bam_dir,"{sample_type}.{sample}.dedup_sorted.bam").as_posix()
    output:
        postprocessed_bam = Path(bam_dir, "{sample_type}.{sample}.dedup_sorted_addRG.bam").as_posix(),
    benchmark:
        Path(benchmark_dir,"postprocess_bam_{sample_type}.{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("picard") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, "postprocess_bam")
    message:
        "Collapse readgroups for sample: {params.sample_id}"
    shell:
        """
export TMPDIR={params.tmpdir};

picard -Xmx75g AddOrReplaceReadGroups  \
-RGPU ILLUMINAi -RGID {wildcards.sample_type} -RGSM {wildcards.sample_type} \
-RGPL ILLUMINAi -RGLB ILLUMINAi -MAX_RECORDS_IN_RAM 1000000 \
-CREATE_INDEX true -CREATE_MD5_FILE true \
-TMP_DIR {params.tmpdir} \
-INPUT {input.bam}  \
-OUTPUT {output.postprocessed_bam}; 

samtools index {output.postprocessed_bam}; 

rm -rf {params.tmpdir};
        """
