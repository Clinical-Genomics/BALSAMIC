# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


rule sentieon_dedup_consensus:
    input:
        ref = config["reference"]["reference_genome"],
        bam = Path(bam_dir, "{sample_type}.{sample}.align_sort.bam").as_posix(),
    output:
        bam = Path(bam_dir, "{sample_type}.{sample}.dedup.bam").as_posix(),
        score = Path(bam_dir, "{sample_type}.{sample}.dedup.score").as_posix(),
        dedup_metrics = Path(qc_dir, "{sample_type}.{sample}.dedup_conensus.metrics").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_dedup_{sample_type}.{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, 'sentieon_dedup')
    message:
        ("Collects read information using sentieon LocusCollector and collapse duplicate reads based on UMIs. "
         "Current sample: {params.sample_id}")
    shell:
        """
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-t {threads} \
-r {input.ref} \
-i {input.bam} \
--algo LocusCollector \
--umi_ecc_dist 0 \
--consensus --umi_tag XR --fun score_info {output.score} ;

{params.sentieon_exec} driver \
-t {threads} \
-r {input.ref} \
-i {input.bam} \
--algo Dedup \
--score_info {output.score} \
--metrics {output.dedup_metrics} \
{output.bam} ;

rm -rf {params.tmpdir}
        """

rule samtools_fixmate:
    """
    This rule is added to fix a bug in Sentieon dedup with UMI consensus argument
    
    SAM validation error: 
    ERROR::INVALID_UNALIGNED_MATE_START:Record 12,Read name UMI-CTC-GAC-db9f21d8-A01901:175:H23G3DSX7:1:2231:18376:10739-D1,
    The unaligned mate start position is 10125, should be 0
    """
    input:
        ref = config["reference"]["reference_genome"],
        bam = Path(bam_dir,"{sample_type}.{sample}.dedup.bam").as_posix(),
    output:
        bam = Path(bam_dir,"{sample_type}.{sample}.dedup.fixmate.bam").as_posix(),
    benchmark:
        Path(benchmark_dir,"samtools_fixmate_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("samtools") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        postprocess_fixmate_script = get_script_path("postprocess_fixmate_bam.awk"),
        sample_id="{sample}"
    threads:
        get_threads(cluster_config,"samtools_fixmate")
    message:
        "Running samtools collate and fixmate for: {params.sample_id}"
    shell:
        """
export TMPDIR={params.tmpdir} ;
mkdir -p {params.tmpdir}/collate ;
mkdir -p {params.tmpdir}/sort ; 

samtools collate -@ {threads} -O -u {input.bam} {params.tmpdir}/collate/{wildcards.sample}_collate_tmp | \
samtools fixmate -O SAM --reference {input.ref} -@ {threads} - - | \
awk -f {params.postprocess_fixmate_script} - | \
samtools sort -@ {threads} -m 4G -O BAM -T {params.tmpdir}/sort/{wildcards.sample}_sort_tmp - | \
samtools calmd -@ {threads} -b - {input.ref} > {output.bam} ;
samtools index {output.bam} ;

rm -rf {params.tmpdir}
        """

rule cap_base_quality:
    input:
        bam = Path(bam_dir,"{sample_type}.{sample}.dedup.fixmate.bam").as_posix()
    output:
        bam = Path(bam_dir,"{sample_type}.{sample}.dedup.fixmate.qualcapped.bam").as_posix(),
    benchmark:
        Path(benchmark_dir,"cap_base_quality_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("pysam") + ".sif").as_posix()
    params:
        sample_id = "{sample}",
        cap_base_qualities = get_script_path("cap_base_quality_in_bam.py"),
        max_quality = params.bam_post_processing.manta_max_base_quality
    threads:
        get_threads(cluster_config, "cap_base_quality")
    message:
        "Capping base qualities to {params.max_quality} in bamfile using pysam in sample: {params.sample_id}"
    shell:
        """
python {params.cap_base_qualities} --max-quality {params.max_quality} {input.bam} {output.bam} ; 
samtools index -@ {threads} {output.bam}
        """
