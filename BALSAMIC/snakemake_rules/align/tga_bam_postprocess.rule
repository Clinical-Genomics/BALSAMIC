# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


# NOTE: This rule is only applied to prevent VarDict from failing with error like this:
# Critical exception occurs on region: 20:39794721-39795011, program will be stopped.
# java.util.concurrent.CompletionException: java.lang.InternalError: a fault occurred in a recent unsafe memory access
# It's however unclear how this resolves the issue.


rule cap_base_quality:
    input:
        bam = Path(bam_dir, "{sample_type}.{sample}.consensuscalled_umi.bam").as_posix()
    output:
        bam = Path(bam_dir,"{sample_type}.{sample}.consensuscalled_umi_qualcapped.bam").as_posix(),
    benchmark:
        Path(benchmark_dir,"cap_base_quality_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("pysam") + ".sif").as_posix()
    params:
        sample_id = "{sample}",
        cap_base_qualities = get_script_path("cap_base_quality_in_bam.py")
    threads:
        get_threads(cluster_config, "cap_base_quality")
    message:
        "Capping base qualities to 70 in bamfile using pysam in sample: {params.sample_id}"
    shell:
        """
python {params.cap_base_qualities} --max_quality 70 {input.bam} {output.bam}
samtools index -@ {threads} {output.bam}
        """

rule samtools_sort_index:
    input:
        bam = Path(bam_dir,"{sample_type}.{sample}.consensuscalled_umi_qualcapped.bam.bam").as_posix(),
    output:
        bam = Path(bam_dir,"{sample_type}.{sample}.consensuscalled_umi_qualcapped_sorted.bam").as_posix(),
    benchmark:
        Path(benchmark_dir,"samtools_sort_index_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("samtools") + ".sif").as_posix()
    params:
        sample_id="{sample}"
    threads:
        get_threads(cluster_config,"samtools_sort_index")
    message:
        "Calculating alignment stats for sample: {params.sample_id}"
    shell:
        """
samtools sort --threads {threads} -o {output.bam} {input.bam};
samtools index -@ {threads} {output.bam};
        """

rule postprocess_bam:
    input:
        bam = Path(bam_dir,"{sample_type}.{sample}.consensuscalled_umi_qualcapped.bam").as_posix()
    output:
        postprocessed_bam = Path(bam_dir, "{sample_type}.{sample}.dedup_sorted_addRG.bam").as_posix(),
    benchmark:
        Path(benchmark_dir,"postprocess_bam_{sample_type}.{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("picard") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, "postprocess_bam")
    message:
        "Collapse readgroups for sample: {params.sample_id}"
    shell:
        """
export TMPDIR={params.tmpdir};

picard -Xmx75g AddOrReplaceReadGroups  \
-RGPU ILLUMINAi -RGID {wildcards.sample_type} -RGSM {wildcards.sample_type} \
-RGPL ILLUMINAi -RGLB ILLUMINAi -MAX_RECORDS_IN_RAM 1000000 \
-CREATE_INDEX true -CREATE_MD5_FILE true \
-TMP_DIR {params.tmpdir} \
-INPUT {input.bam}  \
-OUTPUT {output.postprocessed_bam}; 

samtools index {output.postprocessed_bam}; 

rm -rf {params.tmpdir};
        """