"""Rules to align, mark duplicates and realign reads with Sentieon tools."""

rule sentieon_dedup:
    input:
        bam_files = lambda wildcards: config_model.get_bam_name_per_lane(bam_dir = bam_dir, sample_name = wildcards.sample)
    output:
        bam = Path(bam_dir, "{sample_type}.{sample}.dedup.bam").as_posix(),
        score = Path(bam_dir, "{sample_type}.{sample}.dedup.score").as_posix(),
        metrics = Path(qc_dir, "{sample_type}.{sample}.dedup.metrics").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_dedup_{sample_type}.{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, 'sentieon_dedup')
    message:
        ("Collects read information using sentieon LocusCollector and mark duplicated reads. "
         "Current sample: {params.sample_id}")
    shell:
        """
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

shell_bam_files=$(echo {input.bam_files} | sed 's/ / -i /g') ;

{params.sentieon_exec} driver \
-t {threads} \
-i $shell_bam_files \
--algo LocusCollector \
--fun score_info {output.score} ;

{params.sentieon_exec} driver \
-t {threads} \
-i $shell_bam_files \
--algo Dedup \
--score_info {output.score} \
--metrics {output.metrics} \
{output.bam};

rm -rf {params.tmpdir}
        """

rule sentieon_realign:
    input:
        ref = config["reference"]["reference_genome"],
        mills = config["reference"]["mills_1kg"],
        bam = Path(bam_dir, "{sample_type}.{sample}.dedup.bam").as_posix(),
        indel_1kg = config["reference"]["known_indel_1kg"]
    output:
        bam = Path(bam_dir, "{sample_type}.{sample}.dedup.realign.bam").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_realign_{sample_type}.{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config_model.sentieon.sentieon_exec,
        sentieon_lic = config_model.sentieon.sentieon_license,
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, 'sentieon_realign')
    message:
        "INDEL realignment using sentieon realigner for sample: {params.sample_id}"
    shell:
        """
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-r {input.ref} \
-t {threads} \
-i {input.bam} \
--algo Realigner \
-k {input.mills} \
-k {input.indel_1kg} \
{output}; 

rm -rf {params.tmpdir}
        """


rule sentieon_base_calibration:
    input:
        ref = config["reference"]["reference_genome"],
        mills = config["reference"]["mills_1kg"],
        indel_1kg = config["reference"]["known_indel_1kg"],
        dbsnp = config["reference"]["dbsnp"],
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_type = wildcards.sample_type)
    output:
        recal_data_table = Path(bam_dir, "{sample_type}.recal_data.table").as_posix(),
        qual_recal = Path(bam_dir, "{sample_type}.recal.csv").as_posix(),
        qual_recal_plot = Path(bam_dir, "{sample_type}.recal.pdf").as_posix(),
    benchmark:
        Path(benchmark_dir, "sentieon_base_calibration_{sample_type}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample = "sample_type"
    threads:
        get_threads(cluster_config, 'sentieon_base_calibration')
    message:
        "Recalibrating bases using sentieon tools for {params.sample}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-r {input.ref} \
-t {threads} \
-i {input.bam} \
--algo QualCal \
-k {input.dbsnp} \
-k {input.mills} \
-k {input.indel_1kg} \
{output.recal_data_table};

{params.sentieon_exec} driver \
-r {input.ref} \
-t {threads} \
-i {input.bam} \
-q {output.recal_data_table} \
--algo QualCal \
-k {input.dbsnp} \
-k {input.mills} \
-k {input.indel_1kg} \
{output.recal_data_table}.post;

{params.sentieon_exec} driver \
-t {threads} \
--algo QualCal \
--plot --before {output.recal_data_table} \
--after {output.recal_data_table}.post \
{output.qual_recal};

{params.sentieon_exec} plot QualCal \
-o {output.qual_recal_plot} {output.qual_recal};

rm -rf {params.tmpdir};
        """