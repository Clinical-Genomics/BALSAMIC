# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

# Following rule will take input fastq files, align them using bwa mem, and convert the output to sam format

rule bwa_mem:
    input:
        fa = config["reference"]["reference_genome"],
        fastq_r1 = Path(fastq_dir, "{fastqpattern}_1.fp.fastq.gz").as_posix(),
        fastq_r2 = Path(fastq_dir, "{fastqpattern}_2.fp.fastq.gz").as_posix(),
        refidx = expand(config["reference"]["reference_genome"] + ".{prefix}", prefix=["amb","ann","bwt","pac","sa"])
    output:
        bamout = temp(Path(bam_dir, "{fastqpattern}_align_sort.bam").as_posix())
    benchmark:
        Path(benchmark_dir, "bwa_mem_{fastqpattern}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bwa") + ".sif").as_posix()
    params:
        bam_header = params.common.align_header,
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sample_id=get_samplename,
        sample_type=get_sampletype,
        fastqpattern="{fastqpattern}"
    threads:
        get_threads(cluster_config, "bwa_mem")
    message:
        ("Align fastq files with bwa-mem to reference genome and "
        "sort using samtools for sampletype: {params.sample_type} : {params.sample_id}, {params.fastqpattern}")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

bwa mem \
-t {threads} \
-R '@RG\\tID:{wildcards.fastqpattern}\\tSM:{params.sample_type}\\tPL:ILLUMINA'  \
-M \
-v 1 \
{input.fa} {input.fastq_r1} {input.fastq_r2} \
| samtools sort -T {params.tmpdir} \
--threads {threads} \
--output-fmt BAM \
-o {output.bamout} - ;

samtools index -@ {threads} {output.bamout};
rm -rf {params.tmpdir};
        """


rule picard_markduplicates:
    input:
        bamfiles = get_mapping
    output:
        mrkdup = Path(bam_dir, "{sample}.sorted." + picarddup + ".bam").as_posix(),
        picard_stats = Path(bam_dir, "{sample}.sorted." + picarddup + ".txt").as_posix(),
        flagstats = Path(bam_dir, "{sample}.samtools.flagstats.txt").as_posix(),
        idxstats = Path(bam_dir, "{sample}.samtools.idxstats.txt").as_posix(),
        stats = Path(bam_dir, "{sample}.samtools.stats.txt").as_posix(),
    benchmark:
        Path(benchmark_dir,"picard_markduplicates_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("picard") + ".sif").as_posix()
    params:
        mem = "16g",
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        rm_dup = "FALSE" if picarddup == "mrkdup" else "TRUE",
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, "picard_markduplicates")
    message:
        "Picard marking duplicates and samtool indexing for sample: {params.sample_id}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

shellbamfiles=$(echo {input.bamfiles} | sed 's/ / I=/g') ;

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
MarkDuplicates \
I=$shellbamfiles \
OUTPUT={output.mrkdup} \
VALIDATION_STRINGENCY=SILENT \
MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000 \
REMOVE_DUPLICATES={params.rm_dup} \
METRICS_FILE='{output.picard_stats}';

samtools index {output.mrkdup};

samtools flagstats --threads {threads} {output.mrkdup} > {output.flagstats};
samtools stats --threads {threads} {output.mrkdup} > {output.stats};
samtools idxstats --threads {threads} {output.mrkdup} > {output.idxstats};

rm -rf {params.tmpdir};
        """
