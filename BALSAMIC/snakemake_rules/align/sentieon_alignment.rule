# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


rule sentieon_align_sort:
    input:
        ref = config["reference"]["reference_genome"],
        fastq_r1 = Path(fastq_dir, "{fastqpattern}_1.fp.fastq.gz").as_posix(),
        fastq_r2 = Path(fastq_dir, "{fastqpattern}_2.fp.fastq.gz").as_posix(),
        refidx = expand(config["reference"]["reference_genome"] + ".{prefix}", prefix=["amb","ann","bwt","pac","sa"])
    output:
        bamout = Path(bam_dir, "{sample}_align_sort_{fastqpattern}.bam").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_align_sort_{sample}_{fastqpattern}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        header = params.common.align_header,
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample_id = "{sample}",
        sample_type = lambda wildcards: sample_dict[wildcards.sample]["sample_type"],
        fastqpattern = "{fastqpattern}"
    threads:
        get_threads(cluster_config, 'sentieon_align_sort')
    message:
        "Align fastq reads using sentieon bwa-mem and sort reads using samtools for sampletype: {params.sample_type} : {params.sample_id}, {params.fastqpattern}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} bwa mem -M \
-R '@RG\\tID:{wildcards.fastqpattern}\\tSM:{params.sample_type}\\tPL:ILLUMINA' \
-t {threads} \
-K 50000000 \
{input.ref} {input.fastq_r1} {input.fastq_r2} \
| {params.sentieon_exec} util sort \
-o {output.bamout} \
-t {threads} \
--block_size 3G \
--sam2bam -i -;
        """

rule sentieon_dedup:
    input:
        bamfiles = lambda wildcards: sample_dict[wildcards.sample]["bam"]["align_sort_bamlist"]
    output:
        bam = Path(bam_dir, "{sample}.dedup.bam").as_posix(),
        score = Path(bam_dir, "{sample}.dedup.score").as_posix(),
        metrics = Path(bam_dir, "{sample}.dedup.metrics").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_dedup_{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, 'sentieon_dedup')
    message:
        "Collects read information using sentieon LocusCollector and remove duplicated reads for sample: {params.sample_id}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

shellbamfiles=$(echo {input.bamfiles} | sed 's/ / -i /g') ;

{params.sentieon_exec} driver \
-t {threads} \
-i $shellbamfiles \
--algo LocusCollector \
--fun score_info \
{output.score};

{params.sentieon_exec} driver \
-t {threads} \
-i $shellbamfiles \
--algo Dedup \
--rmdup \
--score_info {output.score} \
--metrics {output.metrics} \
{output.bam};
        """


rule sentieon_realign:
    input:
        ref = config["reference"]["reference_genome"],
        mills = config["reference"]["mills_1kg"],
        indel_1kg = config["reference"]["1kg_known_indel"],
        bam = Path(bam_dir, "{sample}.dedup.bam").as_posix()
    output:
        bam = Path(bam_dir, "{sample}.dedup.realign.bam").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_realign_{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, 'sentieon_realign')
    message:
        "INDEL realignment using sentieon realigner for sample: {params.sample_id}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-r {input.ref} \
-t {threads} \
-i {input.bam} \
--algo Realigner \
-k {input.mills} \
-k {input.indel_1kg} \
{output}; 
        """

