# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

# Following rule will take input fastq files, align them using bwa mem, and convert the output to sam format


rule bwa_mem:
    input:
        fa = config["reference"]["reference_genome"],
        fastq_r1=fastq_dir + "{sample}_1.fp.fastq.gz",
        fastq_r2=fastq_dir + "{sample}_2.fp.fastq.gz",
        refidx = expand(config["reference"]["reference_genome"] + ".{prefix}", prefix=["amb","ann","bwt","pac","sa"])
    output:
        bam_out=Path(bam_dir,"{sample}_align_sort.bam").as_posix()
    benchmark:
        Path(benchmark_dir, "bwa_mem_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("bwa") + ".sif").as_posix()
    params:
        bam_header = params.common.align_header,
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, "bwa_mem")
    message:
        ("Align fastq files with bwa-mem to reference genome and "
        "sort using samtools for sample: {params.sample_id}")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

bwa mem \
-t {threads} \
-R {params.bam_header}  \
-M \
-v 1 \
{input.fa} {input.fastq_r1} {input.fastq_r2} \
| samtools sort -T {params.tmpdir} \
--threads {threads} \
--output-fmt BAM \
-o {output.bam_out} - ;

samtools index -@ {threads} {output.bam_out};
rm -rf {params.tmpdir};
        """


rule picard_markduplicates:
    input:
        Path(bam_dir, "{sample}_align_sort.bam").as_posix()
    output:
        mrkdup = Path(bam_dir, "{sample_type}.{sample}.dedup_sorted.bam").as_posix(),
        picard_stats = Path(qc_dir, "{sample_type}.{sample}.dedup.metrics").as_posix(),
    benchmark:
        Path(benchmark_dir,"picard_{sample_type}_markduplicates_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("picard") + ".sif").as_posix()
    params:
        mem = "16g",
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, "picard_markduplicates")
    message:
        "Picard marking duplicates and samtool indexing for sample: {params.sample_id}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
MarkDuplicates \
INPUT={input} \
OUTPUT={output.mrkdup}_markdup.bam \
VALIDATION_STRINGENCY=SILENT \
MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000 \
REMOVE_DUPLICATES=FALSE \
METRICS_FILE='{output.picard_stats}';

samtools index {output.mrkdup}_markdup.bam ;

picard -Xmx150g FixMateInformation -ADD_MATE_CIGAR true -MAX_RECORDS_IN_RAM 10000000 -CREATE_INDEX true -CREATE_MD5_FILE true" \
-TMP_DIR {params.tmpdir} \
-INPUT {output.mrkdup}_markdup.bam \
-OUTPUT {params.tmpdir}/{wildcards.sample_type}.fixed.bam;

samtools view --threads {threads} -O BAM -f 4 {params.tmpdir}/{wildcards.sample_type}.fixed.bam \
-o {params.tmpdir}/{wildcards.sample_type}.fixed.um.bam;

samtools index {params.tmpdir}/{wildcards.sample_type}.fixed.um.bam;

samtools view --threads {threads} -O BAM -F 4 {params.tmpdir}/{wildcards.sample_type}.fixed.bam \
-o {params.tmpdir}/{wildcards.sample_type}.fixed.m.bam;

samtools index {params.tmpdir}/{wildcards.sample_type}.fixed.m.bam;

picard -Xmx150g AddOrReplaceReadGroups -RGPU ILLUMINAi -RGID {wildcards.sample_type} -RGSM {wildcards.sample_type} -RGPL ILLUMINAi -RGLB ILLUMINAi -MAX_RECORDS_IN_RAM 1000000 -CREATE_INDEX true -CREATE_MD5_FILE true \
-TMP_DIR {params.tmpdir} \
-INPUT {params.tmpdir}/{wildcards.sample_type}.fixed.m.bam \
-OUTPUT {output.mrkdup}; 

samtools index {output.mrkdup}; 

rm -rf {params.tmpdir};
        """
