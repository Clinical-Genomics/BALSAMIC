"""Rule to compress bamfile to the cram format."""


rule bam_compress:
    input:
        bam = lambda wildcards: balsamic.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample_name)
        fasta = config["reference"]["reference_genome"]
    output:
        cram_done = bam_dir + "{sample}.bam_compressed"
    benchmark:
        Path(benchmark_dir, "SamtoolsCompressCram_" + "{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("compress") + ".sif").as_posix()
    params:
        sample_id = "{sample}",
        sample_type = lambda wildcards: balsamic.get_sample_type_by_name(wildcards.sample),
        cram = lambda wildcards: balsamic.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample_name).replace(".bam", ".cram")
    threads:
        get_threads(cluster_config, "bam_compress")
    message:
        "Compressing bam to cram for {params.sample_type} : {params.sample_id}"
    shell:
        """
samtools view -h -T {input.fasta} --threads {threads} -C -o {params.cram} {input.bam}; 
samtools index {params.cram}; 
echo "Finished compressing bamfile: {input.bam} to {params.cram}" >> {output.cram_done}
        """
