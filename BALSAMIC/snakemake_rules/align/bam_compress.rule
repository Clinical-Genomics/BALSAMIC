"""Rule to compress bamfile to the cram format."""


rule bam_compress_tumor:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        fasta = config["reference"]["reference_genome"]
    output:
        cram = Path(bam_dir + "tumor.{sample}.cram").as_posix()
    benchmark:
        Path(benchmark_dir, "bam_compress_tumor_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("compress") + ".sif").as_posix()
    params:
        sample_id = "{sample}",
        housekeeper_id= {"id": "{sample}", "tags": "tumor"}
    message:
        "Compressing bam to cram for {params.sample_id}"
    shell:
        """
samtools view -h -T {input.fasta} --threads {resources.threads} -C -o {output.cram} {input.bam}; 
samtools index {output.cram}; 
        """

rule bam_compress_normal:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        fasta = config["reference"]["reference_genome"]
    output:
        cram = Path(bam_dir, "normal.{sample}.cram").as_posix()
    benchmark:
        Path(benchmark_dir, "bam_compress_normal_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("compress") + ".sif").as_posix()
    params:
        sample_id = "{sample}",
        housekeeper_id= {"id": "{sample}", "tags": "normal"}
    message:
        "Compressing bam to cram for {params.sample_id}"
    shell:
        """
samtools view -h -T {input.fasta} --threads {resources.threads} -C -o {output.cram} {input.bam}; 
samtools index {output.cram}; 
        """
