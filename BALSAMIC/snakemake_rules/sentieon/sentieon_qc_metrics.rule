# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

from BALSAMIC.utils.rule import get_threads


def repeat(param, values):
    param_values = []
    
    for value in values:
        param_values.append(" ".join(map(str, [param, value])))

    return " ".join(param_values)


rule sentieon_wgs_metrics:
    input:
        bam = bam_dir + '{sample}.dedup.bam',
        reference = config["reference"]["reference_genome"]
    output:
        wgs_metrics = qc_dir + "{sample}_sentieon_wgs_metrics.txt",
        coverage_metrics = qc_dir + "{sample}_coverage"
    params:
        tmpdir = bam_dir,
        min_base_qual = '10',
        gene_list = config["reference"]["refGene"],
        cov_threshold = repeat("--cov_thresh", [50, 100, 150, 200, 250]),
        sentieon_exec = SENTIEON_INSTALL_DIR + "/bin/sentieon",
        sentieon_lic = SENTIEON_LICENSE,
    threads: get_threads(cluster_config, 'sentieon_wgs_metrics')
    benchmark: 
        benchmark_dir + 'sentieon_wgs_metrics_' + "{sample}_wgs_metrics.tsv"
    shell:
        """
export SENTIEON_LICENSE={params.sentieon_lic};

rand_str=$(openssl rand -hex 5);
export SENTIEON_TMPDIR={params.tmpdir}/${{rand_str}};

{params.sentieon_exec} driver -i {input.bam} -r {input.reference} --algo WgsMetricsAlgo --min_base_qual {params.min_base_qual} {output.wgs_metrics};

{params.sentieon_exec} driver -i {input.bam} -r {input.reference} --algo CoverageMetrics --gene_list {params.gene_list} {params.cov_threshold} {output.coverage_metrics};
        """
