# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Hassan Foroughi Asl"

from BALSAMIC.utils.rule import get_conda_env
from BALSAMIC.utils.rule import get_sample_type

def get_pon(config):
    """ return pon cli string, complete with file """
    if "PON" in config["analysis"]:
        return os.path.abspth(config["analysis"]["PON"])
    else:
        return None

rule sentieon_TNsnv_tumor_only:
  input:
    bam = expand(bam_dir + "{mysample}.dedup.realign.bam", mysample=get_sample_type(config["samples"], "tumor")),
    recal_data_table = expand(bam_dir + "{mysample}.dedup.realign.recal_data.table", mysample=get_sample_type(config["samples"], "tumor")),
    ref = config["reference"]["reference_genome"],
    dbsnp = config["reference"]["dbsnp"],
    cosmic = config["reference"]["cosmic"],
  output:
    vcf = vcf_dir + config["analysis"]["case_id"] + ".tnsnv.vcf.gz",
    stats = vcf_dir + config["analysis"]["case_id"] + ".tnsnv.call_stats",
  params:
    tumor = get_sample_type(config["samples"], "tumor"),
    pon = " " if get_pon(config) is None else " ".join(["--pon", get_pon(config)]), 
    sentieon_exec = SENTIEON_INSTALL_DIR + "/bin/sentieon",
    sentieon_lic = SENTIEON_LICENSE, 
  threads: 16
  log:
    bam_dir + config["analysis"]["case_id"] + ".tnsnv.log"
  shell:
    """
export SENTIEON_LICENSE={params.sentieon_lic};
{params.sentieon_exec} driver -r {input.ref} -t {threads} -q {input.recal_data_table} -i {input.bam} --algo TNsnv --tumor_sample {params.tumor} {params.pon} --cosmic {input.cosmic} --dbsnp {input.dbsnp} --call_stats_out {output.stats} {output.vcf} 
    """

rule sentieon_TNhaplotyper_tumor_only:
  input:
    bam = expand(bam_dir + "{mysample}.dedup.realign.bam", mysample=get_sample_type(config["samples"], "tumor")),
    recal_data_table = expand(bam_dir + "{mysample}.dedup.realign.recal_data.table", mysample=get_sample_type(config["samples"], "tumor")),
    ref = config["reference"]["reference_genome"],
    dbsnp = config["reference"]["dbsnp"],
    cosmic = config["reference"]["cosmic"],
  output:
    vcf = vcf_dir + config["analysis"]["case_id"] + ".tnhaplotyper.vcf.gz",
  params:
    tumor = get_sample_type(config["samples"], "tumor"),
    pon = " " if get_pon(config) is None else " ".join(["--pon", get_pon(config)]), 
    sentieon_exec = SENTIEON_INSTALL_DIR + "/bin/sentieon",
    sentieon_lic = SENTIEON_LICENSE, 
  threads: 16
  log:
    bam_dir + config["analysis"]["case_id"] + ".tnsnv.log"
  shell:
    """
export SENTIEON_LICENSE={params.sentieon_lic};
{params.sentieon_exec} driver -r {input.ref} -t {threads} -i {input.bam} -q {input.recal_data_table} --algo TNhaplotyper --tumor_sample {params.tumor} {params.pon} --cosmic {input.cosmic} --dbsnp {input.dbsnp} {output.vcf} 
    """
