# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Hassan Foroughi Asl"

from BALSAMIC.utils.rule import get_conda_env, get_sample_type

rule sentieon_TN_corealign:
  input:
    ref = config["reference"]["reference_genome"],
    bamT = expand(bam_dir + "{mysample}.dedup.realign.bam", mysample=get_sample_type(config["samples"], "tumor")),
    bamN = expand(bam_dir + "{mysample}.dedup.realign.bam", mysample=get_sample_type(config["samples"], "normal")),
    recalT = expand(bam_dir + "{mysample}.dedup.realign.recal_data.table", mysample=get_sample_type(config["samples"], "tumor")),
    recalN = expand(bam_dir + "{mysample}.dedup.realign.recal_data.table", mysample=get_sample_type(config["samples"], "normal")),
    mills = config["reference"]["mills_1kg"],
    indel_1kg = config["reference"]["known_indel_1kg"],
  output:
    bam = bam_dir + config["analysis"]["sample_id"] + ".corealign.bam"
  params:
    sentieon_exec = SENTIEON_INSTALL_DIR + "/bin/sentieon",
    sentieon_lic = SENTIEON_LICENSE, 
  threads: 16
  log:
    bam_dir + config["analysis"]["sample_id"] + ".corealign.log"
  shell:
    """
export SENTIEON_LICENSE={params.sentieon_lic};
{params.sentieon_exec} driver -r {input.ref} -t {threads} -i {input.bamT} -i {input.bamN} -q {input.recalT} -q {input.recalN} --algo Realigner -k {input.mills} -k {input.indel_1kg}Â {output.bam}
    """

rule sentieon_TNsnv:
  input:
    bam = bam_dir + config["analysis"]["sample_id"] + ".corealign.bam",
    ref = config["reference"]["reference_genome"],
    dbsnp = config["reference"]["dbsnp"],
  output:
    vcf = vcf_dir + config["analysis"]["sample_id"] + ".tnsnv.vcf.gz",
    stats = vcf_dir + config["analysis"]["sample_id"] + ".tnsnv.call_stats",
  params:
    tumor = get_sample_type(config["samples"], "tumor"),
    normal = get_sample_type(config["samples"], "normal"),
    sentieon_exec = SENTIEON_INSTALL_DIR + "/bin/sentieon",
    sentieon_lic = SENTIEON_LICENSE, 
  threads: 16
  log:
    bam_dir + config["analysis"]["sample_id"] + ".tnsnv.log"
  shell:
    """
export SENTIEON_LICENSE={params.sentieon_lic};
{params.sentieon_exec} driver -r {input.ref} -t {threads} -i {input.bam} --algo TNsnv --tumor_sample {params.tumor} --normal_sample {params.normal} --dbsnp {input.dbsnp} --call_stats_out {output.stats} {output.vcf} 
    """

rule sentieon_TNhaplotyper:
  input:
    bam = bam_dir + config["analysis"]["sample_id"] + ".corealign.bam",
    ref = config["reference"]["reference_genome"],
    dbsnp = config["reference"]["dbsnp"],
  output:
    vcf = vcf_dir + config["analysis"]["sample_id"] + ".tnhaplotyper.vcf.gz",
  params:
    tumor = get_sample_type(config["samples"], "tumor"),
    normal = get_sample_type(config["samples"], "normal"),
    sentieon_exec = SENTIEON_INSTALL_DIR + "/bin/sentieon",
    sentieon_lic = SENTIEON_LICENSE, 
  threads: 16
  log:
    bam_dir + config["analysis"]["sample_id"] + ".tnsnv.log"
  shell:
    """
export SENTIEON_LICENSE={params.sentieon_lic};
{params.sentieon_exec} driver -r {input.ref} -t {threads} -i {input.bam} --algo TNhaplotyper --tumor_sample {params.tumor} --normal_sample {params.normal} --dbsnp {input.dbsnp} {output.vcf}
    """
