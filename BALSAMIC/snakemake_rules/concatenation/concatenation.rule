# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule concatenate:
    """Merge fastq files per lane into a single forward and reverse fastq."""
    input:
        fwd_fastqs = lambda wildcards: balsamic.get_all_fastqs_for_sample(
            sample_name = wildcards.sample, fastq_types = [FastqName.FWD]),
        rev_fastqs = lambda wildcards: balsamic.get_all_fastqs_for_sample(
            sample_name = wildcards.sample, fastq_types = [FastqName.REV])
    output:
        concat_fwd = fastq_dir + "{sample}_concat_R_1.fp.fastq.gz",
        concat_rev = fastq_dir + "{sample}_concat_R_2.fp.fastq.gz"
    benchmark:
        Path(benchmark_dir, "concatenated_{sample}.tsv").as_posix()
    params:
        fastq_dir = fastq_dir,
        sample = "{sample}",
        read = "{read}"
    threads:
        get_threads(cluster_config, "concatenate")
    message:
        "Sample {params.sample} and read {params.read} FASTQ concatenation"
    shell:
        """
        cat {input.fwd_fastqs} > {output.concat_fwd}
        cat {input.rev_fastqs} > {output.concat_rev}
        """
