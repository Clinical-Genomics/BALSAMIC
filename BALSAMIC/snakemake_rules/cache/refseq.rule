# ##########################################################
# # Preprocess refseq file by fetching relevant columns and
# # standardize the chr column
# ##########################################################
#
#
# rule prepare_refgene:
#     input:
#         cache_config.container_paths,
#         refgene_txt=refgene_txt_url.get_output_file,
#         refgene_sql=refgene_sql_url.get_output_file,
#         accessible_regions=access_regions_url.get_output_file,
#     params:
#         refgene_sql_awk=get_script_path("refseq_sql.awk"),
#     output:
#         refflat=refgene_txt_url.get_output_file.replace("txt", "flat"),
#         bed=refgene_txt_url.get_output_file.replace("txt", "flat") + ".bed",
#     log:
#         refgene_sql=Path(reference_dir, "genome", "refgene_sql.log"),
#         refgene_txt=Path(reference_dir, "genome", "refgene_txt.log"),
#     singularity:
#         Path(
#             singularity_image_path, config["bioinfo_tools"].get("bedtools") + ".sif"
#         ).as_posix()
#     shell:
#         """
# header=$(awk -f {params.refgene_sql_awk} {input.refgene_sql});
# (echo \"$header\"; cat {input.refgene_txt};) \
# | csvcut -t -c chrom,exonStarts,exonEnds,name,score,strand,exonCount,txStart,txEnd,name2 \
# | csvformat -T \
# | bedtools expand -c 2,3 \
# | awk '$1~/chr[1-9]/ && $1!~/[_]/' | cut -c 4- | sort -k1,1 -k2,2n > {output.bed};
#
# awk -v OFS=\"\\t\" '$3!~/_/ {{ gsub(\"chr\",\"\",$3); $1=$13; print }}' {input.refgene_txt} \
# | cut -f 1-11 > {output.refflat};
# sed -i 's/chr//g' {input.refgene_txt};
# sed -i 's/chr//g' {input.accessible_regions};
#         """
