# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule dragen_align_call_tumor_only:
    input:
        ref = config["reference"]["reference_genome"],
        read1 = Path(fastq_dir, "{mysample}_1.fp.fastq.gz".format(mysample=tumor_sample)).as_posix(),
        read2 = Path(fastq_dir, "{mysample}_2.fp.fastq.gz".format(mysample=tumor_sample)).as_posix(),
    output:
        bam = Path(result_dir, "dragen", config["analysis"]["case_id"] + ".bam").as_posix(),
        vcf = Path(result_dir, "dragen", "SNV.somatic." + config["analysis"]["case_id"] + ".dragen.vcf.gz").as_posix()
    benchmark:
        Path(benchmark_dir, "dragen_align_call_tumor_only" + config["analysis"]["case_id"] + ".tsv").as_posix()
    params:
        tmpdir = "/staging/",
        output_dir = vcf_dir,
        sample_name = tumor_sample,
        output_file_prefix = "SNV.somatic." + config["analysis"]["case_id"] + ".dragen.vcf.gz"
    threads:
        get_threads(cluster_config, "dragen_align_call_tumor_only")
    message:
        "DRAGEN align and variant call for {params.sample_name}"
    shell:
         """
echo "Running DRAGEN"
echo "Host: " $HOSTNAME

echo "Setting ulimit"
ulimit -n 65535
ulimit -u 16384

echo "Setting PATH"
export PATH=$PATH:/opt/edico/bin/

echo "will run the following DRAGEN command"
echo dragen -f \
-r {input.ref} \
--tumor-fastq1 {input.read1} \
--tumor-fastq2 {input.read2} \
--enable-variant-caller true \
--RGID-tumor {params.sample_name} \
--RGSM-tumor {params.sample_name} \
--RGPL-tumor ILLUMINAi \
--output-directory {params.output_dir} \
--output-file-prefix {params.output_file_prefix} \
--enable-duplicate-marking true \
--enable-map-align-output true
         """
