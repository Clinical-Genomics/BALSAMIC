# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


# get bamfile
multiqc_input = [config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample)]

# fastqc metrics
multiqc_input.extend(expand(fastqc_dir + "{fastq_file_names}_fastqc.zip", fastq_file_names=config_model.get_all_fastq_names(remove_suffix = True)))

# get cramfile
multiqc_input.extend(expand(bam_dir + "tumor.{sample}.cram", sample=tumor_sample))
if config['analysis']['analysis_type'] == "paired":
    multiqc_input.extend(expand(bam_dir + "normal.{sample}.cram", sample=normal_sample))

# common alignment qc metrics
qc_metrics_wildcards = ["alignment_summary_metrics.txt", "base_distribution_by_cycle_metrics.txt",
                        "insert_size_metrics.pdf", "insert_size_metrics.txt",
                        "quality_by_cycle_metrics.txt", "quality_by_cycle_metrics.pdf",
                        "quality_distribution_metrics.txt", "quality_distribution_metrics.pdf",
                        "gc_bias.txt", "gc_bias_summary.txt", "gc_bias.pdf", "hsmetric.txt",
                        "samtools.flagstats.txt", "samtools.idxstats.txt", "samtools.stats.txt"]

if config["analysis"]["sequencing_type"] == 'targeted':
    # for post UMI collapse
    qc_metrics_wildcards.extend(["umi_collapsed.samtools.flagstats.txt",
                                 "umi_collapsed.samtools.idxstats.txt",
                                 "umi_collapsed.samtools.stats.txt"])

multiqc_input.extend(expand(qc_dir + "tumor.{sample}.{metrics_wc}", sample=tumor_sample ,metrics_wc=qc_metrics_wildcards))
if config['analysis']['analysis_type'] == "paired":
    multiqc_input.extend(expand(qc_dir + "normal.{sample}.{metrics_wc}", sample=normal_sample ,metrics_wc=qc_metrics_wildcards))

# pair check output
if config['analysis']['analysis_type'] == "paired":
    multiqc_input.append(qc_dir + "somalier/somalier.pairs.tsv")


if config["analysis"]["sequencing_type"] == 'wgs':

    # fastp metrics
    multiqc_input.extend(expand(qc_dir + "fastp/{sample_type}.{sample}.{fastq_pattern}_fastp.json", sample_type="tumor", sample=tumor_sample, fastq_pattern=config_model.get_fastq_patterns_by_sample(sample_names = [tumor_sample])))
    multiqc_input.extend(expand(qc_dir + "fastp/{sample_type}.{sample}.{fastq_pattern}_fastp.html",sample_type="tumor",sample=tumor_sample,fastq_pattern=config_model.get_fastq_patterns_by_sample(sample_names=[tumor_sample])))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "fastp/{sample_type}.{sample}.{fastq_pattern}_fastp.json",sample_type="normal",sample=normal_sample,fastq_pattern=config_model.get_fastq_patterns_by_sample(sample_names=[normal_sample])))
        multiqc_input.extend(expand(qc_dir + "fastp/{sample_type}.{sample}.{fastq_pattern}_fastp.html", sample_type="normal", sample=normal_sample,fastq_pattern=config_model.get_fastq_patterns_by_sample(sample_names = [normal_sample])))


    # get duplicate stats
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}.dedup.metrics",sample=tumor_sample))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "normal.{sample}.dedup.metrics",sample=normal_sample))

    # Picard metrics
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}_picard_wgs_metrics.txt", sample=tumor_sample))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "normal.{sample}_picard_wgs_metrics.txt",sample=normal_sample))

    # Sentieon metrics
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}_sentieon_wgs_metrics.txt", sample=tumor_sample))
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}_coverage.gz", sample=tumor_sample))

    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "normal.{sample}_sentieon_wgs_metrics.txt", sample=normal_sample))
        multiqc_input.extend(expand(qc_dir + "normal.{sample}_coverage.gz", sample=normal_sample))


    if config["analysis"]["analysis_workflow"] != "balsamic-qc":
        multiqc_input.append(bam_dir + "tumor.recal_data.table")
        if config['analysis']['analysis_type'] == "paired":
            multiqc_input.append(bam_dir + "normal.recal_data.table")

else:
    # dedup consensus metrics
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}.dedup_conensus.metrics",sample=tumor_sample))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "normal.{sample}.dedup_conensus.metrics",sample=normal_sample))

    # fastp metrics
    multiqc_input.extend(expand(qc_dir + "fastp/tumor.{sample}_adaptertrim_fastp.json", sample=tumor_sample))
    multiqc_input.extend(expand(qc_dir + "fastp/tumor.{sample}_adaptertrim_fastp.html", sample=tumor_sample))
    multiqc_input.extend(expand(qc_dir + "fastp/tumor.{sample}_qualitytrim_fastp.json", sample=tumor_sample))
    multiqc_input.extend(expand(qc_dir + "fastp/tumor.{sample}_qualitytrim_fastp.html", sample=tumor_sample))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "fastp/normal.{sample}_adaptertrim_fastp.json",sample=normal_sample))
        multiqc_input.extend(expand(qc_dir + "fastp/normal.{sample}_adaptertrim_fastp.html",sample=normal_sample))
        multiqc_input.extend(expand(qc_dir + "fastp/normal.{sample}_qualitytrim_fastp.json",sample=normal_sample))
        multiqc_input.extend(expand(qc_dir + "fastp/normal.{sample}_qualitytrim_fastp.html",sample=normal_sample))

    # sambamba metrics
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}.cov.bed", sample=tumor_sample))
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}.exon.cov.bed", sample=tumor_sample))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "normal.{sample}.cov.bed",sample=normal_sample))
        multiqc_input.extend(expand(qc_dir + "normal.{sample}.exon.cov.bed",sample=normal_sample))

    # mosdepth metrics
    mosdepth_metrics_wildcard = ["mosdepth.global.dist.txt", "mosdepth.region.dist.txt",
                                 "mosdepth.summary.txt", "per-base.bed.gz", "regions.bed.gz"]
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}.{mosdepth_wc}",
        sample=tumor_sample, mosdepth_wc = mosdepth_metrics_wildcard))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "normal.{sample}.{mosdepth_wc}",
            sample=normal_sample, mosdepth_wc = mosdepth_metrics_wildcard))

    if config["analysis"]["analysis_workflow"]=="balsamic-umi":
        # UMI cram file
        multiqc_input.extend(umi_dir + "tumor.{sample}.consensusfiltered_umi.cram", sample=tumor_sample))
        # UMI picard metrics
        multiqc_input.extend(expand(umi_qc_dir + "tumor.{sample}.umi.collect_hsmetric.txt", sample=tumor_sample))
        multiqc_input.extend(expand(umi_qc_dir + "tumor.{sample}.umi.metrics.txt", sample=tumor_sample))
        if config['analysis']['analysis_type'] == "paired":
            multiqc_input.extend(umi_dir + "normal.{sample}.consensusfiltered_umi.cram", sample=normal_sample))
            multiqc_input.extend(expand(umi_qc_dir + "normal.{sample}.umi.collect_hsmetric.txt",sample=normal_sample))
            multiqc_input.extend(expand(umi_qc_dir + "normal.{sample}.umi.metrics.txt",sample=normal_sample))

rule multiqc:
    input:
        multiqc_input
    output:
        html = qc_dir + "multiqc_report.html",
        json = qc_dir + "multiqc_data/multiqc_data.json",
    benchmark:
        Path(benchmark_dir, "multiqc_" + config["analysis"]["case_id"] + ".multiqc.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("multiqc") + ".sif").as_posix()
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "multiqc"},
        dir_list = result_dir,
        qc_dir = qc_dir,
        case_name = config["analysis"]["case_id"],
        exclude_module = "vep"
    message:
        "Aggregrate quality metrics results using multiqc for sample {params.case_name}"
    shell:
        """
echo -e \"{params.dir_list}\" > {params.qc_dir}/dir_list;

multiqc --force --outdir {params.qc_dir} \
--exclude {params.exclude_module} \
--data-format json \
-l {params.qc_dir}/dir_list;

chmod -R 777 {params.qc_dir};
        """

