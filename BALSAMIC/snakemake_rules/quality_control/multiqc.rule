# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

multiqc_input = [bam_dir + "tumor.merged.bam"]

if config['analysis']['analysis_type'] == "paired":
    multiqc_input.append(bam_dir + "normal.merged.bam")

# Following rule will take input fastq files, align them using bwa mem, and convert the output to sam format
if config["analysis"]["sequencing_type"] == 'wgs':
    picard_metrics_wildcard = ["alignment_summary_metrics", "base_distribution_by_cycle_metrics",
                               "base_distribution_by_cycle.pdf", "insert_size_histogram.pdf", "insert_size_metrics",
                               "quality_by_cycle_metrics", "quality_by_cycle.pdf",
                               "quality_distribution_metrics", "quality_distribution.pdf"]
    # fastqc metrics
    multiqc_input.extend(expand(fastqc_dir + "{sample}_{read_num}_fastqc.zip", sample=config["samples"], read_num=[1, 2]))

    # fastp metrics
    multiqc_input.extend(expand(qc_dir + "fastp/{sample}_fastp.json", sample=config["samples"]))
    multiqc_input.extend(expand(qc_dir + "fastp/{sample}_fastp.html", sample=config["samples"]))

    # Picard metrics
    multiqc_input.extend(expand(qc_dir + "{sample}_picard_wgs_metrics.txt", sample=config["samples"]))
    multiqc_input.extend(expand(qc_dir + "{sample}.multiple_metrics.{metrics_wc}", sample=config["samples"], metrics_wc=picard_metrics_wildcard))

    # Sentieon metrics
    multiqc_input.extend(expand(qc_dir + "{sample}_sentieon_wgs_metrics.txt", sample=config["samples"]))
    multiqc_input.extend(expand(qc_dir + "{sample}_coverage.gz", sample=config["samples"]))
    multiqc_input.append(bam_dir+"tumor.merged.recal_data.table")
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.append(bam_dir+"normal.merged.recal_data.table")


else:
    # fastqc metrics
    multiqc_input.extend(expand(fastqc_dir + "{sample}_{read_num}_fastqc.zip", sample=config["samples"], read_num=[1, 2]))

    # fastp metrics
    multiqc_input.extend(expand(qc_dir + "fastp/{sample}_fastp.json", sample=config["samples"]))
    multiqc_input.extend(expand(qc_dir + "fastp/{sample}_fastp.html", sample=config["samples"]))

    # picard metrics
    multiqc_input.extend(expand(bam_dir + "{sample}.sorted.insertsizemetric", sample=config["samples"]))
    multiqc_input.extend(expand(bam_dir + "{sample}.sorted.alignmetric", sample=config["samples"]))
    multiqc_input.extend(expand(bam_dir + "{sample}.sorted."+ picarddup +".hsmetric", sample=config["samples"]))

    # sambamba metrics
    multiqc_input.extend(expand(bam_dir + "{sample}.sorted." + picarddup + ".cov.bed", sample=config["samples"]))
    multiqc_input.extend(expand(bam_dir + "{sample}.sorted." + picarddup + ".exon.cov.bed", sample=config["samples"]))
    
    # mosdepth metrics
    multiqc_input.extend(expand(bam_dir + "{sample}.mosdepth.global.dist.txt", sample=config["samples"]))
    multiqc_input.extend(expand(bam_dir + "{sample}.mosdepth.region.dist.txt", sample=config["samples"]))
    multiqc_input.extend(expand(bam_dir + "{sample}.mosdepth.summary.txt", sample=config["samples"]))

    # samtools metrics
    multiqc_input.extend(expand(bam_dir + "{sample}.samtools.{stats}.txt", sample=config["samples"], stats=['flagstats', 'idxstats', 'stats']))

    if config["umiworkflow"]:
        multiqc_input.extend(expand(umi_qc_dir + "{sample}.umi.collect_hsmetric", sample=config["samples"]))
        

rule multiqc:
    input:
        multiqc_input
    output:
        html = qc_dir + "multiqc_report.html",
        json = qc_dir + "multiqc_data/multiqc_data.json",
    benchmark:
        Path(benchmark_dir, "multiqc_" + config["analysis"]["case_id"] + ".multiqc.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("multiqc") + ".sif").as_posix()
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "multiqc"},
        dir_list = result_dir,
        qc_dir = qc_dir,
        case_name = config["analysis"]["case_id"],
        exclude_module = "vep"
    message:
        "Aggregrate quality metrics results using multiqc for sample {params.case_name}"
    shell:
        """
echo -e \"{params.dir_list}\" > {params.qc_dir}/dir_list;
multiqc --force --outdir {params.qc_dir} --exclude {params.exclude_module} --data-format json -l {params.qc_dir}/dir_list;
chmod -R 777 {params.qc_dir};
        """


rule collect_custom_qc_metrics:
    input:
        json = qc_dir + "multiqc_data/multiqc_data.json"
    output:
        yaml = qc_dir + config["analysis"]["case_id"] + "_metrics_deliverables.yaml"
    params:
        collect_qc_metrics_script = get_script_path("collect_qc_metrics.py"),
        sequencing_type = get_sequencing_type(config),
        capture_kit = get_capture_kit(config),
        housekeeper_id = {"id": config["analysis"]["case_id"],"tags": "qc-metrics-yaml"}
    singularity:
        Path(singularity_image, "balsamic.sif").as_posix()
    threads:
        get_threads(cluster_config, "collect_custom_qc_metrics")
    message:
        "Extract the manually specified QC metric for validation and delivery"
    shell:
        """
python {params.collect_qc_metrics_script} {output.yaml} {input.json} {params.sequencing_type} {params.capture_kit}
        """
