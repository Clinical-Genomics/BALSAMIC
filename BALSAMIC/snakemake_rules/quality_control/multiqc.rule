# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


# get bamfile
multiqc_input = [config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = tumor_sample)]
if config['analysis']['analysis_type'] == "paired":
    multiqc_input.append(config_model.get_final_bam_name(bam_dir=bam_dir,sample_name= normal_sample))

# fastqc metrics
multiqc_input.extend(expand(fastqc_dir + "{fastq_file_names}_fastqc.zip", fastq_file_names=config_model.get_all_fastq_names(remove_suffix = True)))

# get cramfile
multiqc_input.extend(expand(bam_dir + "tumor.{sample}.cram", sample=tumor_sample))
if config['analysis']['analysis_type'] == "paired":
    multiqc_input.extend(expand(bam_dir + "normal.{sample}.cram", sample=normal_sample))

# get duplicate stats
multiqc_input.extend(expand(qc_dir + "tumor.{sample}.dedup.metrics", sample=tumor_sample))
if config['analysis']['analysis_type'] == "paired":
    multiqc_input.extend(expand(qc_dir + "normal.{sample}.dedup.metrics", sample=normal_sample))

# get samtools stats
multiqc_input.extend(expand(qc_dir + "{sample}.samtools.{stats}.txt",
    sample=sample_names, stats=['flagstats', 'idxstats', 'stats']))


# common alignment qc metrics
qc_metrics_wildcards = ["alignment_summary_metrics.txt", "base_distribution_by_cycle_metrics.txt",
                        "insert_size_metrics.pdf", "insert_size_metrics.txt",
                        "quality_by_cycle_metrics.txt", "quality_by_cycle_metrics.pdf",
                        "quality_distribution_metrics.txt", "quality_distribution_metrics.pdf",
                        "gc_bias.txt", "gc_bias_sumamry.txt", "gc_bias.pdf", "hsmetric.txt"]

multiqc_input.extend(expand(qc_dir + "tumor.{sample}.{metrics_wc}", sample=tumor_sample ,metrics_wc=qc_metrics_wildcards))
if config['analysis']['analysis_type'] == "paired":
    multiqc_input.extend(expand(qc_dir + "normal.{sample}.{metrics_wc}", sample=normal_sample ,metrics_wc=qc_metrics_wildcards))

# pair check output
if config['analysis']['analysis_type'] == "paired":
    multiqc_input.append(qc_dir + "somalier/somalier.pairs.tsv")



if config["analysis"]["sequencing_type"] == 'wgs':

    # fastp metrics
    multiqc_input.extend(expand(qc_dir + "fastp/{fastq_pattern}_fastp.json",
        fastq_pattern=config_model.get_fastq_patterns_by_sample(sample_names = sample_names)))
    multiqc_input.extend(expand(qc_dir + "fastp/{fastq_pattern}_fastp.html",
        fastq_pattern=config_model.get_fastq_patterns_by_sample(sample_names = sample_names)))


    # Picard metrics
    multiqc_input.extend(expand(qc_dir + "{sample}_picard_wgs_metrics.txt",
        sample=sample_names))

    # Sentieon metrics
    multiqc_input.extend(expand(qc_dir + "{sample}_sentieon_wgs_metrics.txt", sample=sample_names))
    multiqc_input.extend(expand(qc_dir + "{sample}_coverage.gz", sample=sample_names))


    if config["analysis"]["analysis_workflow"] != "balsamic-qc":
        multiqc_input.append(bam_dir + "tumor.recal_data.table")
        if config['analysis']['analysis_type'] == "paired":
            multiqc_input.append(bam_dir + "normal.recal_data.table")

else:
    # fastp metrics
    multiqc_input.extend(expand(qc_dir + "fastp/{sample}_fastp.json", sample=sample_names))
    multiqc_input.extend(expand(qc_dir + "fastp/{sample}_fastp.html", sample=sample_names))

    # sambamba metrics
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}.dedup.cov.bed", sample=tumor_sample))
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}.dedup.exon.cov.bed", sample=tumor_sample))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "normal.{sample}.dedup.cov.bed",sample=normal_sample))
        multiqc_input.extend(expand(qc_dir + "normal.{sample}.dedup.exon.cov.bed",sample=normal_sample))

    # mosdepth metrics
    mosdepth_metrics_wildcard = ["mosdepth.global.dist.txt", "mosdepth.region.dist.txt",
                                 "mosdepth.summary.txt", "per-base.bed.gz", "regions.bed.gz"]
    multiqc_input.extend(expand(qc_dir + "tumor.{sample}.{mosdepth_wc}",
        sample=tumor_sample, mosdepth_wc = mosdepth_metrics_wildcard))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(qc_dir + "normal.{sample}.{mosdepth_wc}",
            sample=normal_sample, mosdepth_wc = mosdepth_metrics_wildcard))

    if config["analysis"]["analysis_workflow"]=="balsamic-umi":
        # UMI picard metrics
        multiqc_input.extend(expand(umi_qc_dir + "{sample}.umi.collect_hsmetric.txt", sample=sample_names))
        multiqc_input.extend(expand(umi_qc_dir + "{sample}.umi.metrics.txt", sample=sample_names))


rule multiqc:
    input:
        multiqc_input
    output:
        html = qc_dir + "multiqc_report.html",
        json = qc_dir + "multiqc_data/multiqc_data.json",
    benchmark:
        Path(benchmark_dir, "multiqc_" + config["analysis"]["case_id"] + ".multiqc.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("multiqc") + ".sif").as_posix()
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "multiqc"},
        dir_list = result_dir,
        qc_dir = qc_dir,
        case_name = config["analysis"]["case_id"],
        exclude_module = "vep"
    message:
        "Aggregrate quality metrics results using multiqc for sample {params.case_name}"
    shell:
        """
echo -e \"{params.dir_list}\" > {params.qc_dir}/dir_list;

multiqc --force --outdir {params.qc_dir} \
--exclude {params.exclude_module} \
--data-format json \
-l {params.qc_dir}/dir_list;

chmod -R 777 {params.qc_dir};
        """
