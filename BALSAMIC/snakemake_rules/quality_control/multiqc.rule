# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

multiqc_input = [sample_dict[tumor_sample]["bam"]["final_bam"]]
multiqc_input.extend(expand(bam_dir + "{sample}.bam_compressed", sample=config["samples"]))
multiqc_input.append(qc_dir + "tumor.{}.dedup.metrics".format(tumor_sample))

if config['analysis']['analysis_type'] == "paired":
    multiqc_input.append(sample_dict[normal_sample]["bam"]["final_bam"])
    multiqc_input.append(qc_dir + "somalier/somalier.pairs.tsv")
    multiqc_input.append(qc_dir + "normal.{}.dedup.metrics".format(normal_sample))

if config["analysis"]["sequencing_type"] == 'wgs':
    picard_metrics_wildcard = ["alignment_summary_metrics", "base_distribution_by_cycle_metrics",
                               "base_distribution_by_cycle.pdf", "insert_size_histogram.pdf", "insert_size_metrics",
                               "quality_by_cycle_metrics", "quality_by_cycle.pdf",
                               "quality_distribution_metrics", "quality_distribution.pdf"]
    # fastqc metrics
    multiqc_input.extend(expand(fastqc_dir + "{sample}_fastqc.completed", sample=config["samples"]))

    # fastp metrics
    multiqc_input.extend(expand(qc_dir + "fastp/{fastqpattern}_fastp.json", fastqpattern=get_fastqpatterns(sample_dict)))
    multiqc_input.extend(expand(qc_dir + "fastp/{fastqpattern}_fastp.html", fastqpattern=get_fastqpatterns(sample_dict)))


    # Picard metrics
    multiqc_input.extend(expand(qc_dir + "{sample}_picard_wgs_metrics.txt", sample=config["samples"]))
    multiqc_input.extend(expand(qc_dir + "{sample}.multiple_metrics.{metrics_wc}", sample=config["samples"], metrics_wc=picard_metrics_wildcard))

    # Sentieon metrics
    multiqc_input.extend(expand(qc_dir + "{sample}_sentieon_wgs_metrics.txt", sample=config["samples"]))
    multiqc_input.extend(expand(qc_dir + "{sample}_coverage.gz", sample=config["samples"]))
    multiqc_input.append(bam_dir+"tumor.recal_data.table")
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.append(bam_dir+"normal.recal_data.table")

else:
    # fastqc metrics
    multiqc_input.extend(expand(fastqc_dir + "{sample}_fastqc.completed", sample=config["samples"]))

    # fastp metrics
    multiqc_input.extend(expand(qc_dir + "fastp/{fastqpattern}_fastp.json", fastqpattern=get_fastqpatterns(sample_dict)))
    multiqc_input.extend(expand(qc_dir + "fastp/{fastqpattern}_fastp.html", fastqpattern=get_fastqpatterns(sample_dict)))

    # picard metrics
    multiqc_input.extend(expand(bam_dir + "{sample}.dedup.realign.insertsizemetric", sample=tumor_sample))
    multiqc_input.extend(expand(bam_dir + "{sample}.dedup.realign.alignmetric", sample=tumor_sample))
    if config['analysis']['analysis_type'] == "paired":
        multiqc_input.extend(expand(bam_dir + "{sample}.dedup.realign.insertsizemetric", sample=normal_sample))
        multiqc_input.extend(expand(bam_dir + "{sample}.dedup.realign.alignmetric", sample=normal_sample))

    multiqc_input.extend(expand(bam_dir + "{sample}.dedup.realign.hsmetric", sample=config["samples"]))

    # sambamba metrics
    multiqc_input.extend(expand(bam_dir + "{sample}.dedup.realign.cov.bed", sample=config["samples"]))
    multiqc_input.extend(expand(bam_dir + "{sample}.dedup.realign.exon.cov.bed", sample=config["samples"]))

    # mosdepth metrics
    multiqc_input.extend(expand(bam_dir + "{sample}.mosdepth.global.dist.txt", sample=config["samples"]))
    multiqc_input.extend(expand(bam_dir + "{sample}.mosdepth.region.dist.txt", sample=config["samples"]))
    multiqc_input.extend(expand(bam_dir + "{sample}.mosdepth.summary.txt", sample=config["samples"]))

    # samtools metrics
    # multiqc_input.extend(expand(bam_dir + "{sample}.samtools.{stats}.txt", sample=config["samples"], stats=['flagstats', 'idxstats', 'stats']))

    if config["analysis"]["analysis_workflow"]=="balsamic-umi":
        # UMI picard metrics
        multiqc_input.extend(expand(umi_qc_dir + "{sample}.umi.collect_hsmetric", sample=config["samples"]))
        multiqc_input.extend(expand(umi_qc_dir + "{sample}.umi.metrics", sample=config["samples"]))



rule multiqc:
    input:
        multiqc_input
    output:
        html = qc_dir + "multiqc_report.html",
        json = qc_dir + "multiqc_data/multiqc_data.json",
    benchmark:
        Path(benchmark_dir, "multiqc_" + config["analysis"]["case_id"] + ".multiqc.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("multiqc") + ".sif").as_posix()
    params:
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "multiqc"},
        dir_list = result_dir,
        qc_dir = qc_dir,
        case_name = config["analysis"]["case_id"],
        exclude_module = "vep"
    message:
        "Aggregrate quality metrics results using multiqc for sample {params.case_name}"
    shell:
        """
echo -e \"{params.dir_list}\" > {params.qc_dir}/dir_list;

multiqc --force --outdir {params.qc_dir} \
--exclude {params.exclude_module} \
--data-format json \
-l {params.qc_dir}/dir_list;

chmod -R 777 {params.qc_dir};
        """
