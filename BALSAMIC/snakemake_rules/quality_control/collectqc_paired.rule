# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Hassan Foroughi Asl"

from BALSAMIC.tools import get_result_dir, get_conda_env, get_picard_mrkdup

result_dir = get_result_dir(config) + "/" 
picarddup = get_picard_mrkdup(config)

# Following rule will take input fastq files, align them using bwa mem, and convert the output to sam format
rule collectqc:
  input:
    contest = expand(bam_dir + "{ct}", ct=["normal_tumor.contest", "tumor_normal.contest"]),
    fastqc = expand(fastqc_dir + "{mysample}_{read_num}_fastqc.zip", mysample=config["samples"], read_num=[1, 2]),
    fastqc_ca = expand(fastqc_dir + "{mysample}_{read_num}.ca_fastqc.zip", mysample=config["samples"], read_num=[1, 2]),
    insertsize = expand(bam_dir + "{sample}.sorted.insertsizemetric", sample=config["samples"]),
    alignmetric = expand(bam_dir + "{sample}.sorted.alignmetric", sample=config["samples"]),
    hsmetric = expand(bam_dir + "{sample}.sorted.hsmetric", sample=config["samples"]),
    sambamba = expand(bam_dir + "{sample}.sorted." + picarddup + ".cov.bed", sample=config["samples"]),
    sambambaexon = expand(bam_dir + "{sample}.sorted." + picarddup + ".exon.cov.bed", sample=config["samples"]),
  output:
    result_dir + "qc/" + "qc_report.pdf"
  params:
    # This is using same environment as gatk
    resultdir = result_dir,
    conda = get_conda_env(config["conda_env_yaml"],"gatk"),
  shell:
    "source activate {params.conda};"
    "touch {output}; "
    "unset FILELIST; "
    "FILELIST=`find {params.resultdir}bam -type f`; "
    "for i in $FILELIST; "
    "do "
    "   [ `file -b --mime-encoding $i` != \"binary\" ]"
    "   && grep -qs \"METRICS CLASS\" $i "
    "   && m=`grep \"METRICS CLASS\" $i | rev | cut -d\".\" -f 1 | rev` "
    "   && f=`echo $i | rev | cut -d\"/\" -f 1 | rev` "
    "   && echo $m > {params.resultdir}qc/${{f}}.csv "
    "   && sed -n '/## METRICS CLASS/,/^\s*$/{{/METRICS/!p}}' $i "
    "       | awk -v OFS=\"\\t\" -v FS=\"\\t\" ' {{ for (i=1; i<=NF; i++) {{ a[NR,i] = $i }} }} "
    "NF>p {{ p = NF }} END {{ for(j=1; j<=p; j++) {{ str=a[1,j]; for(i=2;"
    "i<=NR; i++) {{ str=str\"\\t\"a[i,j]; }}; print str }} }}' "
    "| awk 'NR==1 {{ v=NF }} NF==v {{ print }}' >> {params.resultdir}qc/${{f}}.csv ; "
    "done; "
    "source deactivate; "
