# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


if config["analysis"]["sequencing_type"] == 'wgs' and config["analysis"]["analysis_type"] == 'paired':
    rule sex_prediction_wgs_tumor_normal:
        input:
            tumor_coverage_metrics_y = expand(qc_dir + "tumor.{sample}_Y_cov_per_base.txt", sample = tumor_sample),
            tumor_coverage_metrics_x = expand(qc_dir + "tumor.{sample}_X_cov_per_base.txt", sample = tumor_sample),
            normal_coverage_metrics_y = expand(qc_dir + "normal.{sample}_Y_cov_per_base.txt",sample = normal_sample),
            normal_coverage_metrics_x = expand(qc_dir + "normal.{sample}_X_cov_per_base.txt", sample = normal_sample)
        output:
            sex_prediction_json = qc_dir + "sex_prediction.json"
        benchmark:
            Path(benchmark_dir, 'sex_prediction.tsv').as_posix()
        params:
            sex_check_script = get_script_path("sex_prediction_wgs.py"),
            case_name = config["analysis"]["case_id"],
        message:
            "Running sex_prediction on case {params.case_name}"
        shell:
            """
        python {params.sex_check_script} \
        --tumor-x-coverage {input.tumor_coverage_metrics_x} \
        --tumor-y-coverage {input.tumor_coverage_metrics_y} \
        --normal-x-coverage {input.normal_coverage_metrics_x} \
        --normal-y-coverage {input.normal_coverage_metrics_y} \
        --output {output.sex_prediction_json} ;
            """
elif config["analysis"]["sequencing_type"] == 'wgs' and config["analysis"]["analysis_type"] == 'single':
    rule sex_prediction_wgs_tumor_only:
        input:
            coverage_metrics_y = expand(qc_dir + "tumor.{sample}_Y_cov_per_base.txt", sample = tumor_sample),
            coverage_metrics_x = expand(qc_dir + "tumor.{sample}_X_cov_per_base.txt", sample = tumor_sample)
        output:
            sex_prediction_json = qc_dir + "sex_prediction.json"
        benchmark:
            Path(benchmark_dir, 'sex_prediction.tsv').as_posix()
        params:
            sex_check_script = get_script_path("sex_prediction_wgs.py"),
            case_name = config["analysis"]["case_id"],
        message:
            "Running sex_prediction on case {params.case_name}"
        shell:
            """
        python {params.sex_check_script} \
        --tumor-x-coverage {input.coverage_metrics_x} \
        --tumor-y-coverage {input.coverage_metrics_y} \
        --output {output.sex_prediction_json} ;
            """
elif config["analysis"]["sequencing_type"] == 'targeted' and config["analysis"]["analysis_type"] == 'paired':
    rule sex_prediction_tga_tumor_normal:
        input:
            target_cnn_tumor = expand(cnv_dir + "{sample}.targetcoverage.cnn", sample = tumor_sample),
            antitarget_cnn_tumor = expand(cnv_dir + "{sample}.antitargetcoverage.cnn", sample = tumor_sample),
            target_cnn_normal = expand(cnv_dir + "{sample}.targetcoverage.cnn",sample = normal_sample),
            antitarget_cnn_normal = expand(cnv_dir + "{sample}.antitargetcoverage.cnn",sample = normal_sample)
        output:
            sex_prediction_json = qc_dir + "sex_prediction.json"
        benchmark:
            Path(benchmark_dir, 'sex_prediction.tsv').as_posix()
        params:
            sex_check_script = get_script_path("sex_prediction_tga.py"),
            case_name = config["analysis"]["case_id"],
        message:
            "Running sex_prediction on tumor and normal sample of {params.case_name}"
        shell:
            """
        python {params.sex_check_script} \
        --target-cnn-tumor {input.target_cnn_tumor} \
        --antitarget-cnn-tumor {input.antitarget_cnn_tumor} \
        --target-cnn-normal {input.target_cnn_normal} \
        --antitarget-cnn-normal {input.antitarget_cnn_normal} \
        --output {output.sex_prediction_json} ;
            """
elif config["analysis"]["sequencing_type"] == 'targeted' and config["analysis"]["analysis_type"] == 'single':
    rule sex_prediction_tga_tumor_only:
        input:
            target_cnn_tumor = expand(cnv_dir + "{sample}.targetcoverage.cnn", sample = tumor_sample),
            antitarget_cnn_tumor = expand(cnv_dir + "{sample}.antitargetcoverage.cnn", sample = tumor_sample),
        output:
            sex_prediction_json = qc_dir + "sex_prediction.json"
        benchmark:
            Path(benchmark_dir, 'sex_prediction.tsv').as_posix()
        params:
            sex_check_script = get_script_path("sex_prediction_tga.py"),
            case_name = config["analysis"]["case_id"],
        message:
            "Running sex_prediction on tumor sample of {params.case_name}"
        shell:
            """
        python {params.sex_check_script} \
        --target-cnn-tumor {input.target_cnn_tumor} \
        --antitarget-cnn-tumor {input.antitarget_cnn_tumor} \
        --output {output.sex_prediction_json} ;
            """
