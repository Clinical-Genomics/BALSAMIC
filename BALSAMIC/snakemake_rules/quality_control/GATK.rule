# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Hassan Foroughi Asl"

from BALSAMIC.tools import get_result_dir, get_conda_env, get_picard_mrkdup

bam_dir = get_result_dir(config) + "/bam/"
picarddup = get_picard_mrkdup(config)
result_dir = get_result_dir(config) + "/"

rule RealignerTargetCreator:
  input:
    bam = bam_dir + "{sample}" + ".sorted." + picarddup + ".bam",
    fa = config["path"]["genomefa"] + config["references"]["genomefa"],
    knownsites = config["path"]["genomefa"] + config["references"]["dbsnp"], 
  output:
    bam_dir + "{sample}.sorted." + picarddup + ".intervals",
  params:
    conda = get_conda_env(config["conda_env_yaml"],"gatk"),
  shell:
    "source activate {params.conda}; "
    "gatk "
        "-T RealignerTargetCreator "
        "-I {input.bam} "
        "-R {input.fa} "
        "--known {input.knownsites} "
        "--out {output}; "
    "source deactivate; "

rule IndelRealigner:
  input:
    bam = bam_dir + "{sample}" + ".sorted." + picarddup + ".bam",
    fa = config["path"]["genomefa"] + config["references"]["genomefa"],
    knownsites = config["path"]["genomefa"] + config["references"]["dbsnp"], 
    intervals = bam_dir + "{sample}" + ".sorted." + picarddup + ".intervals",
  output:
    bam_dir + "{sample}.sorted." + picarddup + ".ralgn.bam",
  params:
    conda = get_conda_env(config["conda_env_yaml"],"gatk"),
  shell:
    "source activate {params.conda}; "
    "gatk "
        "-T IndelRealigner "
        "-I {input.bam} "
        "-R {input.fa} "
        "-known {input.knownsites} "
        "-targetIntervals {input.intervals} "
        "--out {output}; "
    "source deactivate; "

rule BaseRecalibrator:
  input:
    bam = bam_dir + "{sample}" + ".sorted." + picarddup + ".ralgn.bam",
    fa = config["path"]["genomefa"] + config["references"]["genomefa"],
    knownsites = config["path"]["genomefa"] + config["references"]["dbsnp"], 
  output:
    bam_dir + "{sample}.sorted." + picarddup + ".ralgn.bsrcl.bam",
  params:
    conda = get_conda_env(config["conda_env_yaml"],"gatk"),
  shell:
    "source activate {params.conda}; "
    "gatk "
        "-T BaseRecalibrator "
        "-R {input.fa} "
        "--knownSites {input.knownsites} " 
        "-I {input.bam} "
        "--out {output}.bsrcl_list; "
    "gatk "
        "-T PrintReads "
        "-R {input.fa} "
        "-I {input.bam} "
        "--out {output}; "
    "samtools index {input.bam}; "
    "source deactivate; "

rule PreparePopVCF:
  input:
    ref1kg = config["path"]["genomefa"] + config["references"]["1000G"], 
  output:
    popvcf = result_dir + "popvcf.vcf"
  params:
    conda = get_conda_env(config["conda_env_yaml"],"bcftools"),
    anno_str1 = "FORMAT/GT,FORMAT/GL,FORMAT/DS,^INFO/AC,^INFO/AF,^INFO/AN,^INFO/",
    popcode = "EUR"
  shell:
    "source activate {params.conda}; "
    "bcftools annotate "
        "-x {params.anno_str1}{params.popcode}_AF "
        "{input.ref1kg} "
    " | "
    "bcftools annotate "
        "-i INFO/{params.popcode}_AF!=0.0 "
    " | "
    "awk -v OFS=\"\\t\" "
      "'$1~/^#/ {{ print; }} "
      " $1!~/^#/ {{ "
        "split($8,INFO,\";\"); "
        "newINFO=\"\";"
        "for (i in INFO) {{ "
          "if (INFO[i]~\"{params.popcode}_AF\") {{ "
            "split(INFO[i],AF,\"=\"); "
            "P=substr(AF[1], 1, length(AF[1])-3); "
            "INFO[i]=P\"={{\"$4\"*=\"AF[2]\",\"$5\"=\"1-AF[2]\"}}\"; "
            "INFO[i]=INFO[i]\";set=\"P;}} "
          "newINFO=INFO[i] \";\" newINFO; "
          "}} "
        "$8=substr(newINFO, 1, length(newINFO)-1); "
        "print; }}' > {output.popvcf}; "
    "source deactivate; "

