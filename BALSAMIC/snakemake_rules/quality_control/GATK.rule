# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Hassan Foroughi Asl"

from BALSAMIC.utils.rule import get_conda_env, get_picard_mrkdup
from BALSAMIC import __version__ as bv

picarddup = get_picard_mrkdup(config)

rule RealignerTargetCreator:
  input:
    bam = bam_dir + "{sample}" + ".sorted." + picarddup + ".bam",
    fa = config["reference"]["reference_genome"],
    knownsites = config["reference"]["1kg_snps_high"], 
  output:
    bam_dir + "{sample}.sorted." + picarddup + ".intervals",
  params:
    tmpdir = tmp_dir,
    conda = get_conda_env(config["conda_env_yaml"],"gatk"),
  singularity: singularity_image
  benchmark:
    benchmark_dir + "RealignerTargetCreator_" + "{sample}.realign_targetcreator.tsv"
  shell:
    "source activate {params.conda}; "
    "rand_str=$(openssl rand -hex 5); "
    "tmpdir={params.tmpdir}/${{rand_str}}; "
    "mkdir -p ${{tmpdir}}; "
    "export TMPDIR=${{tmpdir}}; "
    "java -jar -Djava.io.tmpdir=${{tmpdir}} -Xms8G -Xmx32G $CONDA_PREFIX/opt/gatk-3.8/GenomeAnalysisTK.jar "
        "-T RealignerTargetCreator "
        "-I {input.bam} "
        "-R {input.fa} "
        "--known {input.knownsites} "
        "--out {output}; "
    

rule BaseRecalibrator:
  input:
    bam = bam_dir + "{sample}" + ".sorted." + picarddup + ".bam",
    fa = config["reference"]["reference_genome"],
    knownsites = config["reference"]["1kg_snps_high"], 
  output:
    bam_dir + "{sample}.sorted." + picarddup + ".bsrcl.bam",
  params:
    tmpdir = tmp_dir,
    conda = get_conda_env(config["conda_env_yaml"],"gatk"),
  singularity: singularity_image
  benchmark:
    benchmark_dir + "BaseRecalibrator_" + "{sample}.base_recalibrator.tsv"
  shell:
    "source activate {params.conda}; "
    "rand_str=$(openssl rand -hex 5); "
    "tmpdir={params.tmpdir}/${{rand_str}}; "
    "mkdir -p ${{tmpdir}}; "
    "export TMPDIR=${{tmpdir}}; "
    "java -jar -Djava.io.tmpdir=${{tmpdir}} -Xms8G -Xmx32G $CONDA_PREFIX/opt/gatk-3.8/GenomeAnalysisTK.jar "
        "-T BaseRecalibrator "
        "-R {input.fa} "
        "--knownSites {input.knownsites} " 
        "-I {input.bam} "
        "--out {output}.bsrcl_list; "
    "java -jar -Djava.io.tmpdir=${{tmpdir}} -Xms8G -Xmx32G $CONDA_PREFIX/opt/gatk-3.8/GenomeAnalysisTK.jar "
        "-T PrintReads "
        "-R {input.fa} "
        "-I {input.bam} "
        "--out {output}; "
    "samtools index {input.bam}; "
    

rule PreparePopVCF:
  input:
    bam = bam_dir + "tumor.merged.bam",
    ref1kg = config["reference"]["1kg_snps_all"], 
  output:
    popvcf = result_dir + "popvcf.vcf"
  params:
    conda = get_conda_env(config["conda_env_yaml"],"bcftools"),
    anno_str1 = "FORMAT/GT,FORMAT/GL,FORMAT/DS,^INFO/AC,^INFO/AF,^INFO/AN,^INFO/",
    popcode = "EUR"
  singularity: singularity_image
  benchmark:
    benchmark_dir + "PreparePopVCF_" + "tumor_prepare_pop_vcf.tsv"
  shell:
    "source activate {params.conda}; "
    "readlink -e {input.bam}; "
    "bcftools annotate "
        "-x {params.anno_str1}{params.popcode}_AF "
        "{input.ref1kg} "
    " | "
    "bcftools annotate "
        "-i INFO/{params.popcode}_AF!=0.0 "
    " | "
    "awk -v OFS=\"\\t\" "
      "'$1~/^#/ {{ print; }} "
      " $1!~/^#/ {{ "
        "split($8,INFO,\";\"); "
        "newINFO=\"\";"
        "for (i in INFO) {{ "
          "if (INFO[i]~\"{params.popcode}_AF\") {{ "
            "split(INFO[i],AF,\"=\"); "
            "P=substr(AF[1], 1, length(AF[1])-3); "
            "INFO[i]=P\"={{\"$4\"*=\"AF[2]\",\"$5\"=\"1-AF[2]\"}}\"; "
            "INFO[i]=INFO[i]\";set=\"P;}} "
          "newINFO=INFO[i] \";\" newINFO; "
          "}} "
        "$8=substr(newINFO, 1, length(newINFO)-1); "
        "print; }}' > {output.popvcf}; "
    

