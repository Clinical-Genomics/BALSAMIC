"""Rules to mark duplicates and realign reads with Sentieon tools."""

rule sentieon_dedup:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample, specified_suffix="align_sort")
    output:
        metrics = Path(qc_dir, "{sample_type}.{sample}.dedup.metrics").as_posix()
    benchmark:
        Path(benchmark_dir, "sentieon_dedup_{sample_type}.{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample_id = "{sample}"
    threads:
        get_threads(cluster_config, 'sentieon_dedup')
    message:
        ("Collects read information using sentieon LocusCollector and mark duplicated reads, purely for percent duplicate stats. "
         "Current sample: {params.sample_id}")
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-t {threads} \
-i {input.bam} \
--algo LocusCollector \
--fun score_info \
{params.tmpdir}/tmp_{params.sample_id}_dedup.score ;

{params.sentieon_exec} driver \
-t {threads} \
-i {input.bam} \
--algo Dedup \
--score_info {params.tmpdir}/tmp_{params.sample_id}_dedup.score \
--metrics {output.metrics} \
{params.tmpdir}/tmp_{params.sample_id}_dedup.bam ;

rm {params.tmpdir}/tmp_{params.sample_id}_dedup.bam ;

sed 's/^LIBRARY/\\n## METRICS CLASS\tpicard\.sam\.DuplicationMetrics\\nLIBRARY/' -i {output.metrics}
        """