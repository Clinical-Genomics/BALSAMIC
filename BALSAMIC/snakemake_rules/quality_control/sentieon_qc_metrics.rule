# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

if config["analysis"]["sequencing_type"] == 'wgs':
    rule sentieon_wgs_metrics:
        input:
            bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
            reference = config_model.reference["reference_genome"].file.as_posix(),
        output:
            wgs_metrics = qc_dir + "{sample_type}.{sample}_sentieon_wgs_metrics.txt",
            coverage_metrics_y = qc_dir + "{sample_type}.{sample}_Y_cov_per_base.txt",
            coverage_metrics_x = qc_dir + "{sample_type}.{sample}_X_cov_per_base.txt"
        benchmark:
            Path(benchmark_dir,'sentieon_wgs_metrics_' + "{sample_type}_{sample}.tsv").as_posix()
        params:
            tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
            min_base_qual = params.sentieon_wgs_metrics.min_base_qual,
            gene_list = config_model.reference["refgene_txt"].file.as_posix(),
            cov_threshold = params.sentieon_wgs_metrics.cov_threshold,
            sentieon_exec = config_model.sentieon.sentieon_exec,
            sentieon_lic = config_model.sentieon.sentieon_license,
            sample = '{sample}'
        message:
            "Calculate coverage metrics for wgs cases using sentieon tools for sample {params.sample}"
        shell:
            """
    export TMPDIR={params.tmpdir};
    export SENTIEON_TMPDIR={params.tmpdir};
    export SENTIEON_LICENSE={params.sentieon_lic};
    
    {params.sentieon_exec} driver \
    -i {input.bam} \
    -r {input.reference} \
    --algo WgsMetricsAlgo \
    --min_base_qual {params.min_base_qual} \
    {output.wgs_metrics};
    
    {params.sentieon_exec} driver \
    -i {input.bam} \
    -r {input.reference} \
    --algo CoverageMetrics \
    --gene_list {params.gene_list} {params.cov_threshold} \
    {params.tmpdir}/coverage_per_base_wgs.txt ;
    
    grep ^Y {params.tmpdir}/coverage_per_base_wgs.txt | cut -f2 > {output.coverage_metrics_y} ;
    grep ^X {params.tmpdir}/coverage_per_base_wgs.txt | cut -f2 > {output.coverage_metrics_x} ;

    rm -rf {params.tmpdir} ;
            """

    rule sentieon_qc_metric_wgs:
        input:
            ref = config_model.reference["reference_genome"].file.as_posix(),
            bam_files = lambda wildcards: config_model.get_bam_name_per_lane(bam_dir = bam_dir, sample_name = wildcards.sample)
        output:
            insert_size_metrics = Path(qc_dir,"{sample_type}.{sample}.insert_size_metrics.txt").as_posix(),
            gc_bias_metrics = Path(qc_dir,"{sample_type}.{sample}.gc_bias.txt").as_posix(),
            gc_bias_summary = Path(qc_dir,"{sample_type}.{sample}.gc_bias_summary.txt").as_posix(),
            quality_by_cycle_metrics = Path(qc_dir,"{sample_type}.{sample}.quality_by_cycle_metrics.txt").as_posix(),
            quality_distribution_metrics = Path(qc_dir,"{sample_type}.{sample}.quality_distribution_metrics.txt").as_posix(),
            base_distribution_metrics = Path(qc_dir,"{sample_type}.{sample}.base_distribution_by_cycle_metrics.txt").as_posix()
        benchmark:
            Path(benchmark_dir, "sentieon_qc_metrics_{sample_type}.{sample}.tsv").as_posix()
        params:
            tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
            sentieon_exec = config_model.sentieon.sentieon_exec,
            sentieon_lic = config_model.sentieon.sentieon_license,
            sample_id = "{sample}",
            min_read_ratio=params.insert_size_metrics.min_read_ratio,
            adapter = config["QC"]["adapter"]
        message:
            ("Creates multiple different alignment QC metrics based on Picard tools"
             "Current sample: {params.sample_id}")
        shell:
            """
    export TMPDIR={params.tmpdir};
    export SENTIEON_TMPDIR={params.tmpdir};
    export SENTIEON_LICENSE={params.sentieon_lic};
    
    shell_bam_files=$(echo {input.bam_files} | sed 's/ / -i /g') ;
    
    {params.sentieon_exec} driver \
    -t {resources.threads} \
    -r {input.ref} \
    -i $shell_bam_files \
    --algo InsertSizeMetricAlgo --min_read_ratio {params.min_read_ratio} {output.insert_size_metrics} \
    --algo GCBias --summary {output.gc_bias_summary} {output.gc_bias_metrics} \
    --algo MeanQualityByCycle {output.quality_by_cycle_metrics} \
    --algo QualDistribution {output.quality_distribution_metrics} \
    --algo BaseDistributionByCycle {output.base_distribution_metrics} ;
    
    rm -rf {params.tmpdir}
            """
else:
    rule sentieon_qc_metrics_tga:
        input:
            ref=config_model.reference["reference_genome"].file.as_posix(),
            bam=lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample, specified_suffix="align_sort"),
        output:
            insert_size_metrics=Path(qc_dir,"{sample_type}.{sample}.insert_size_metrics.txt").as_posix(),
            quality_by_cycle_metrics=Path(qc_dir,"{sample_type}.{sample}.quality_by_cycle_metrics.txt").as_posix(),
            quality_distribution_metrics=Path(qc_dir,"{sample_type}.{sample}.quality_distribution_metrics.txt").as_posix(),
            base_distribution_metrics=Path(qc_dir,"{sample_type}.{sample}.base_distribution_by_cycle_metrics.txt").as_posix()
        benchmark:
            Path(benchmark_dir,"sentieon_qc_metrics_{sample_type}.{sample}.tsv").as_posix()
        params:
            tmpdir=tempfile.mkdtemp(prefix=tmp_dir),
            sentieon_exec=config_model.sentieon.sentieon_exec,
            sentieon_lic=config_model.sentieon.sentieon_license,
            sample_id="{sample}",
            adapter=config["QC"]["adapter"],
            min_read_ratio=params.insert_size_metrics.min_read_ratio,
        message:
            ("Creates multiple different alignment QC metrics based on Picard tools"
             "Current sample: {params.sample_id}")
        shell:
            """
    export TMPDIR={params.tmpdir};
    export SENTIEON_TMPDIR={params.tmpdir};
    export SENTIEON_LICENSE={params.sentieon_lic};

    {params.sentieon_exec} driver \
    -t {resources.threads} \
    -r {input.ref} \
    -i {input.bam} \
    --algo InsertSizeMetricAlgo --min_read_ratio {params.min_read_ratio} {output.insert_size_metrics} \
    --algo MeanQualityByCycle {output.quality_by_cycle_metrics} \
    --algo QualDistribution {output.quality_distribution_metrics} \
    --algo BaseDistributionByCycle {output.base_distribution_metrics} ;
    
    rm -rf {params.tmpdir}
            """

if config["analysis"]["sequencing_type"] == 'wgs':
    rule sentieon_plot_qc_metrics_wgs:
        input:
            insert_size_metrics = Path(qc_dir,"{sample_type}.{sample}.insert_size_metrics.txt").as_posix(),
            gc_bias_metrics = Path(qc_dir,"{sample_type}.{sample}.gc_bias.txt").as_posix(),
            quality_by_cycle_metrics = Path(qc_dir,"{sample_type}.{sample}.quality_by_cycle_metrics.txt").as_posix(),
            quality_distribution_metrics = Path(qc_dir,"{sample_type}.{sample}.quality_distribution_metrics.txt").as_posix()
        output:
            insert_size_pdf =  Path(qc_dir,"{sample_type}.{sample}.insert_size_metrics.pdf").as_posix(),
            gc_bias_pdf = Path(qc_dir,"{sample_type}.{sample}.gc_bias.pdf").as_posix(),
            quality_by_cycle_pdf = Path(qc_dir,"{sample_type}.{sample}.quality_by_cycle_metrics.pdf").as_posix(),
            quality_distribution_pdf = Path(qc_dir,"{sample_type}.{sample}.quality_distribution_metrics.pdf").as_posix(),
        benchmark:
            Path(benchmark_dir, "sentieon_plot_qc_metrics_{sample_type}.{sample}.tsv").as_posix()
        params:
            sample_id = "{sample}",
            sentieon_exec = config_model.sentieon.sentieon_exec,
            sentieon_lic = config_model.sentieon.sentieon_license,
        message:
            ("Creates plots from various QC metrics by Sentieon mimicking Picard tools"
            "Current sample: {params.sample_id}")
        shell:
            """
    {params.sentieon_exec} plot InsertSizeMetricAlgo {input.insert_size_metrics} -o {output.insert_size_pdf} ; 
    {params.sentieon_exec} plot GCBias {input.gc_bias_metrics} -o {output.gc_bias_pdf} ; 
    {params.sentieon_exec} plot MeanQualityByCycle {input.quality_by_cycle_metrics} -o {output.quality_by_cycle_pdf} ; 
    {params.sentieon_exec} plot QualDistribution {input.quality_distribution_metrics} -o {output.quality_distribution_pdf} ;
            """
else:
    rule sentieon_plot_qc_metrics_tga:
        input:
            insert_size_metrics = Path(qc_dir,"{sample_type}.{sample}.insert_size_metrics.txt").as_posix(),
            quality_by_cycle_metrics = Path(qc_dir,"{sample_type}.{sample}.quality_by_cycle_metrics.txt").as_posix(),
            quality_distribution_metrics = Path(qc_dir,"{sample_type}.{sample}.quality_distribution_metrics.txt").as_posix()
        output:
            insert_size_pdf =  Path(qc_dir,"{sample_type}.{sample}.insert_size_metrics.pdf").as_posix(),
            quality_by_cycle_pdf = Path(qc_dir,"{sample_type}.{sample}.quality_by_cycle_metrics.pdf").as_posix(),
            quality_distribution_pdf = Path(qc_dir,"{sample_type}.{sample}.quality_distribution_metrics.pdf").as_posix(),
        benchmark:
            Path(benchmark_dir, "sentieon_plot_qc_metrics_{sample_type}.{sample}.tsv").as_posix()
        params:
            sample_id = "{sample}",
            sentieon_exec = config_model.sentieon.sentieon_exec,
            sentieon_lic = config_model.sentieon.sentieon_license,
        message:
            ("Creates plots from various QC metrics by Sentieon mimicking Picard tools"
            "Current sample: {params.sample_id}")
        shell:
            """
    {params.sentieon_exec} plot InsertSizeMetricAlgo {input.insert_size_metrics} -o {output.insert_size_pdf} ; 
    {params.sentieon_exec} plot MeanQualityByCycle {input.quality_by_cycle_metrics} -o {output.quality_by_cycle_pdf} ; 
    {params.sentieon_exec} plot QualDistribution {input.quality_distribution_metrics} -o {output.quality_distribution_pdf} ;
            """
