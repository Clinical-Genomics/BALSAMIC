# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

def repeat(param, values):
    param_values = []

    for value in values:
        param_values.append(" ".join(map(str, [param, value])))

    return " ".join(param_values)


rule sentieon_wgs_metrics:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        reference = config["reference"]["reference_genome"]
    output:
        wgs_metrics = qc_dir + "{sample}_sentieon_wgs_metrics.txt",
        coverage_metrics = qc_dir + "{sample}_coverage.gz"
    benchmark:
        Path(benchmark_dir,'sentieon_wgs_metrics_' + "{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        min_base_qual = '10',
        gene_list = config["reference"]["refgene_txt"],
        cov_threshold = repeat("--cov_thresh", [50, 100, 150, 200, 250]),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample = '{sample}'
    threads:
        get_threads(cluster_config, 'sentieon_wgs_metrics')
    message:
        "Calculate coverage metrics for wgs cases using sentieon tools for sample {params.sample}"
    shell:
        """
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-i {input.bam} \
-r {input.reference} \
--algo WgsMetricsAlgo \
--min_base_qual {params.min_base_qual} \
{output.wgs_metrics};

{params.sentieon_exec} driver \
-i {input.bam} \
-r {input.reference} \
--algo CoverageMetrics \
--gene_list {params.gene_list} {params.cov_threshold} \
{output.coverage_metrics}_tmp;

gzip -c {output.coverage_metrics}_tmp > {output.coverage_metrics} ;
rm {output.coverage_metrics}_tmp ;
rm -rf {params.tmpdir} ;
        """

rule sentieon_plot_qc_metrics_tga:
    input:
        insert_size_metrics = Path(qc_dir,"{sample_type}.{sample}.insert_size_metrics.txt").as_posix(),
        gc_bias_metrics = Path(qc_dir,"{sample_type}.{sample}.gc_bias.txt").as_posix(),
        quality_by_cycle_metrics = Path(qc_dir,"{sample_type}.{sample}.quality_by_cycle_metrics.txt").as_posix(),
        quality_distribution_metrics = Path(qc_dir,"{sample_type}.{sample}.quality_distribution_metrics.txt").as_posix()
    output:
        insert_size_pdf =  Path(qc_dir,"{sample_type}.{sample}.insert_size_metrics.pdf").as_posix(),
        gc_bias_pdf = Path(qc_dir,"{sample_type}.{sample}.gc_bias.pdf").as_posix(),
        quality_by_cycle_pdf = Path(qc_dir,"{sample_type}.{sample}.quality_by_cycle_metrics.pdf").as_posix(),
        quality_distribution_pdf = Path(qc_dir,"{sample_type}.{sample}.quality_distribution_metrics.pdf").as_posix(),
    benchmark:
        Path(benchmark_dir, "sentieon_dedup_{sample_type}.{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample_id = "{sample}",
    threads:
        get_threads(cluster_config,'sentieon_dedup')
    message:
        ("Creates plots from various QC metrics by Sentieon mimicking Picard tools"
        "Current sample: {params.sample_id}")
    shell:
        """
{params.sentieon_exec} plot InsertSizeMetricAlgo {input.insert_size_metrics} {output.insert_size_pdf} ; 
{params.sentieon_exec} plot GCBias {input.qc_bias_metrics} {output.gc_bias_pdf} ; 
{params.sentieon_exec} plot MeanQualityByCycle {input.quality_by_cycle_metrics} {output.quality_by_cycle_pdf} ; 
{params.sentieon_exec} plot QualDistribution {input.quality_distribution_metrics} {output.quality_distribution_pdf} ; 
        """