# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

def repeat(param, values):
    param_values = []

    for value in values:
        param_values.append(" ".join(map(str, [param, value])))

    return " ".join(param_values)




rule sentieon_wgs_metrics:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        reference = config["reference"]["reference_genome"]
    output:
        wgs_metrics = qc_dir + "{sample}_sentieon_wgs_metrics.txt",
        coverage_metrics = qc_dir + "{sample}_coverage.gz",
        mean_qual_metrics = qc_dir + "{sample}_sentieon_mq_metrics.txt",
        qual_dist_metrics = qc_dir + "{sample}_sentieon_qd_metrics.txt",
        gc_bias_summary = qc_dir + "{sample}_sentieon_gc_summary.txt",
        gc_bias_metrics = qc_dir + "{sample}_sentieon_gc_metrics.txt",
        align_metrics = qc_dir + "{sample}_sentieon_aln_metrics.txt",
        insert_size_metrics = qc_dir + "{sample}_sentieon_insertsize_metrics.txt",
        seq_artifact_metrics = qc_dir + "{sample}_sentieon_seqartifact_metrics.txt",
        plot_gc_bias_metrics = qc_dir + "{sample}_sentieon_gc_metrics.pdf",
        plot_qual_dist_metrics = qc_dir + "{sample}_sentieon_qd_metrics.pdf",
        plot_mean_qual_metrics = qc_dir + "{sample}_sentieon_mq_metrics.pdf",
        plot_insert_size_metrics = qc_dir + "{sample}_sentieon_insertsize_metrics.pdf"
    benchmark:
        Path(benchmark_dir,'sentieon_wgs_metrics_' + "{sample}.tsv").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        min_base_qual = '10',
        gene_list = config["reference"]["refgene_txt"],
        cov_threshold = repeat("--cov_thresh", [50, 100, 150, 200, 250]),
        sentieon_exec = config["SENTIEON_EXEC"],
        sentieon_lic = config["SENTIEON_LICENSE"],
        sample = '{sample}'
    threads:
        get_threads(cluster_config, 'sentieon_wgs_metrics')
    message:
        "Calculate coverage metrics for wgs cases using sentieon tools for sample {params.sample}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
export SENTIEON_TMPDIR={params.tmpdir};
export SENTIEON_LICENSE={params.sentieon_lic};

{params.sentieon_exec} driver \
-i {input.bam} \
-r {input.reference} \
--algo WgsMetricsAlgo \
--min_base_qual {params.min_base_qual} \
{output.wgs_metrics};

{params.sentieon_exec} driver \
-i {input.bam} \
-r {input.reference} \
--algo MeanQualityByCycle {output.mean_qual_metrics} \
--algo QualDistribution {output.qual_dist_metrics} \
--algo GCBias --summary {output.gc_bias_summary} {output.gc_bias_metrics} \
--algo AlignmentStat --adapter_seq '' {output.align_metrics} \
--algo InsertSizeMetricAlgo {output.insert_size_metrics} \
--algo SequenceArtifactMetricsAlgo {output.seq_artifact_metrics};

{params.sentieon_exec} plot \
GCBias -o {output.plot_gc_bias_metrics} {output.gc_bias_metrics} ;

{params.sentieon_exec} plot \
QualDistribution -o {output.plot_mean_qual_metrics} {output.qual_dist_metrics} ;

{params.sentieon_exec} plot \
MeanQualityByCycle -o {output.plot_mean_qual_metrics} {output.mean_qual_metrics} ;

{params.sentieon_exec} plot \
InsertSizeMetricAlgo -o {output.plot_insert_size_metrics} {output.insert_size_metrics} ;

{params.sentieon_exec} driver \
-i {input.bam} \
-r {input.reference} \
--algo CoverageMetrics \
--gene_list {params.gene_list} {params.cov_threshold} \
{output.coverage_metrics}_tmp;

gzip -c {output.coverage_metrics}_tmp > {output.coverage_metrics};
rm {output.coverage_metrics}_tmp;
rm -rf {params.tmpdir};
        """
