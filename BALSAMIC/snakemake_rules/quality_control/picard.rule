# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

if "canfam3" in config['reference']['reference_genome']:
    memory = "20g"
else:
    memory = "16g"

rule picard_CollectHsMetrics:
    input:
        fadict = (config["reference"]["reference_genome"]).replace(".fasta",".dict"),
        bed = config["panel"]["capture_kit"],
        bam = bam_dir + "{sample}.sorted." + picarddup + ".bam",
        fa = config["reference"]["reference_genome"],
    output:
        mrkdup = bam_dir + "{sample}.sorted." + picarddup + ".hsmetric"
    benchmark:
        Path(benchmark_dir + "picard_CollectHsMetrics_" + "{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("picard") + ".sif").as_posix()
    params:
        mem = memory,
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        baitsetname = os.path.basename(config["panel"]["capture_kit"]),
        sample = '{sample}'
    threads:
        get_threads(cluster_config, 'picard_CollectHsMetrics')
    message:
        "Calculating picard HsMetrics for sample '{params.sample}'"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
BedToIntervalList \
I={input.bed} \
O={input.bam}.picard.bedintervals \
SD={input.fadict};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
CollectHsMetrics \
BI={input.bam}.picard.bedintervals \
TI={input.bam}.picard.bedintervals \
I={input.bam} \
O={output.mrkdup} \
R={input.fa} \
BAIT_SET_NAME={params.baitsetname} \
COVERAGE_CAP=50000 \
METRIC_ACCUMULATION_LEVEL=ALL_READS;
      """


rule picard_CollectAlignmentSummaryMetrics:
    input:
        bam = bam_dir + "{sample}_align_sort_{fastqpattern}.bam",
        fa = config["reference"]["reference_genome"]
    output:
        bam_dir + "{sample}.sorted.{fastqpattern}.alignmetric"
    benchmark:
        Path(benchmark_dir, "CollectAlignmentSummaryMetrics_" + "{sample}_{fastqpattern}.tsv").as_posix()
    singularity:
        Path(singularity_image,config["bioinfo_tools"].get("picard") + ".sif").as_posix()
    params:
        mem = "16g",
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        adapter = config["QC"]["adapter"],
        fastqpattern = '{fastqpattern}'
    threads:
        get_threads(cluster_config,'picard_CollectAlignmentSummaryMetrics')
    message:
        "Calculating picard alignment summary metrics for sample '{params.fastqpattern}'"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
CollectAlignmentSummaryMetrics \
R={input.fa} \
I={input.bam} \
O={output} \
ADAPTER_SEQUENCE={params.adapter} \
METRIC_ACCUMULATION_LEVEL=ALL_READS \
METRIC_ACCUMULATION_LEVEL=LIBRARY;
        """


rule picard_CollectInsertSizeMetrics:
    input:
        bam = bam_dir + "{sample}_align_sort_{fastqpattern}.bam"
    output:
        pdf = bam_dir + "{sample}.sorted.{fastqpattern}.insertsizemetric.pdf",
        txt = bam_dir + "{sample}.sorted.{fastqpattern}.insertsizemetric"
    benchmark:
        Path(benchmark_dir, "picard_CollectInsertSizeMetrics_" + "{sample}_{fastqpattern}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("picard") + ".sif").as_posix()
    params:
        mem = "16g",
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        fastqpattern = '{fastqpattern}'
    threads:
        get_threads(cluster_config,'picard_CollectInsertSizeMetrics')
    message:
        "Calculating picard InsertSize metrics for sample '{params.fastqpattern}'"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
CollectInsertSizeMetrics \
I={input.bam} \
H={output.pdf} \
O={output.txt} \
M=0.01 \
INCLUDE_DUPLICATES=TRUE \
METRIC_ACCUMULATION_LEVEL=ALL_READS \
METRIC_ACCUMULATION_LEVEL=LIBRARY;
        """
