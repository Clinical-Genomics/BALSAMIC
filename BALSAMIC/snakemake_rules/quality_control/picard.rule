# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

if "canfam3" in config['reference']['reference_genome']:
    memory = "20g"
else:
    memory = "16g"

rule picard_CollectHsMetrics:
    input:
        fadict = (config["reference"]["reference_genome"]).replace(".fasta",".dict"),
        bed = config["panel"]["capture_kit"],
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        fa = config["reference"]["reference_genome"],
    output:
        hs_metrics = qc_dir + "{sample_type}.{sample}.hsmetric.txt"
    benchmark:
        Path(benchmark_dir + "picard_CollectHsMetrics_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("picard") + ".sif").as_posix()
    params:
        mem = memory,
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        baitsetname = Path(config["panel"]["capture_kit"]).name,
        sample = "{sample}"
    threads:
        get_threads(cluster_config, "picard_CollectHsMetrics")
    message:
        "Calculating picard HsMetrics for sample {params.sample}"
    shell:
        """
export TMPDIR={params.tmpdir};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
BedToIntervalList \
I={input.bed} \
O={input.bam}.picard.bedintervals \
SD={input.fadict};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
CollectHsMetrics \
BI={input.bam}.picard.bedintervals \
TI={input.bam}.picard.bedintervals \
I={input.bam} \
O={output.hs_metrics} \
R={input.fa} \
BAIT_SET_NAME={params.baitsetname} \
COVERAGE_CAP=50000 \
METRIC_ACCUMULATION_LEVEL=ALL_READS;

rm -rf {params.tmpdir}
      """
