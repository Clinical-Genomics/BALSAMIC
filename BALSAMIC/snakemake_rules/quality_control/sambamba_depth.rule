# vim: syntax=python tabstop=4 expandtab
# coding: utf-8



rule sambamba_panel_depth:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        bed = config["panel"]["capture_kit"]
    output:
        bam_dir + "{sample}.dedup.realign.cov.bed"
    benchmark:
        Path(benchmark_dir, "sambamba_panel_depth_" + "{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("sambamba") + ".sif").as_posix()
    params:
        base_qual = 10,
        cov_start = 50,
        cov_end = 1000,
        cov_step = 50,
        filter_string="'not (unmapped or mate_is_unmapped) and not duplicate and not failed_quality_control and mapping_quality > 10'",
        sample = '{sample}'
    threads:
        get_threads(cluster_config, 'sambamba_panel_depth')
    message:
        "Calculate depth statistics using sambamba for sample {params.sample}"
    shell:
        """
covStr=`seq {params.cov_start} {params.cov_step} {params.cov_end} | xargs -n1 echo -n \" --cov-threshold\"`;

sambamba depth region \
--regions {input.bed} \
--min-base-quality={params.base_qual} \
--filter {params.filter_string} \
--nthreads {threads} \
`echo $covStr` {input.bam} > {output}; 
        """


rule sambamba_exon_depth:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        bed = config["reference"]["refgene_bed"]
    output:
        bam_dir + "{sample}.dedup.realign.exon.cov.bed"
    benchmark:
        Path(benchmark_dir, "sambamba_exon_depth_" + "{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("sambamba") + ".sif").as_posix()
    params:
        base_qual = 10,
        cov_1 = "50",
        cov_2 = "100",
        cov_3 = "150",
        cov_4 = "200",
        cov_5 = "250",
        filter_string = "'not (unmapped or mate_is_unmapped) and not duplicate and not failed_quality_control and mapping_quality > 10'",
        sample = 'sample'
    threads:
        get_threads(cluster_config,'sambamba_exon_depth')
    message:
        "Calculate exon depth stastics using sambamba for sample {params.sample}"
    shell:
        """
sambamba depth region \
--regions {input.bed} \
--min-base-quality={params.base_qual} \
--filter {params.filter_string} \
--cov-threshold {params.cov_1} --cov-threshold {params.cov_2} \
--cov-threshold {params.cov_3} --cov-threshold {params.cov_4} \
--cov-threshold {params.cov_5} \
--nthreads {threads} {input.bam} > {output};
        """
