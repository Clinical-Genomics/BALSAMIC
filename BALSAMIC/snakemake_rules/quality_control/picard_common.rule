# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

if config["analysis"]["sequencing_type"] != "wgs":
    rule picard_CollectAlignmentSummaryMetrics_WGS:
        input:
            bam = Path(bam_dir + "{sample_type}.{sample}.{fastq_pattern}.align_sort.bam").as_posix(),
            fa = config["reference"]["reference_genome"]
        output:
            alignment_metrics = Path(qc_dir,"{sample_type}.{sample}.{fastq_pattern}.alignment_summary_metrics.txt").as_posix(),
        benchmark:
            Path(benchmark_dir, "CollectAlignmentSummaryMetrics.{sample_type}.{sample}.{fastq_pattern}.tsv").as_posix()
        singularity:
            Path(singularity_image,config["bioinfo_tools"].get("picard") + ".sif").as_posix()
        params:
            mem = "16g",
            tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
            adapter = config["QC"]["adapter"],
            sample = "{sample}",
            fastqpattern = "{fastq_pattern}"
        message:
            "Calculating picard alignment summary metrics for {params.sample} {params.fastqpattern}"
        shell:
            """
    export TMPDIR={params.tmpdir};
    picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
    CollectAlignmentSummaryMetrics \
    R={input.fa} \
    I={input.bam} \
    O={output} \
    ADAPTER_SEQUENCE={params.adapter} \
    METRIC_ACCUMULATION_LEVEL=ALL_READS \
    METRIC_ACCUMULATION_LEVEL=LIBRARY;
            """
else:
    rule picard_CollectAlignmentSummaryMetrics_TGA:
        input:
            bam = Path(bam_dir, "{sample_type}.{sample}.align_sort.bam").as_posix(),
            fa = config["reference"]["reference_genome"]
        output:
            alignment_metrics = Path(qc_dir,"{sample_type}.{sample}.alignment_summary_metrics.txt").as_posix(),
        benchmark:
            Path(benchmark_dir, "CollectAlignmentSummaryMetrics.{sample_type}.{sample}.tsv").as_posix()
        singularity:
            Path(singularity_image,config["bioinfo_tools"].get("picard") + ".sif").as_posix()
        params:
            mem = "25g",
            tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
            adapter = config["QC"]["adapter"],
            sample = "{sample}"
        message:
            "Calculating picard alignment summary metrics for sample {params.sample}"
        shell:
            """
    export TMPDIR={params.tmpdir};
    picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
    CollectAlignmentSummaryMetrics \
    R={input.fa} \
    I={input.bam} \
    O={output} \
    ADAPTER_SEQUENCE={params.adapter} \
    METRIC_ACCUMULATION_LEVEL=ALL_READS \
    METRIC_ACCUMULATION_LEVEL=LIBRARY;
            """
