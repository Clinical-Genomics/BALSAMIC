# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

# Following rule will take input fastq files, align them using bwa mem, and convert the output to sam format

def get_samplereads(wcs):
    fastq_list = []
    for fastq_pattern in fastq_dict[f"{wcs.sample}"]["fastqpair_patterns"]:
        fastq_list.append(fastq_dict[f"{wcs.sample}"]["fastqpair_patterns"][fastq_pattern]["fwd"])
        fastq_list.append(fastq_dict[f"{wcs.sample}"]["fastqpair_patterns"][fastq_pattern]["rev"])
    return fastq_list

rule fastqc:
    input:
        samplereads=get_samplereads
    output:
        fastqccomplete = fastqc_dir + "{sample}_fastqc.completed",
    benchmark:
        Path(benchmark_dir, "fastqc_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("fastqc") + ".sif").as_posix()
    params:
        fastqc_dir = fastqc_dir,
        sample_id = "{sample}",
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
    threads: get_threads(cluster_config, "fastqc")
    message:
        "Running FastQC on {params.sample_id}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
    
fastqc --threads {threads} {input.samplereads} \
--dir {params.tmpdir} \
--outdir {params.fastqc_dir};
 
echo "Ran FastQC on {input.samplereads}" >> {output.fastqccomplete}
        """
