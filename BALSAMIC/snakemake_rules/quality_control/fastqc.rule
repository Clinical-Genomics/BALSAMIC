# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

# Following rule will take input fastq files, align them using bwa mem, and convert the output to sam format

def get_fwd_read(wcs):
    for sample in fastq_dict:
        if f"{wcs.fastqpattern}" in fastq_dict[sample]["fastqpair_patterns"]:
            return fastq_dict[sample]["fastqpair_patterns"][f"{wcs.fastqpattern}"]["fwd"]

def get_rev_read(wcs):
    for sample in fastq_dict:
        if f"{wcs.fastqpattern}" in fastq_dict[sample]["fastqpair_patterns"]:
            return fastq_dict[sample]["fastqpair_patterns"][f"{wcs.fastqpattern}"]["rev"]

rule fastqc:
    input:
        read1=get_fwd_read,
        read2=get_rev_read
    output:
        fastqc1 = fastqc_dir + "{fastqpattern}_1_fastqc.zip",
        fastqc2 = fastqc_dir + "{fastqpattern}_2_fastqc.zip"
    benchmark:
        Path(benchmark_dir, "fastqc_{fastqpattern}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("fastqc") + ".sif").as_posix()
    params:
        fastqc_dir = fastqc_dir,
        fastqpattern = "{fastqpattern}",
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
    threads: get_threads(cluster_config, "fastqc")
    message:
        "Running FastQC on {params.fastqpattern}"
    shell:
        """
mkdir -p {params.tmpdir};
export TMPDIR={params.tmpdir};
    
fastqc --threads {threads} {input.read1} \
--dir {params.tmpdir} \
--outdir {params.fastqc_dir};
    
fastqc --threads {threads} {input.read2} \
--dir {params.tmpdir} \
--outdir {params.fastqc_dir};
        """
