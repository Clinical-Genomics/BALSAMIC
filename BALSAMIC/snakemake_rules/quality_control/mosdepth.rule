# vim: syntax=python tabstop=4 expandtab
# coding: utf-8



rule mosdepth_coverage:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        bed = config["panel"]["capture_kit"]
    output:
        qc_dir + "{sample_type}.{sample}.mosdepth.global.dist.txt",
        qc_dir + "{sample_type}.{sample}.mosdepth.region.dist.txt",
        qc_dir + "{sample_type}.{sample}.mosdepth.summary.txt",
        qc_dir + "{sample_type}.{sample}.per-base.bed.gz",
        qc_dir + "{sample_type}.{sample}.regions.bed.gz"
    benchmark:
        Path(benchmark_dir, "mosdepth_coverage_" + "{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("mosdepth") + ".sif").as_posix()
    params:
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        mapq = params.mosdepth.mapq,
        samflag = params.mosdepth.samflag,
        quantize = params.mosdepth.quantize,
        sample_name = '{sample}',
        output_dir = qc_dir,
    threads: 12
    resources:
        runtime=280,
        mem_mb=12000
    message:
        "Calculate coverage using mosdepth for sample {params.sample_name}"
    shell:
        """
export TMPDIR={params.tmpdir};
export MOSDEPTH_Q0=NO_COVERAGE;
export MOSDEPTH_Q1=LOW_COVERAGE;
export MOSDEPTH_Q2=CALLABLE;
export MOSDEPTH_Q3=HIGH_COVERAGE;
    
mosdepth \
--by {input.bed} \
--mapq {params.mapq} \
--flag {params.samflag} \
--quantize {params.quantize} \
--threads {resources.threads} \
{params.output_dir}{wildcards.sample_type}.{wildcards.sample} \
{input.bam};
        """
