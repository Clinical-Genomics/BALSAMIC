# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule picard_CollectHsMetrics_WGS:
    input:
        fadict = config_model.reference["reference_genome"].replace(".fasta",".dict"),
        bed = config_model.reference["refgene_bed"],
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        fa = config_model.reference["reference_genome"],
    output:
        hs_metrics = qc_dir + "{sample_type}.{sample}.hsmetric.txt"
    benchmark:
        Path(benchmark_dir + "picard_CollectHsMetrics_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image, config["bioinfo_tools"].get("picard") + ".sif").as_posix()
    params:
        mem = "16g",
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        bed_name = Path(config_model.reference["refgene_bed"]).name,
        sample = "{sample}"
    threads: 8
    resources:
        runtime=360,
        mem_mb=30000
    message:
        "Calculating picard HsMetrics for sample {params.sample}"
    shell:
        """
export TMPDIR={params.tmpdir};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
BedToIntervalList \
I={input.bed} \
O={input.bam}.picard.bedintervals \
SD={input.fadict};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
CollectHsMetrics \
BI={input.bam}.picard.bedintervals \
TI={input.bam}.picard.bedintervals \
I={input.bam} \
O={output.hs_metrics} \
R={input.fa} \
BAIT_SET_NAME={params.bed_name} \
COVERAGE_CAP=50000 \
METRIC_ACCUMULATION_LEVEL=ALL_READS;

rm -rf {params.tmpdir}
      """


rule picard_CollectWgsMetrics:
    input:
        bam = lambda wildcards: config_model.get_final_bam_name(bam_dir = bam_dir, sample_name = wildcards.sample),
        reference = config["reference"]["reference_genome"]
    output:
        qc_dir + "{sample_type}.{sample}_picard_wgs_metrics.txt"
    benchmark:
        Path(benchmark_dir + "picard_CollectWgsMetrics_{sample_type}_{sample}.tsv").as_posix()
    singularity:
        Path(singularity_image,config[ "bioinfo_tools" ].get("picard") + ".sif").as_posix()
    params:
        mem = "16g",
        tmpdir = tempfile.mkdtemp(prefix=tmp_dir),
        sample = "{sample}"
    threads: 8
    resources:
        runtime=360,
        mem_mb=16000
    message:
        "Collecting various picard quality metrics for wgs sample {params.sample}"
    shell:
        """
export TMPDIR={params.tmpdir};

picard -Djava.io.tmpdir={params.tmpdir} -Xmx{params.mem} \
CollectWgsMetrics \
I={input.bam} \
O={output} \
R={input.reference};

rm -rf {params.tmpdir}
        """
