#!python
# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Hassan Foroughi Asl"

from BALSAMIC.utils.rule import get_conda_env
from BALSAMIC.utils.rule import get_threads
from BALSAMIC import __version__ as bv

qc_dir = result_dir + "qc/"

if 'quality_trim' in config['QC'].keys():
    fastp_param = list()
    if config['QC']['quality_trim']:
        fastp_param.extend(["--trim_tail1", "1", "--n_base_limit", "5",
                            "--length_required", config["QC"]["min_seq_length"],
                            "--low_complexity_filter", "--trim_poly_g"])
    else:
        fastp_param.extend(["--disable_quality_filtering", "--disable_length_filtering", "--disable_trim_poly_g"])

    if not config['QC']['adapter_trim']:
        fastp_param.extend(["--disable_adapter_trimming"])

    if config['QC']['umi_trim']:
        fastp_param.extend(["--umi","--umi_loc per_read","--umi_len", config['QC']['umi_trim_length'],"--umi_prefix","UMI"])

    fastp_param = " ".join(fastp_param)

# remove adapter from paired end reads
rule fastp:
  input:
    read1=config["analysis"]["fastq_path"] + "{sample}" + "_1.fastq.gz",
    read2=config["analysis"]["fastq_path"] + "{sample}" + "_2.fastq.gz",
  output:
    read1 = fastq_dir + "{sample}_1.fp.fastq.gz",
    read2 = fastq_dir + "{sample}_2.fp.fastq.gz",
    json_out = qc_dir + "{sample}_fastp.json",
    html_out = qc_dir + "{sample}_fastp.html"
  params:
    fastq_dir = fastq_dir,
    extra = fastp_param,
    conda = get_conda_env(config["conda_env_yaml"],"fastp")
  singularity: singularity_image
  threads: get_threads(cluster_config, 'fastp')
  benchmark:
    benchmark_dir + "fastp_" + "{sample}_fastp.tsv"
  shell:
    "source activate {params.conda}; "
    "fastp "
    "--in1 {input.read1} --in2 {input.read2} "
    "--out1 {output.read1} --out2 {output.read2} "
    "--json {output.json_out} "
    "--overrepresentation_analysis "
    "{params.extra} "
    "--html {output.html_out} ; "
    "source deactivate;"
