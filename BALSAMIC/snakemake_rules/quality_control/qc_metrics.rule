# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

bcftools_counts_input = []

if config["analysis"]["analysis_workflow"] == "balsamic":
    bcftools_counts_input.append(vep_dir + "SV.somatic." + config["analysis"]["case_id"] + ".svdb.all.filtered.pass.stats")

    if config["analysis"]["sequencing_type"] == 'wgs':
        bcftools_counts_input.append(vep_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".tnscope.all.filtered.pass.stats")
    else:
        bcftools_counts_input.append(vep_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".vardict.all.filtered.pass.stats")

elif config["analysis"]["analysis_workflow"] == "balsamic-umi":
    bcftools_counts_input.append(vep_dir + "SNV.somatic." + config["analysis"]["case_id"] + ".TNscope_umi.all.filtered.pass.stats")

rule collect_custom_qc_metrics:
    input:
        bcftools_counts = bcftools_counts_input,
        json = qc_dir + "multiqc_data/multiqc_data.json"
    output:
        yaml = qc_dir + config["analysis"]["case_id"] + "_metrics_deliverables.yaml"
    params:
        collect_qc_metrics_script = get_script_path("collect_qc_metrics.py"),
        sequencing_type = get_sequencing_type(config),
        capture_kit = get_capture_kit(config),
        housekeeper_id = {"id": config["analysis"]["case_id"], "tags": "qc-metrics"}
    singularity:
        Path(singularity_image, "balsamic.sif").as_posix()
    threads:
        get_threads(cluster_config, "collect_custom_qc_metrics")
    message:
        "Extract the manually specified QC metric for validation and delivery"
    shell:
        """
python {params.collect_qc_metrics_script} {output.yaml} {input.json} {input.bcftools_counts} {params.sequencing_type} {params.capture_kit}
        """
